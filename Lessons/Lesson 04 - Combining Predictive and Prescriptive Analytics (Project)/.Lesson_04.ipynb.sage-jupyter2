{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-50fd237b-cea1-463e-ae3b-2dbcd2bbcfee.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"262.712px"},"toc_section_display":true,"toc_window_display":true}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"57b46f","input":"# EXECUTE FIRST\n\n# computational imports\nimport statsmodels.api as sm\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport plotly.express as px\nimport plotly.io as pio\n\n# display imports\n\nfrom IPython.core.display import HTML\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"code_folding":[0]},"pos":0,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"8e1efd","input":"df = pd.DataFrame({\n    'doors': [2, 3, 4, 6, 7, 8, 8, 10],\n    'windows': [3, 3, 3, 4, 4, 5, 5, 5],\n    'profit': [25, 30, 35, 43, 50, 55, 63, 70]\n})\ndf\n","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>doors</th>\n      <th>windows</th>\n      <th>profit</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>3</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>3</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>3</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>4</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>4</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>8</td>\n      <td>5</td>\n      <td>55</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8</td>\n      <td>5</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>10</td>\n      <td>5</td>\n      <td>70</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   doors  windows  profit\n0      2        3      25\n1      3        3      30\n2      4        3      35\n3      6        4      43\n4      7        4      50\n5      8        5      55\n6      8        5      63\n7     10        5      70"},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"cdf01a","input":"# uncomment the next line to see plot in vs code jupyter notebook\n#pio.renderers.default = \"plotly_mimetype+notebook\"\n\n#fig = go.Figure()\nfig = px.line(df, x='profit', y = ['doors','windows'])\n\n# Edit the layout\nfig.update_layout(title='Relationship of Door and Window Batch Profit to Overall Profit',\n                  xaxis_title='Overall Profit',\n                  yaxis_title='Profit per Batch')\nfig.show()\n","output":{"0":{"data":{"iframe":"42a1f9e7e0ab7735a38993e929b5cb84b6862724"},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"43fdce","input":"# this is the response variable - what we're trying to predict\nY = df['profit']\n\n# these are the predictor variables - note that we're using 2 predictor variables, so this is multiple linear regression\nX = df[['doors', 'windows']]\n\n# fitting the regression through the origin is as simple as calling the OLS (ordinary least squares) function, passing in the Y and X (in that order) and fitting the data with the fit function\nmodel_obj = sm.OLS(Y, X).fit()\n\n# we can extract just the coefficients from the model_obj.params\ncoefs = model_obj.params\n\n# we can print the whole model summary to review our model by calling the summary function\nprint(model_obj.summary())\n\nprint(f'\\nThe coefficients are:\\n {coefs}')\n\nprint(f'R-squared is {model_obj.rsquared}')\n","output":{"0":{"name":"stdout","output_type":"stream","text":"                                 OLS Regression Results                                \n=======================================================================================\nDep. Variable:                 profit   R-squared (uncentered):                   0.997\nModel:                            OLS   Adj. R-squared (uncentered):              0.996\nMethod:                 Least Squares   F-statistic:                              1017.\nDate:                Tue, 14 Feb 2023   Prob (F-statistic):                    2.55e-08\nTime:                        22:38:44   Log-Likelihood:                         -19.127\nNo. Observations:                   8   AIC:                                      42.25\nDf Residuals:                       6   BIC:                                      42.41\nDf Model:                           2                                                  \nCovariance Type:            nonrobust                                                  \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\ndoors          4.0289      0.762      5.284      0.002       2.163       5.894\nwindows        5.5221      1.218      4.534      0.004       2.542       8.503\n==============================================================================\nOmnibus:                        1.599   Durbin-Watson:                   2.285\nProb(Omnibus):                  0.450   Jarque-Bera (JB):                0.971\nSkew:                          -0.757   Prob(JB):                        0.615\nKurtosis:                       2.211   Cond. No.                         10.2\n==============================================================================\n\nNotes:\n[1] R² is computed without centering (uncentered) since the model does not contain a constant.\n[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\nThe coefficients are:\n doors      4.028878\nwindows    5.522124\ndtype: float64\nR-squared is 0.9970577496364398\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"27dcb2","input":"from pyomo.environ import *\n# abstract Wyndor model, using the predictions from linear regression to replace objective coefficients\nproducts = ['Doors', 'Windows']\nplants = ['Plant1', 'Plant2', 'Plant3']\n\n# we simply replace the formally static profit rate for windows and doors with the values returned from the linear regression model.\nprofit_rate = {'Doors': coefs['doors'], 'Windows': coefs['windows']}\nhours_available = {'Plant1': 4, 'Plant2': 12, 'Plant3': 18}\nhours_per_batch = {\n    'Plant1': {\n        'Doors': 1,\n        'Windows': 0\n    },\n    'Plant2': {\n        'Doors': 0,\n        'Windows': 2\n    },\n    'Plant3': {\n        'Doors': 3,\n        'Windows': 2\n    }\n}\n\n\n# Concrete Model\nmodel = ConcreteModel(name=\"WyndorWithPredictions\")\n\n# Decision Variables\nmodel.weekly_prod = Var(products, domain=NonNegativeReals)\n\n# Objective\nmodel.profit = Objective(expr=sum(profit_rate[pr] * model.weekly_prod[pr]\n                                  for pr in products),\n                         sense=maximize)\n\nmodel.capacity = ConstraintList()\nfor pl in plants:\n    model.capacity.add(\n        sum(hours_per_batch[pl][pr] * model.weekly_prod[pr]\n            for pr in products) <= hours_available[pl])\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution (again, we've changed to f-strings)\nprint(f\"Maximum Profit = ${1000*model.profit():,.2f}\")\nfor j in products:\n    print(f\"Batches of {j} = {model.weekly_prod[j]():.1f}\")\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum Profit = $41,190.50\nBatches of Doors = 2.0\nBatches of Windows = 6.0\n"}},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"2dac39","input":"We've provided a Jupyter notebook that walks you through each of the questions in the homework quiz. Use the notebook to run your code. Transfer your answers to the Canvas quiz when complete.\n","metadata":{"hidden":true},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"2ff5d6","input":"You will use multiple linear regression **through the origin** to fit airfare (FARE) as a linear function of the average number of coupons (COUPON) for that route, the Herfindel Index (HI), and the distance between the two endpoint airports in miles (DISTANCE).  \n\nYou will build three more linear regression models with COUPON, HI, and DISTANCE as predictors to fit separate regression equations through the origin for response variables:\n\n- the number of passengers on that route (PAX)\n- the starting city’s average personal income (S_INCOME)\n- the ending city’s average personal income (E_INCOME)\n\nSince each of these models uses the same predictors and the only thing that varies is the response variable, you'll write a function that takes in the predictors and response variables which:\n* runs the linear regression\n* returns the model\n* prints the regression equation.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"398848","input":"This course has three lessons that are project lessons. Typically, projects combine skills and knowledge from multiple weeks (and sometimes multiple courses). Project weeks generally do not involve textbook readings and have presentations that only cover the project scenario and any additional information you might need to complete the project.\n\nThis week's project involves combining predictive and prescriptive analytics. We're using the simplest of predictive analytics, linear regression. Everyone should have learned linear regression in DS705 (which is a prerequisite for this course). However, in 705, you used R, whereas in 775, we're using Python. We'll walk you through using the `statsmodel` package in Python to do linear regression, describe how it could be used in predictive analytics, and introduce you to the scenario for your project.\n\n# The Sample Problem - Wyndor Revisited\nOnce again, let's go back to the Wyndor problem. When Wyndor decided to build new products, they needed to enlist the help of key personnel in various units of the company. After discussing production hours with plant managers and engineers, they felt they had solid estimates for the number of hours of production time they'd need and the number of hours available. But, they still weren't sure about how to estimate the profit for each batch of windows and doors.\n\n<img src=\"images/WyndorProfitUnknown.jpg\" alt=\"Problem set up for Wyndor - includes table of data with production time needed and available for 2 products over 3 plants.\"/>\n\nTo set their estimated profit, they worked with the engineers, marketing division, and the accountants. We don't know what data they used to make their decisions. But, if they'd previously introduced other new products, it's feasible that they may have used some predictive analytics to model the estimated profit for each new product and fill in the question marks in the image above. \n\n## The Sample Data\nLet's assume that Wyndor had introduced new, similar, doors and windows previously, as a paired product launch, and they've done some market research of competitors.  Wyndor has gathered the following data, showing profit of batches of doors and windows and overall profit.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"57e96f","input":"Here we can see that our model accounts for 99.7% of the variability in the overall profit, which is quite good, and both of our predictors are significant with p-values less than .05. (Of course, this data is fairly contrived, and we probably have some issues with multi-collinearity that we're not addressing. But we're just trying to give you a general idea of how this might be used here.)\n\n## Utilizing Linear Regression Results in Optimization\nSo how do we use this in optimization? Remember that multiple linear regression with 2 variables and no intercept results in an equation of the form:\n\n$y = \\beta_1 * x_1 + \\beta_2 * x_2$\n\nWhere $\\beta_1$ corresponds to the coefficient for the first variable (in this case doors) and $\\beta_2$ corresponds to the coefficient for the second variable (in this case windows).\n\nDoesn't that look exactly like what our optimization objective function looked like when we hard-coded the coefficients for windows and doors?\n\nMaximize $Z = 3 * d + 5 * w$\n\nIn fact, we can just substitute the coefficients from our linear regression to generate an objective function which uses the predicted coefficients. Like so:\n\nMaximize $Z = \\beta_1 * d + \\beta_2 * w$\n\nLet's see what that looks like in code.\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"5f46ac","input":"# Lesson 4: Combining Predictive and Prescriptive Analytics (Project)","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"7f5cf4","input":"## Linear Programming","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"834493","input":"# Complete the Homework Quiz","metadata":{"heading_collapsed":true},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"8ca812","input":"The following problem takes place in the United States in the late 1990s, when many major US cities were facing issues with airport congestion, partly as a result of the 1978 deregulation of airlines. Both fares and routes were freed from regulation, and low-fare carriers such as Southwest (SW) began competing on existing routes and starting non-stop service on routes that previously lacked it.  Building new airports is not generally feasible, but sometimes decommissioned military bases or smaller municipal airports can be reconfigured as regional or larger commercial airports.  There are numerous players and interests involved in the issue (airlines, city, state, and federal authorities, civic groups, the military, airport operators), and an aviation consulting firm is seeking advisory contracts with these players.  \n\nA consulting firm wishes to determine the maximum average fare (FARE) as a function of three variables: COUPON, HI, and DISTANCE.  Moreover, they need to impose constraints on \n- the number of passengers on that route (PAX) $\\leq 20000$\n- the starting city’s average personal income (S_INCOME) $\\leq 30000$\n- the ending city’s average personal income (E_INCOME) $\\geq 30000$\n\nHowever, the variables PAX, S_INCOME, and E_INCOME are not decision variables so the firm first model these variables using COUPON, HI, and DISTANCE as predictors using linear regression (predictive analytics).  They'll also use linear regression to model a linear relation between FARE and COUPON, HI, and DISTANCE.  Armed with these predictive models, the firm will build a linear program (prescriptive analytics) to maximize the average fare.\n\nSuppose you are in the aviation consulting firm and you want to maximize airfares for the particular set circumstances described below. The file *Airfares.xlsx* contains real data that were collected between Q3-1996 and Q2-1997. The first sheet contains variable descriptions while the second sheet contains the data.  A csv file of the data is also provided (called *Airfares.csv*).\n\n*NOTE: This problem scenario is developed from pp. 170-171 in Data Mining for Business Analytics: Concepts, Techniques, and Applications in R, by Shmueli, Bruce, Yahav, Patel, and Lichtendahl, Wiley, 2017)*","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"9c46e5","input":"# Predictive Analytics","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"db0acb","input":"Now that you've seen the basic concepts, we'd like to introduce you to a more complicated scenario that you'll be using for your homework. Don't panic, though. It all works the same way. You'll use predictive analytics to generate estimated coefficients. Once your regression models are built, you'll set the historical data aside, and proceed with linear programming, using those modeled coefficients.\n\n# The Scenario","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"e374d0","input":"## Running Linear Regression with Statsmodel\nRemember that the objective function of a linear program is really nothing more than a linear regression equation, fitted through the origin. We can use this historical data to estimate our coefficients for our linear program. In Python, we'll use `statsmodel` to run our linear regression.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"f37df1","input":"# Prescriptive Analytics","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"f83049","input":"We can plot the data and note that it appears that both door and window batch profits share a linear relationship with overall profit, based on this historical data.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"fea1c3","input":"Use the fitted regression equation for airfare (FARE) as a linear function of the average number of coupons (COUPON) for that route, the Herfindel Index (HI), and the distance between the two endpoint airports in miles (DISTANCE) as the objective function.\n\nThe three linear regression equations for the number of passengers on that route (PAX), the starting city’s average personal income (S_INCOME), the ending city’s average personal income (E_INCOME) as functions of the average number of coupons (COUPON) for that route, the Herfindel Index (HI), and the distance between the two endpoint airports in miles (DISTANCE) are to be used as three of the constraint equations.\n\n- the number of passengers on that route (PAX) $\\leq 20000$\n- the starting city’s average personal income (S_INCOME) $\\leq 30000$\n- the ending city’s average personal income (E_INCOME) $\\geq 30000$\n\nFor additional constraints:\n* restrict COUPON to no more than 1.5\n* limit HI to between 4000 and 8000, inclusive\n* consider only routes with DISTANCE between 500 and 1000 miles, inclusive.","pos":16,"type":"cell"}
{"id":0,"time":1676956211818,"type":"user"}
{"last_load":1676995093586,"type":"file"}