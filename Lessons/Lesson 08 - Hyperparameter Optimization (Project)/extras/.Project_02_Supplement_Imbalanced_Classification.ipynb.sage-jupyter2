{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":10,"id":"60d37b","input":"#run the logistic regressgion baseline\nlogreg_model = LogisticRegression(solver='lbfgs',max_iter=1000, class_weight='balanced')    \n\n#fit the model\nlogreg_model.fit(X_train, y_train)\n\n#calculate score\nscore, auc, sens, prec, spec = my_classifier_results(logreg_model)\nc_df = updateResults(c_df, 'LogReg - Baseline', 1, score, auc, sens, prec, spec)","output":{"0":{"name":"stdout","output_type":"stream","text":"Model accuracy score from test data: 0.7010\nModel AUC from test data: 0.6761\nSensitivity (true positive rate) on test data: 0.65\nPrecision (positive predictive value) on test data: 0.11\nSpecificity (true negative rate) on test data: 0.70\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>35</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>280</td>\n      <td>666</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             35             19\ntrue:not user        280            666"},"exec_count":10,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"7fb14e","input":"#the randomforestclassifer uses a balanced_subsample\nrfc_model = RandomForestClassifier(n_estimators=100, class_weight='balanced_subsample')    \n\n#fit the model\nrfc_model.fit(X_train, y_train)\n\n#calculate score\n\nscore, auc, sens, prec, spec = my_classifier_results(rfc_model)\nc_df = updateResults(c_df, 'RFC - Baseline', 1, score, auc, sens, prec, spec)","output":{"0":{"name":"stdout","output_type":"stream","text":"Model accuracy score from test data: 0.9430\nModel AUC from test data: 0.4984\nSensitivity (true positive rate) on test data: 0.00\nPrecision (positive predictive value) on test data: 0.00\nSpecificity (true negative rate) on test data: 1.00\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>0</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>3</td>\n      <td>943</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user              0             54\ntrue:not user          3            943"},"exec_count":11,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"8b40df","input":"gnb_model = GaussianNB()    \n\n#the GNB model requires an array of weights - use a list comprehension and cast to numpy array\nsample_weights = np.array([17 if i == 1 else 1 for i in y_train])\n\n#fit the model\ngnb_model.fit(X_train, y_train, sample_weight=sample_weights)\n\n#calculate score\nscore, auc, sens, prec, spec = my_classifier_results(gnb_model)\nc_df = updateResults(c_df, 'GNB - Baseline', 1, score, auc, sens, prec, spec)","output":{"0":{"name":"stdout","output_type":"stream","text":"Model accuracy score from test data: 0.0790\nModel AUC from test data: 0.5045\nSensitivity (true positive rate) on test data: 0.98\nPrecision (positive predictive value) on test data: 0.05\nSpecificity (true negative rate) on test data: 0.03\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>53</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>920</td>\n      <td>26</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             53              1\ntrue:not user        920             26"},"exec_count":12,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"55cd33","input":"from sklearn.linear_model import RidgeClassifier   \n\nridge_model = RidgeClassifier(class_weight='balanced')\n\n\n#fit the model\nridge_model.fit(X_train, y_train)\n\n#calculate score\nscore, auc, sens, prec, spec = my_classifier_results(ridge_model)\nc_df = updateResults(c_df, 'Ridge - Baseline', 1, score, auc, sens, prec, spec)","output":{"0":{"name":"stdout","output_type":"stream","text":"Model accuracy score from test data: 0.6950\nModel AUC from test data: 0.6642\nSensitivity (true positive rate) on test data: 0.63\nPrecision (positive predictive value) on test data: 0.11\nSpecificity (true negative rate) on test data: 0.70\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>34</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>285</td>\n      <td>661</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             34             20\ntrue:not user        285            661"},"exec_count":13,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"62fa66","input":"xgb_model = xgb.XGBClassifier(objective=\"binary:logistic\")\n\n#fit the model - passing in the sample_weights\nxgb_model.fit(X_train, y_train, sample_weight=sample_weights)\n\n#calculate score\nscore, auc, sens, prec, spec = my_classifier_results(xgb_model)\nc_df = updateResults(c_df, 'XGB - Baseline', 1, score, auc, sens, prec, spec)\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Model accuracy score from test data: 0.7350\nModel AUC from test data: 0.6591\nSensitivity (true positive rate) on test data: 0.57\nPrecision (positive predictive value) on test data: 0.11\nSpecificity (true negative rate) on test data: 0.74\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>31</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>242</td>\n      <td>704</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             31             23\ntrue:not user        242            704"},"exec_count":14,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"0fe12d","input":"# run GridSearchCV with our model to find better hyperparameters\nfrom sklearn.model_selection import GridSearchCV\n\n\n#########################\n#grid search\n#########################\nparams = {\n    \"learning_rate\": [0.01, 0.1], #pick floats from 0 to 1\n    \"max_depth\": [2, 4, 6], #pick integers in range [0,inf] (but you'd usually want at least 1)\n    \"n_estimators\": [10, 100], #number of trees. Default is 100\n    \"subsample\": [0.8, 1], #pick floats from 0 to 1\n    \"min_child_weight\": [1, 3], #pick numbers 0 to inf\n    \"reg_lambda\": [1, 3], #pick numbers from 0 to inf\n    \"reg_alpha:\": [1, 3] #pick numbers from 0 to inf\n}\n\n# setup the grid search\ngrid_search = GridSearchCV(xgb_model,\n                           param_grid=params,\n                           cv=5,\n                           verbose=1,\n                           n_jobs=3,\n                           return_train_score=True)\n\n\n#fit the model\ngrid_search.fit(X_train, y_train, sample_weight=sample_weights)\n\n#calculate score\nscore, auc, sens, prec, spec = my_classifier_results(grid_search)\nc_df = updateResults(c_df, 'XGB - Grid Search', 960, score, auc, sens, prec, spec)\n\n\n \n ","output":{"0":{"name":"stdout","output_type":"stream","text":"Fitting 5 folds for each of 192 candidates, totalling 960 fits\n"},"1":{"name":"stderr","output_type":"stream","text":"[Parallel(n_jobs=3)]: Using backend LokyBackend with 3 concurrent workers.\n[Parallel(n_jobs=3)]: Done  44 tasks      | elapsed:    5.0s\n[Parallel(n_jobs=3)]: Done 194 tasks      | elapsed:   33.1s\n[Parallel(n_jobs=3)]: Done 444 tasks      | elapsed:  1.9min\n[Parallel(n_jobs=3)]: Done 794 tasks      | elapsed:  3.4min\n[Parallel(n_jobs=3)]: Done 960 out of 960 | elapsed:  4.5min finished\n"},"2":{"name":"stdout","output_type":"stream","text":"Model accuracy score from test data: 0.8590\nModel AUC from test data: 0.5239\nSensitivity (true positive rate) on test data: 0.15\nPrecision (positive predictive value) on test data: 0.08\nSpecificity (true negative rate) on test data: 0.90\n"},"3":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>8</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>95</td>\n      <td>851</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user              8             46\ntrue:not user         95            851"},"exec_count":15,"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"9869d5","input":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform, randint\n\nparams = {\n    \"learning_rate\": [0.001, 0.01, 0.1, 0.5, 1.],\n    \"max_depth\": randint(1, 10),\n    \"n_estimators\": randint(10, 100),\n    \"subsample\": uniform(0.05, 0.95),  # so uniform on [.05,.05+.95] = [.05,1.]\n    \"min_child_weight\": randint(1, 20),\n    \"reg_alpha\": uniform(0, 5),\n    \"reg_lambda\": uniform(0, 5)\n}\n\nrandom_search = RandomizedSearchCV(\n    xgb_model,\n    param_distributions=params,\n    random_state=8675309,\n    n_iter=25,\n    cv=5,\n    verbose=1,\n    n_jobs=2,\n    return_train_score=True)\n\n#fit the model\nrandom_search.fit(X_train, y_train, sample_weight=sample_weights)\n\n#calculate score\nscore, auc, sens, prec, spec = my_classifier_results(random_search)\nc_df = updateResults(c_df, 'XGB - Random Search', 125, score, auc, sens, prec, spec)\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Fitting 5 folds for each of 25 candidates, totalling 125 fits\n"},"1":{"name":"stderr","output_type":"stream","text":"[Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.\n[Parallel(n_jobs=2)]: Done  46 tasks      | elapsed:   19.2s\n[Parallel(n_jobs=2)]: Done 125 out of 125 | elapsed:   44.8s finished\n"},"2":{"name":"stdout","output_type":"stream","text":"Model accuracy score from test data: 0.8740\nModel AUC from test data: 0.5667\nSensitivity (true positive rate) on test data: 0.22\nPrecision (positive predictive value) on test data: 0.12\nSpecificity (true negative rate) on test data: 0.91\n"},"3":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>12</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>84</td>\n      <td>862</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             12             42\ntrue:not user         84            862"},"exec_count":16,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"877531","input":"np.random.seed(8675309)  # seed courtesy of Tommy Tutone\nfrom GPyOpt.methods import BayesianOptimization\nfrom sklearn.model_selection import cross_val_score, KFold\n\nhp_bounds = [{\n    'name': 'learning_rate',\n    'type': 'continuous',\n    'domain': (0.001, 1.0)\n}, {\n    'name': 'max_depth',\n    'type': 'discrete',\n    'domain': (1, 10)\n}, {\n    'name': 'n_estimators',\n    'type': 'discrete',\n    'domain': (10, 100)\n}, {\n    'name': 'subsample',\n    'type': 'continuous',\n    'domain': (0.05, 1.0)\n}, {\n    'name': 'min_child_weight',\n    'type': 'discrete',\n    'domain': (1, 20)\n}, {\n    'name': 'reg_alpha',\n    'type': 'continuous',\n    'domain': (0, 5)\n}, {\n    'name': 'reg_lambda',\n    'type': 'continuous',\n    'domain': (0, 5)\n}]\n\n\n# Optimization objective\ndef cv_score(hyp_parameters):\n    hyp_parameters = hyp_parameters[0]\n    xgb_model = xgb.XGBClassifier(objective=\"binary:logistic\",\n                                 learning_rate=hyp_parameters[0],\n                                 max_depth=int(hyp_parameters[1]),\n                                 n_estimators=int(hyp_parameters[2]),\n                                 subsample=hyp_parameters[3],\n                                 min_child_weight=int(hyp_parameters[4]),\n                                 reg_alpha=hyp_parameters[5],\n                                 reg_lambda=hyp_parameters[6])\n    scores = cross_val_score(xgb_model,\n                             X=X_train,\n                             y=y_train,\n                             cv=KFold(n_splits=5))\n    return np.array(scores.mean())  # return average of 5-fold scores\n\n\noptimizer = BayesianOptimization(f=cv_score,\n                                 domain=hp_bounds,\n                                 model_type='GP',\n                                 acquisition_type='EI',\n                                 acquisition_jitter=0.05,\n                                 exact_feval=True,\n                                 maximize=True,\n                                 verbosity=True)\n\noptimizer.run_optimization(max_iter=20,verbosity=True)\n\nbest_hyp_set = {}\nfor i in range(len(hp_bounds)):\n    if hp_bounds[i]['type'] == 'continuous':\n        best_hyp_set[hp_bounds[i]['name']] = optimizer.x_opt[i]\n    else:\n        best_hyp_set[hp_bounds[i]['name']] = int(optimizer.x_opt[i])\n        \nbayopt_search = xgb.XGBClassifier(objective=\"binary:logistic\",**best_hyp_set)        \n\n#fit the model\nbayopt_search.fit(X_train, y_train, sample_weight=sample_weights)\n\n#calculate score\nscore, auc, sens, prec, spec = my_classifier_results(bayopt_search)\nc_df = updateResults(c_df, 'XGB - Bayesian', 125, score, auc, sens, prec, spec)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"num acquisition: 1, time elapsed: 0.50s\nnum acquisition: 2, time elapsed: 1.19s\nnum acquisition: 3, time elapsed: 4.45s\nnum acquisition: 4, time elapsed: 7.85s\nnum acquisition: 5, time elapsed: 15.69s\nnum acquisition: 6, time elapsed: 16.27s\nnum acquisition: 7, time elapsed: 16.94s\nnum acquisition: 8, time elapsed: 17.59s\nnum acquisition: 9, time elapsed: 18.30s\nModel accuracy score from test data: 0.6560\nModel AUC from test data: 0.6610\nSensitivity (true positive rate) on test data: 0.67\nPrecision (positive predictive value) on test data: 0.10\nSpecificity (true negative rate) on test data: 0.66\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>36</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>326</td>\n      <td>620</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             36             18\ntrue:not user        326            620"},"exec_count":17,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"4dc23c","input":"from tpot import TPOTClassifier\n\ntpot_config = {\n    'xgboost.XGBClassifier': {\n        'n_estimators': [100],\n        'max_depth': range(1, 11),\n        'learning_rate': [1e-3, 1e-2, 1e-1, 0.5, 1.],\n        'subsample': np.arange(0.05, 1.01, 0.05),\n        'min_child_weight': range(1, 21),\n        'reg_alpha': range(1, 6),\n        'reg_lambda': range(1, 6),\n        'nthread': [2],\n        'objective': ['binary:logistic'],\n        'scale_pos_weight': [17] #trying to force tpot and xgboost to handle the imbalanced classes....\n    }\n}\n\ntpot = TPOTClassifier(generations=10,\n                     population_size=40,\n                     verbosity=2,\n                     config_dict=tpot_config,\n                     cv=3,\n                     scoring='balanced_accuracy',\n                     random_state=8675309)\n\n\n#fit the model\ntpot.fit(X_train, y_train, sample_weight=sample_weights)\n\n\n\n#calculate score\nscore, auc, sens, prec, spec = my_classifier_results(tpot)\nc_df = updateResults(c_df, 'XGB - TPOT', 400, score, auc, sens, prec, spec)\ntpot.export('tpot_XGBclassifier-opioid.py')","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"","version_major":2,"version_minor":0},"text/plain":"HBox(children=(IntProgress(value=0, description='Optimization Progress', max=440, style=ProgressStyle(descript…"},"exec_count":18,"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"Generation 1 - Current best internal CV score: 0.6722895925843752\nGeneration 2 - Current best internal CV score: 0.6729643337671076\nGeneration 3 - Current best internal CV score: 0.6729643337671076\nGeneration 4 - Current best internal CV score: 0.6729643337671076\nGeneration 5 - Current best internal CV score: 0.6739639442156862\nGeneration 6 - Current best internal CV score: 0.6769774396561972\nGeneration 7 - Current best internal CV score: 0.6771318365736375\nGeneration 8 - Current best internal CV score: 0.6771318365736375\nGeneration 9 - Current best internal CV score: 0.6791073854986531\nGeneration 10 - Current best internal CV score: 0.6791073854986531\n\nBest pipeline: XGBClassifier(XGBClassifier(input_matrix, learning_rate=0.001, max_depth=9, min_child_weight=8, n_estimators=100, nthread=2, objective=binary:logistic, reg_alpha=3, reg_lambda=3, scale_pos_weight=17, subsample=0.6000000000000001), learning_rate=0.001, max_depth=7, min_child_weight=12, n_estimators=100, nthread=2, objective=binary:logistic, reg_alpha=4, reg_lambda=4, scale_pos_weight=17, subsample=0.7000000000000001)\nModel accuracy score from test data: 0.7820\nModel AUC from test data: 0.5530\nSensitivity (true positive rate) on test data: 0.30\nPrecision (positive predictive value) on test data: 0.08\nSpecificity (true negative rate) on test data: 0.81\n"},"2":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>16</td>\n      <td>38</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>180</td>\n      <td>766</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             16             38\ntrue:not user        180            766"},"exec_count":18,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"ffb1ab","input":"from tpot import TPOTClassifier\n\nclassifier_config_dict = {\n\n\n\n    'sklearn.tree.DecisionTreeClassifier': {\n        'criterion': [\"gini\", \"entropy\"],\n        'max_depth': range(1, 11),\n        'min_samples_split': range(2, 21),\n        'min_samples_leaf': range(1, 21),\n        'class_weight': ['balanced']\n    },\n\n    'sklearn.ensemble.ExtraTreesClassifier': {\n        'n_estimators': [100],\n        'criterion': [\"gini\", \"entropy\"],\n        'max_features': np.arange(0.05, 1.01, 0.05),\n        'min_samples_split': range(2, 21),\n        'min_samples_leaf': range(1, 21),\n        'bootstrap': [True, False],\n        'class_weight': ['balanced']\n    },\n\n    'sklearn.ensemble.RandomForestClassifier': {\n        'n_estimators': [100],\n        'criterion': [\"gini\", \"entropy\"],\n        'max_features': np.arange(0.05, 1.01, 0.05),\n        'min_samples_split': range(2, 21),\n        'min_samples_leaf':  range(1, 21),\n        'bootstrap': [True, False],\n        'class_weight': ['balanced']\n    },\n\n    #'sklearn.ensemble.GradientBoostingClassifier' - has no paramter for imbalanced data\n\n    #'sklearn.neighbors.KNeighborsClassifier' - has no parameter for imbalanced data\n\n    'sklearn.svm.LinearSVC': {\n        'penalty': [\"l1\", \"l2\"],\n        'loss': [\"hinge\", \"squared_hinge\"],\n        'dual': [True, False],\n        'tol': [1e-5, 1e-4, 1e-3, 1e-2, 1e-1],\n        'C': [1e-4, 1e-3, 1e-2, 1e-1, 0.5, 1., 5., 10., 15., 20., 25.],\n        'class_weight': ['balanced']\n    },\n\n    'sklearn.linear_model.LogisticRegression': {\n        'penalty': [\"l1\", \"l2\"],\n        'C': [1e-4, 1e-3, 1e-2, 1e-1, 0.5, 1., 5., 10., 15., 20., 25.],\n        'dual': [True, False],\n        'class_weight': ['balanced']\n    },\n\n    'xgboost.XGBClassifier': {\n        'n_estimators': [100],\n        'max_depth': range(1, 11),\n        'learning_rate': [1e-3, 1e-2, 1e-1, 0.5, 1.],\n        'subsample': np.arange(0.05, 1.01, 0.05),\n        'min_child_weight': range(1, 21),\n        'nthread': [1],\n        'scale_pos_weight': [17]\n    }\n}\n\n\n\ntpot_auto = TPOTClassifier(generations=10,\n                     population_size=40,\n                     verbosity=2,\n                     cv=3,\n                    config_dict=classifier_config_dict,\n                     scoring='balanced_accuracy',\n                     random_state=8675309)\n\n#fit the model\ntpot_auto.fit(X_train, y_train, sample_weight=sample_weights)\n\n#calculate score\nscore, auc, sens, prec,spec = my_classifier_results(tpot_auto)\nc_df = updateResults(c_df, 'TPOT-General', 1600, score, auc, sens, prec, spec)\ntpot.export('tpot_optimal_pipeline-opioid.py')","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"","version_major":2,"version_minor":0},"text/plain":"HBox(children=(IntProgress(value=0, description='Optimization Progress', max=440, style=ProgressStyle(descript…"},"exec_count":19,"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"Generation 1 - Current best internal CV score: 0.6716822468374519\nGeneration 2 - Current best internal CV score: 0.6716822468374519\nGeneration 3 - Current best internal CV score: 0.6740268775392209\nGeneration 4 - Current best internal CV score: 0.6740268775392209\nGeneration 5 - Current best internal CV score: 0.6792025126199815\nGeneration 6 - Current best internal CV score: 0.6792025126199815\nGeneration 7 - Current best internal CV score: 0.67945712073083\nGeneration 8 - Current best internal CV score: 0.6815589591157618\nGeneration 9 - Current best internal CV score: 0.6815589591157618\nGeneration 10 - Current best internal CV score: 0.6855140125014586\n\nBest pipeline: RandomForestClassifier(LinearSVC(CombineDFs(input_matrix, CombineDFs(LinearSVC(input_matrix, C=5.0, class_weight=balanced, dual=True, loss=hinge, penalty=l2, tol=0.01), input_matrix)), C=0.01, class_weight=balanced, dual=False, loss=squared_hinge, penalty=l2, tol=0.0001), bootstrap=True, class_weight=balanced, criterion=entropy, max_features=0.3, min_samples_leaf=13, min_samples_split=15, n_estimators=100)\nModel accuracy score from test data: 0.8460\nModel AUC from test data: 0.5345\nSensitivity (true positive rate) on test data: 0.19\nPrecision (positive predictive value) on test data: 0.08\nSpecificity (true negative rate) on test data: 0.88\n"},"2":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>10</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>110</td>\n      <td>836</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             10             44\ntrue:not user        110            836"},"exec_count":19,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"2ac63a","input":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\n# we do need to go higher than the default iterations for the solver to get convergence\n# and the explicity declaration of the solver avoids a warning message, otherwise\n# the parameters are defaults.\n\n#without balancing\nlogreg_model_imbalanced = LogisticRegression(solver='lbfgs',max_iter=1000)\n#fit\nlogreg_model_imbalanced.fit(X_train, y_train)\n# Use score method to get accuracy of model\nscore_imbalanced = logreg_model_imbalanced.score(X_test, y_test) # this is accuracy\nprint('Score (Accuracy) - Imbalanced:', score_imbalanced)\n\n#with balancing\nlogreg_model = LogisticRegression(solver='lbfgs',max_iter=1000, class_weight='balanced')\n#fit\nlogreg_model.fit(X_train, y_train)\n# Use score method to get accuracy of  the balanced model\nscore = logreg_model.score(X_test, y_test) # this is accuracy\n\nprint('Score (Accuracy) - Balanced:', score)","output":{"0":{"name":"stdout","output_type":"stream","text":"Score (Accuracy) - Imbalanced: 0.946\nScore (Accuracy) - Balanced: 0.701\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"909f95","input":"#get auc\ny_pred = logreg_model_imbalanced.predict(X_test)\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred, pos_label=1)\nauc = metrics.auc(fpr, tpr)\nprint('Area Under the Curve (imbalanced):', auc)\n\n#get auc\ny_pred = logreg_model.predict(X_test)\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred, pos_label=1)\nauc = metrics.auc(fpr, tpr)\nprint('Area Under the Curve (balanced):', auc)","output":{"0":{"name":"stdout","output_type":"stream","text":"Area Under the Curve (imbalanced): 0.5\nArea Under the Curve (balanced): 0.6760825307336935\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"2035c5","input":"# obtaining the confusion matrix and making it look nice\nfrom sklearn.metrics import confusion_matrix\nimport pandas as pd\n\n#get predictions from the imbalanced model\ny_pred = logreg_model_imbalanced.predict(X_test)\n\n# must put true before predictions in confusion matrix function\ncmtx = pd.DataFrame(\n    confusion_matrix(y_test, y_pred, labels=[1,0]), \n    index=['true:user', 'true:not user'], \n    columns=['pred:user','pred:not user']\n)\nprint('Imbalanced Confusion Matrix:')\ndisplay(cmtx)\n\n#we can also get the classification report directly from sklearn.\nfrom sklearn.metrics import classification_report\ncr = classification_report(y_test, y_pred, output_dict=True)\nprint('Imbalanced Statistics:')\ndisplay(cr)\n\n\n#get predictions from the balanced model\ny_pred = logreg_model.predict(X_test)\n\n# must put true before predictions in confusion matrix function\ncmtx = pd.DataFrame(\n    confusion_matrix(y_test, y_pred, labels=[1,0]), \n    index=['true:user', 'true:not user'], \n    columns=['pred:user','pred:not user']\n)\nprint('Balanced Confusion Matrix:')\ndisplay(cmtx)\n\n#we can also get the classification report directly from sklearn.\nfrom sklearn.metrics import classification_report\ncr = classification_report(y_test, y_pred, output_dict=True)\nprint('Balanced Statistics:')\ndisplay(cr)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Imbalanced Confusion Matrix:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>0</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>0</td>\n      <td>946</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user              0             54\ntrue:not user          0            946"},"exec_count":22,"output_type":"execute_result"},"2":{"name":"stdout","output_type":"stream","text":"Imbalanced Statistics:\n"},"3":{"data":{"text/plain":"{'0': {'precision': 0.946,\n  'recall': 1.0,\n  'f1-score': 0.9722507708119219,\n  'support': 946},\n '1': {'precision': 0.0, 'recall': 0.0, 'f1-score': 0.0, 'support': 54},\n 'accuracy': 0.946,\n 'macro avg': {'precision': 0.473,\n  'recall': 0.5,\n  'f1-score': 0.48612538540596095,\n  'support': 1000},\n 'weighted avg': {'precision': 0.8949159999999999,\n  'recall': 0.946,\n  'f1-score': 0.9197492291880782,\n  'support': 1000}}"},"exec_count":22,"output_type":"execute_result"},"4":{"name":"stdout","output_type":"stream","text":"Balanced Confusion Matrix:\n"},"5":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pred:user</th>\n      <th>pred:not user</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true:user</td>\n      <td>35</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <td>true:not user</td>\n      <td>280</td>\n      <td>666</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               pred:user  pred:not user\ntrue:user             35             19\ntrue:not user        280            666"},"exec_count":22,"output_type":"execute_result"},"6":{"name":"stdout","output_type":"stream","text":"Balanced Statistics:\n"},"7":{"data":{"text/plain":"{'0': {'precision': 0.9722627737226277,\n  'recall': 0.7040169133192389,\n  'f1-score': 0.8166768853464133,\n  'support': 946},\n '1': {'precision': 0.1111111111111111,\n  'recall': 0.6481481481481481,\n  'f1-score': 0.18970189701897017,\n  'support': 54},\n 'accuracy': 0.701,\n 'macro avg': {'precision': 0.5416869424168694,\n  'recall': 0.6760825307336935,\n  'f1-score': 0.5031893911826917,\n  'support': 1000},\n 'weighted avg': {'precision': 0.9257605839416058,\n  'recall': 0.701,\n  'f1-score': 0.7828202359767313,\n  'support': 1000}}"},"exec_count":22,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"4d69a9","input":"c_df.sort_values(by=['Accuracy'], ascending=False)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model Fits</th>\n      <th>Accuracy</th>\n      <th>AUC</th>\n      <th>Sensitivity</th>\n      <th>Precision</th>\n      <th>Specificity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>RFC - Baseline</td>\n      <td>1</td>\n      <td>0.943</td>\n      <td>0.498414</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.996829</td>\n    </tr>\n    <tr>\n      <td>XGB - Random Search</td>\n      <td>125</td>\n      <td>0.874</td>\n      <td>0.566714</td>\n      <td>0.222222</td>\n      <td>0.125</td>\n      <td>0.911205</td>\n    </tr>\n    <tr>\n      <td>XGB - Grid Search</td>\n      <td>960</td>\n      <td>0.859</td>\n      <td>0.523863</td>\n      <td>0.148148</td>\n      <td>0.0776699</td>\n      <td>0.899577</td>\n    </tr>\n    <tr>\n      <td>TPOT-General</td>\n      <td>1600</td>\n      <td>0.846</td>\n      <td>0.534453</td>\n      <td>0.185185</td>\n      <td>0.0833333</td>\n      <td>0.883721</td>\n    </tr>\n    <tr>\n      <td>XGB - TPOT</td>\n      <td>400</td>\n      <td>0.782</td>\n      <td>0.553011</td>\n      <td>0.296296</td>\n      <td>0.0816327</td>\n      <td>0.809725</td>\n    </tr>\n    <tr>\n      <td>XGB - Baseline</td>\n      <td>1</td>\n      <td>0.735</td>\n      <td>0.65913</td>\n      <td>0.574074</td>\n      <td>0.113553</td>\n      <td>0.744186</td>\n    </tr>\n    <tr>\n      <td>LogReg - Baseline</td>\n      <td>1</td>\n      <td>0.701</td>\n      <td>0.676083</td>\n      <td>0.648148</td>\n      <td>0.111111</td>\n      <td>0.704017</td>\n    </tr>\n    <tr>\n      <td>Ridge - Baseline</td>\n      <td>1</td>\n      <td>0.695</td>\n      <td>0.664181</td>\n      <td>0.62963</td>\n      <td>0.106583</td>\n      <td>0.698732</td>\n    </tr>\n    <tr>\n      <td>XGB - Bayesian</td>\n      <td>125</td>\n      <td>0.656</td>\n      <td>0.661029</td>\n      <td>0.666667</td>\n      <td>0.0994475</td>\n      <td>0.655391</td>\n    </tr>\n    <tr>\n      <td>GNB - Baseline</td>\n      <td>1</td>\n      <td>0.079</td>\n      <td>0.504483</td>\n      <td>0.981481</td>\n      <td>0.0544707</td>\n      <td>0.0274841</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                    Model Fits Accuracy       AUC Sensitivity  Precision  \\\nRFC - Baseline               1    0.943  0.498414           0          0   \nXGB - Random Search        125    0.874  0.566714    0.222222      0.125   \nXGB - Grid Search          960    0.859  0.523863    0.148148  0.0776699   \nTPOT-General              1600    0.846  0.534453    0.185185  0.0833333   \nXGB - TPOT                 400    0.782  0.553011    0.296296  0.0816327   \nXGB - Baseline               1    0.735   0.65913    0.574074   0.113553   \nLogReg - Baseline            1    0.701  0.676083    0.648148   0.111111   \nRidge - Baseline             1    0.695  0.664181     0.62963   0.106583   \nXGB - Bayesian             125    0.656  0.661029    0.666667  0.0994475   \nGNB - Baseline               1    0.079  0.504483    0.981481  0.0544707   \n\n                    Specificity  \nRFC - Baseline         0.996829  \nXGB - Random Search    0.911205  \nXGB - Grid Search      0.899577  \nTPOT-General           0.883721  \nXGB - TPOT             0.809725  \nXGB - Baseline         0.744186  \nLogReg - Baseline      0.704017  \nRidge - Baseline       0.698732  \nXGB - Bayesian         0.655391  \nGNB - Baseline        0.0274841  "},"exec_count":23,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"0b426f","input":"c_df.sort_values(by=['AUC'], ascending=False)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model Fits</th>\n      <th>Accuracy</th>\n      <th>AUC</th>\n      <th>Sensitivity</th>\n      <th>Precision</th>\n      <th>Specificity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>LogReg - Baseline</td>\n      <td>1</td>\n      <td>0.701</td>\n      <td>0.676083</td>\n      <td>0.648148</td>\n      <td>0.111111</td>\n      <td>0.704017</td>\n    </tr>\n    <tr>\n      <td>Ridge - Baseline</td>\n      <td>1</td>\n      <td>0.695</td>\n      <td>0.664181</td>\n      <td>0.62963</td>\n      <td>0.106583</td>\n      <td>0.698732</td>\n    </tr>\n    <tr>\n      <td>XGB - Bayesian</td>\n      <td>125</td>\n      <td>0.656</td>\n      <td>0.661029</td>\n      <td>0.666667</td>\n      <td>0.0994475</td>\n      <td>0.655391</td>\n    </tr>\n    <tr>\n      <td>XGB - Baseline</td>\n      <td>1</td>\n      <td>0.735</td>\n      <td>0.65913</td>\n      <td>0.574074</td>\n      <td>0.113553</td>\n      <td>0.744186</td>\n    </tr>\n    <tr>\n      <td>XGB - Random Search</td>\n      <td>125</td>\n      <td>0.874</td>\n      <td>0.566714</td>\n      <td>0.222222</td>\n      <td>0.125</td>\n      <td>0.911205</td>\n    </tr>\n    <tr>\n      <td>XGB - TPOT</td>\n      <td>400</td>\n      <td>0.782</td>\n      <td>0.553011</td>\n      <td>0.296296</td>\n      <td>0.0816327</td>\n      <td>0.809725</td>\n    </tr>\n    <tr>\n      <td>TPOT-General</td>\n      <td>1600</td>\n      <td>0.846</td>\n      <td>0.534453</td>\n      <td>0.185185</td>\n      <td>0.0833333</td>\n      <td>0.883721</td>\n    </tr>\n    <tr>\n      <td>XGB - Grid Search</td>\n      <td>960</td>\n      <td>0.859</td>\n      <td>0.523863</td>\n      <td>0.148148</td>\n      <td>0.0776699</td>\n      <td>0.899577</td>\n    </tr>\n    <tr>\n      <td>GNB - Baseline</td>\n      <td>1</td>\n      <td>0.079</td>\n      <td>0.504483</td>\n      <td>0.981481</td>\n      <td>0.0544707</td>\n      <td>0.0274841</td>\n    </tr>\n    <tr>\n      <td>RFC - Baseline</td>\n      <td>1</td>\n      <td>0.943</td>\n      <td>0.498414</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.996829</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                    Model Fits Accuracy       AUC Sensitivity  Precision  \\\nLogReg - Baseline            1    0.701  0.676083    0.648148   0.111111   \nRidge - Baseline             1    0.695  0.664181     0.62963   0.106583   \nXGB - Bayesian             125    0.656  0.661029    0.666667  0.0994475   \nXGB - Baseline               1    0.735   0.65913    0.574074   0.113553   \nXGB - Random Search        125    0.874  0.566714    0.222222      0.125   \nXGB - TPOT                 400    0.782  0.553011    0.296296  0.0816327   \nTPOT-General              1600    0.846  0.534453    0.185185  0.0833333   \nXGB - Grid Search          960    0.859  0.523863    0.148148  0.0776699   \nGNB - Baseline               1    0.079  0.504483    0.981481  0.0544707   \nRFC - Baseline               1    0.943  0.498414           0          0   \n\n                    Specificity  \nLogReg - Baseline      0.704017  \nRidge - Baseline       0.698732  \nXGB - Bayesian         0.655391  \nXGB - Baseline         0.744186  \nXGB - Random Search    0.911205  \nXGB - TPOT             0.809725  \nTPOT-General           0.883721  \nXGB - Grid Search      0.899577  \nGNB - Baseline        0.0274841  \nRFC - Baseline         0.996829  "},"exec_count":24,"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"38e154","input":"# imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\n\n#read in the data\nX = pd.read_csv('./data/opioid_data.csv')\n#grab the y column (1 = opioid user, 0 = not a user)\ny = np.array(X['isUser'])\n#drop the y column \nX = X.drop(columns = ['isUser'])\n\n#one hot encode the categories\nonehot_encoder = OneHotEncoder(sparse=False, categories='auto')\nX = onehot_encoder.fit_transform(X)\n\n# split into test and training data\nfrom sklearn.model_selection import train_test_split\n#for testing, split twice to get a much smaller dataset - just 5000\n#comment out this line to run with the entire data set\nx_train_toss, X, y_train_toss, y = train_test_split(X, y, test_size = 5000, random_state = 0)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#Just to confirm how many records we're dealing with....\nprint('Final Training Size', len(X_train))\nprint('Final Testing Size', len(X_test))","output":{"0":{"name":"stdout","output_type":"stream","text":"Final Training Size 4000\nFinal Testing Size 1000\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"996fae","input":"#set up a dataframe for storing results for the classification models\nimport pandas as pd\n\nblanks = [None for i in range(0, 10)]\nc_df = pd.DataFrame({'Model Fits': blanks, \n                     'Accuracy': blanks, \n                     'AUC': blanks,\n                      'Sensitivity': blanks, \n                      'Precision': blanks,\n                       'Specificity': blanks}, \n                     index=[\n                            'LogReg - Baseline',\n                            'RFC - Baseline',\n                            'GNB - Baseline',\n                            'Ridge - Baseline',\n                            'XGB - Baseline',\n                            'XGB - Grid Search', 'XGB - Random Search', 'XGB - Bayesian','XGB - TPOT',\n                            'TPOT-General'])\n\n\n#create a function for updating the grid\ndef updateResults(df, approach, fits, score, auc, sens, prec, spec):\n    df.loc[approach, 'Model Fits'] = fits\n    df.loc[approach, 'Accuracy'] = score\n    df.loc[approach, 'AUC'] = auc\n    df.loc[approach, 'Sensitivity'] = sens\n    df.loc[approach, 'Precision'] = prec\n    df.loc[approach, 'Specificity'] = spec\n    return(df)\n\nc_df    ","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model Fits</th>\n      <th>Accuracy</th>\n      <th>AUC</th>\n      <th>Sensitivity</th>\n      <th>Precision</th>\n      <th>Specificity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>LogReg - Baseline</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>RFC - Baseline</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>GNB - Baseline</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>Ridge - Baseline</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>XGB - Baseline</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>XGB - Grid Search</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>XGB - Random Search</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>XGB - Bayesian</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>XGB - TPOT</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>TPOT-General</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                    Model Fits Accuracy   AUC Sensitivity Precision  \\\nLogReg - Baseline         None     None  None        None      None   \nRFC - Baseline            None     None  None        None      None   \nGNB - Baseline            None     None  None        None      None   \nRidge - Baseline          None     None  None        None      None   \nXGB - Baseline            None     None  None        None      None   \nXGB - Grid Search         None     None  None        None      None   \nXGB - Random Search       None     None  None        None      None   \nXGB - Bayesian            None     None  None        None      None   \nXGB - TPOT                None     None  None        None      None   \nTPOT-General              None     None  None        None      None   \n\n                    Specificity  \nLogReg - Baseline          None  \nRFC - Baseline             None  \nGNB - Baseline             None  \nRidge - Baseline           None  \nXGB - Baseline             None  \nXGB - Grid Search          None  \nXGB - Random Search        None  \nXGB - Bayesian             None  \nXGB - TPOT                 None  \nTPOT-General               None  "},"exec_count":8,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"ec9d4f","input":"#wrapping it all up in a function\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report\n\n\ndef my_classifier_results(model): \n    #get predictions\n    y_pred = model.predict(X_test)\n    #get the classification report\n    cr = classification_report(y_test, y_pred, output_dict=True)\n    accuracy = cr['accuracy'] #total number of correct predictions (positive or negative)\n    sensitivity = cr['1']['recall'] #true positive rate - accurately predicting a user when they are - 1 is best\n    precision = cr['1']['precision'] #positive predictive value - 1 is best\n    specificity = cr['0']['recall'] #true negative rate - accurately predicting not a user when they aren't\n    #get the area under curve\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred, pos_label=1)\n    auc = metrics.auc(fpr, tpr)\n    print('Model accuracy score from test data: {:0.4f}'.format(accuracy))\n    print('Model AUC from test data: {:0.4f}'.format(auc))\n    print('Sensitivity (true positive rate) on test data: {:0.2f}'.format(sensitivity))\n    print('Precision (positive predictive value) on test data: {:0.2f}'.format(precision))\n    print('Specificity (true negative rate) on test data: {:0.2f}'.format(specificity))\n    cmtx = pd.DataFrame(\n    confusion_matrix(y_test, y_pred, labels=[1,0]), \n    index=['true:user', 'true:not user'], \n    columns=['pred:user','pred:not user']\n    )\n    display(cmtx)\n    \n    return(accuracy, auc, sensitivity, precision, specificity)","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"0788dd","input":"### Accuracy vs. Area Under the Curve\nAccuracy is how many of the predicted values matched the actual values. Area Under the Curve is a different measure for scoring classifiers. An AUC of .5 would indicate random guessing, or the inability of your classifier to separate the two groups, whereas an AUC of 1 would indicate a perfect classifier. \n\nWe'll also track AUC for our classifiers.","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"1e6ae7","input":"### Confusion Matrix and Statistics\nA confusion matrix is a quick way to look at how well your classifier did, and from it we can derive some more statistics. Specifically, we'll be looking at sensitivity (true positive rate), specificity (true negative rate), and precision (positive predictive value).\n\nSklearn provides a quick and easy way to get the statistics via the classification_report function.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"1f7910","input":"For every 1 opioid user in our dataset, we have approximately 17 non opioid users. Given that our sample is so imbalanced, we'll need to use some mechanism to try to even the scales. Luckily, sklearn has ways of handling that. For instance, in LogisticRegression, we can pass the class_weight parameter to obtain a \"balanced\" problem. ","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"2ea94c","input":"Whenever you're doing machine learning with a classification model, you need to be aware of imbalanced data. Imbalanced data is data where the majority of the response (y) values in your data fall into one class. In the data you were given for the project, we'd artificially balanced the data - giving you roughly equal good and bad loans. In real life, there would be far more good loans than bad loans, far more real credit card transactions than fraudulent ones, far more negative cancer tests than positive ones, etc. Classification problems are often looking for that proverbial \"needle in the haystack.\" \n\nThe problem is that if we're using accuracy as our metric with imbalanced data, the classifier can always guess the majority class, and we'll have pretty decent accuracy. For example, the data that we're using in this example is survey data from the 2016 National Survey on Drug Use and Health. The purpose of the classifier is to predict opioid users, which account for just 6% of the survey respondents. If the classifier predicted \"not an opioid user\" for every respondent, it would be correct 94% of the time. That's a pretty good accuracy score! Of course, it doesn't tell us anything about what we actually want to know.\n\nLet's see what can be done about this imbalanced data with parameter optimization.\n\n\n","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"378045","input":"### AutoML with TPOT Classifier\n\nWith imbalanced classes, even using the balanced_accuracy scoring method, TPOT chooses algorithms that perform horribly if you give it just the default config. A custom config using just methods that can handle imbalanced classes, and setting the parameter that they use for imbalanced classes, is necessary to get a reasonable result.\n\nHow did we figure this out? Well, like many packages in Python, the code that makes up the package is available on <a href=\"https://github.com/EpistasisLab/tpot\">github</a>. We're using the default classifier configuration. We can see all the models that the default classifier will attempt to run in the <a href=\"https://github.com/EpistasisLab/tpot/blob/master/tpot/config/classifier.py\">classifier config file</a>. Not all the models have mechanisms for dealing with imbalanced data. So, the config dictionary below includes just the models that have a mechanism for balancing classes. For each of them, we've added the parameter required to balance the data.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"391e9b","input":"## An example classifier\nLet's do a simple logistic regression. We'll compare our accuracy score for a model that does not account for our imbalanced data with one that does account for it.\n\nNote that all we need to do to make it balanced is to use the class_weight parameter with the value of balanced. We found the needed parameter by consulting the <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\">documentation for sklearn LogisticRegression</a>.\n\nThe documentation states that \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data. In other words, it more strongly weights the minority class, so that the classifier does a better job of finding those needles.\n\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"4cb29b","input":"Even though our accuracy was really high for the model that didn't take the imbalanced nature of the data into account, when we look at area under the curve, we can see that the model actually did no better than random guessing. ","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"537e8f","input":"### Gaussian Naive Bayes Classifier - Baseline\nThe <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html\">Gaussian Naive Bayes classifier</a> doesn't have a simple balanced parameter for sample_weights. Instead, we have to create a vector with a weight for each of our rows of data. We know that for every 1 positive respondent, we have 17 negative respondents. So we need to weight the positives with a 17 and the negatives with a one. We'll use a list comprehension to generate our vector of weights.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"57d242","input":"Sorting the dataframe this way, our formerly \"best\" model based on accuracy is now the bottom of the pile (not surprisingly). \n\nWith the small dataset, the logistic regression baseline comes out on top. With the full dataset, the TPOT auto-tuning algorithm comes out on top.\n\nNone of these models have a great AUC. This model is probably not particularly useful. What it probably needs is a different selection of predictors. But we'll leave that for another day.","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"75f30f","input":"### Logistic Regession Baseline\nThis is the same bit of code we already saw as an example above, but now we're using our function to do the work for us, and updating our tracking dataframe.","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"779191","input":"### Tracking our Results\n\nWe're going to run 10 different models and track our statistics for each model. We'll set up a dataframe and a function to update the dataframe after each test.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"8a80b5","input":"### XGBoost - Baseline\nFinally, <a href=\"https://xgboost.readthedocs.io/en/latest/python/python_api.html\">XGBoost</a> works like the Guassian Naive Bayes classifier - it requires a vector of weights. We've already created it, so here we'll just use it again.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"8d0cea","input":"### XGBoost with TPOT Classifier\n\nWith a single model type, TPOT looks a whole lot like our regular xgboost setup with random search. The syntax is slightly different, but the concepts are the same. We've added one extra parameter here to account for our imbalanced classes - the 'scale_pos_weight' parameter. Again, we're telling the classifier that we have about 17 negative cases for each positive case.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"929ffa","input":"Since we'll be running the same code for each model, let's wrap it in a function","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"964d1a","input":"## Loading the data","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"980f6f","input":"## Conclusion\n\nWhen working with imbalanced data, you definitely do not want to use accuracy as your primary measure. When sorting by accuracy, we can see that RFC - Baseline is the \"best\" choice. But the sensitivity and precision are both terrible.\n","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"9845fc","input":"### XGBoost with Bayesian Optimization\n\nBayesian optimization requires a different set up for our parameters. Note that the parameters themselves are the same. But, we have to make an hp_bounds object. Float numbers are of type \"continuous\" while integers are of type \"discrete.\" For each parameter, we give a domain - which is the high and low from which values will be chosen.","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"ae7508","input":"### XGBoost with Grid Search\n\nWe've finally gotten all of our baseline classifiers done. Let's optimize some parameters!\n\nWe'll start by optimizing XGBoost with Grid Search.\n\nThese searches tend to take quite a while. This is a large data set. I'm using <a href=\"https://scikit-learn.org/stable/glossary.html#term-n-jobs\">n_jobs</a> in my grid search. This allows the computer to spin up parallel processes. This will only work if your computer has multiple cores. But if it does, it can certainly make this run faster. If your computer does not have multiple cores available, just make n_jobs = 1.\n\nWhile you're running the code below, let's take a minute to discuss the parameters. We're using the default booster for XGBoost, which is the Tree Booster. Grid search will search every combination of parameters we give it, so the more parameters we include, the more models will be fit (and the longer it will take to run the code). You can review all the possible parameters and what they mean in the <a href=\"https://xgboost.readthedocs.io/en/latest/parameter.html?highlight=learning_rate#parameters-for-tree-booster\">documentation</a>. That's where you also find the possible range of each parameter.\n\nYour job is to pick enough numbers within each range to give you a good search space, without picking so many as to make the code impossibly long to run. I've found that 2 or 3 of each parameter is enough to find a decently fitting model. After you have run this and found your best model, if any of the parameters are at the minimum or maximum of what you searched, you might want to try a lower or higher number in the range and search again.\n\n","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"bc54e3","input":"### XGBoost with Random Search\nOnce again, I'm using n_jobs with random search. We're doing 5-fold cross validation. We have the same parameters here, but since we're randomly combining different parameters, we can use more options. For some of our parameters, instead of picking a few numbers in a list, we're telling the the algorithm to randomly choose from a list of integers or from a uniform distribution.","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"c48bb5","input":"While RFC - baseline did have a parameter that should have accounted for the imbalanced data, it did not handle the imbalanced data well at all.\n\nLet's sort the dataframe by AUC and see where we're at.","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"d6fe14","input":"Our imbalanced score sure looks good, doesn't it? Hm... Let's look at another metric.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"d7f59b","input":"## Predicting Opioid Abuse from Perception of Risk\n\nThe data for this project uses 2016 National Survey on Drug Use and Health to attempt to predict opioid abuse risk based on responses from a small number of survey questions regarding the perceived risk of alcohol, tobacco, and substance use. The intent was to create a screening tool for participants in Division of Extension education programs that could flag individuals that might be more at risk, so additional targeted interventions could be provided. \n\nExtensive data cleaning was performed in R, resulting in a dataset with 40241 adults with no history of opioid abuse and 2381 adults with a history of opioid abuse. \n\nLet's read in the data and one-hot-encode the category variables for sklearn.\n\nWe'll also make a much smaller data set for demonstration purposes. Otherwise, this code runs extremely slowly. If you wanted more accurate results, the entire dataset should be used.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"e1743f","input":"### Ridge Baseline\nThe <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeClassifier.html\">ridge classifier</a> uses ridge regression. Remember that ridge regression uses a tuning parameter (alpha) to shrink coefficients towards zero. We could alter the alpha parameter, but we'll leave it at the default of 1. It also supports using \"balanced\" with class_weight to handle imbalanced classes. ","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"e28332","input":"# Project 2 Supplement\n## Optimizing Classification Parameters with Imbalanced Data","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"f265ab","input":"### Random Forest Classifier Baseline\nFor random forest, we're again using the class_weight parameter, but since random forests work a bit differently than logistic regression, we're using a different parameter - balanced_subsample. This means that each of the trees within the forest will have their weights balanced within that tree.\n\nYou can read more about it in the <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">documentation</a>.","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"fb93eb","input":"When we look at our confusion matrix and statistics, we can see why our area under the curve was so bad for the imbalanced model. It just predicted everyone was not an opioid user. This is the behavior we expected. But, you can see that the model that used class weights to balance the data did a much better job. It overpredicted the number of users, but it did also correctly predict most of the users in the test set.","pos":14,"type":"cell"}
{"id":0,"time":1626190015350,"type":"user"}
{"last_load":1626190015693,"type":"file"}