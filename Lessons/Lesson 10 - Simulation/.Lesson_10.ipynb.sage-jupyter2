{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-ce81959b-ac3c-4d7b-ab75-353f713c4f7b.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"222.358px"},"toc_section_display":true,"toc_window_display":true}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"7c6506","input":"","pos":71,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"508c0b","input":"#get the skittles\nsize = 10000\nskittles = getSkittles(size, 'array')\n\n# summarize the counts in a frequency table\nunique_elements, counts_elements = np.unique(skittles, return_counts=True)\nprint(\"\\nFrequency of each color:\")\nfor color,freq in zip(unique_elements,counts_elements):\n    print(f\"  {color}: {freq} ({round((freq/size) * 100)}%) \")\n\n# summarize the results in a par graph\nplt.figure(figsize=[8,4])\nplt.bar(unique_elements, counts_elements)\nplt.xlabel('Skittles Color')\nplt.ylabel('Frequency')\nplt.xticks(unique_elements, unique_elements, rotation=30)\nplt.show()\n","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"\nFrequency of each color:\n  blue: 1155 (12%) \n  green: 2056 (21%) \n  orange: 1866 (19%) \n  purple: 2035 (20%) \n  red: 1264 (13%) \n  yellow: 1624 (16%) \n"},"1":{"data":{"image/png":"f94e5f4b34fe15010aa6c3ede34bb917b19f2cd8","text/plain":"<Figure size 576x288 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":278,"width":506}},"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"da26fd","input":"# set the size of the simulation\nSimSize = 40\n\n# generate multiple observations from a normal distribution with mean 20 and std dev 4\na = np.random.normal(loc=20,scale=4,size=SimSize)\n\n# show beginning of observations\n\nprint(f\"First 20 observations:\")\nprint(', '.join(f'{x:.1f}' for x in a[:20]) )\n\n# summarize with some descriptive statistics\nprint(f\"\\nThe average is {np.mean(a):2.1f}\")\nprint(f\"The standard deviation is {np.std(a):2.1f}\")\n\nplt.figure(figsize = (8,5))\n# display Winnings in a histogram\nplt.hist(a,color=\"olive\")\nplt.ylabel('Frequency')\nplt.xlabel('Normal(20,4) Variable')","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"First 20 observations:\n15.6, 21.4, 23.3, 15.5, 14.9, 19.5, 19.3, 12.8, 22.2, 12.3, 20.2, 16.0, 21.1, 26.1, 17.6, 25.6, 20.0, 22.9, 14.9, 14.4\n\nThe average is 19.5\nThe standard deviation is 4.1\n"},"1":{"data":{"text/plain":"Text(0.5, 0, 'Normal(20,4) Variable')"},"exec_count":11,"output_type":"execute_result"},"2":{"data":{"image/png":"9ae4d0dfe32c66991d9a256d6a1f188f4f142fee","text/plain":"<Figure size 576x360 with 1 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":316,"width":487}},"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"20685f","input":"np.random.seed(seed=5)\n\n# set the size of the simulation\nSimSize = 40\n\n# generate multiple observations from a normal distribution with mean 20 and std dev 4\na = np.random.normal(loc=20,scale=4,size=SimSize)\n\n# comment this out for large simulation sizes\nprint(\"First 20 observations:\")\nprint(', '.join(f'{x:.1f}' for x in a[:20]))\n\n# summarize with some descriptive statistics\nprint(\"\\nThe average is {:2.1f}\".format(np.mean(a)))\nprint(\"The standard deviation is {:2.1f}\".format(np.std(a)))\n\nplt.figure(figsize=(8,5))\n# display Winnings in a histogram\nplt.hist(a,color=\"orange\")\nplt.ylabel('Frequency')\nplt.xlabel('Normal(20,4) Variable')","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"First 20 observations:\n21.8, 18.7, 29.7, 19.0, 20.4, 26.3, 16.4, 17.6, 20.8, 18.7, 15.2, 19.2, 18.6, 22.4, 13.3, 17.2, 24.6, 27.4, 14.0, 22.6\n\nThe average is 20.2\nThe standard deviation is 3.6\n"},"1":{"data":{"text/plain":"Text(0.5, 0, 'Normal(20,4) Variable')"},"exec_count":12,"output_type":"execute_result"},"2":{"data":{"image/png":"48cc158818a08fd8d0269fa7707c087419265592","text/plain":"<Figure size 576x360 with 1 Axes>"},"exec_count":12,"metadata":{"image/png":{"height":316,"width":494}},"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"480e24","input":"# Coin-Flipping Game Simulation\n# 1. Each play of the game involves repeatedly flipping an\n#    unbiased coin until the difference between the number of\n#    heads tossed and the number of tails is 3.\n# 2. If you decide to play the game, you are required to pay\n#    $1 for each flip of the coin. You are not allowed to quit\n#    during a play of the game.\n# 3. You receive $8 at the end of each play of the game.\n\n# np.random.seed(seed=123) # optional - specify a seed to reproduce the simulation exactly\nSimSize = 1000  # set number of trials in the simulation\n\nRequiredDifference = 3\nCashAtEnd = 8\n\nWinnings = np.zeros(SimSize)\nFlipTotal = np.zeros(SimSize)\n\nfor nn in range(SimSize):\n\n    # Simulate one round of the coin-flipping game\n    heads = 0  # number of heads observed\n    tails = 0  # number of tails\n    Difference = 0\n    Flips = 0\n    while Difference < RequiredDifference:\n        if np.random.uniform(low=0, high=1, size=1) < 0.5:\n            heads += 1  # add one to the total heads\n        else:\n            tails += 1  # add one to the total tails\n\n        Difference = abs(heads - tails)\n        Flips = heads + tails\n\n    # Summarize results for each round of the coin flipping game\n    Winnings[nn] = CashAtEnd - Flips\n\n    # capture the number of flips\n    FlipTotal[nn] = Flips\n\n# Summarize results for the simulation\nprint(\"The average amount won is \" + dollar_print(np.mean(Winnings)))\nprint(\"The standard deviation of the winnings is \" + dollar_print(np.std(Winnings)))\nprint(\"The minimum amount won is \" + dollar_print(np.min(Winnings)))\nprint(\"The maximum amount won is \" + dollar_print(np.max(Winnings)))\n\np = np.sum(Winnings > 0) / SimSize\nprint(f\"\\nThe probability of winning money is {p:.3f}.\")\n\nprint(f\"\\nThe average number of flips is {np.mean(FlipTotal):.1f}\")\nprint(f\"The minimum number of flips is {np.min(FlipTotal):.0f}\")\nprint(f\"The maximum number of flips is {np.max(FlipTotal):.0f}\")\n\nplt.figure(figsize=(10,8))\n\n# display Winnings in a histogram\nplt.subplot(211)\nplt.hist(Winnings, color=\"g\")\nplt.ylabel('Frequency')\n\n# display Winnings in a boxplot\nplt.subplot(212)\nplt.boxplot(Winnings, vert=False)\nplt.xlabel('Winnings')","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"The average amount won is -$0.51\nThe standard deviation of the winnings is $6.23\nThe minimum amount won is -$31.00\nThe maximum amount won is $5.00\n\nThe probability of winning money is 0.598.\n\nThe average number of flips is 8.5\nThe minimum number of flips is 3\nThe maximum number of flips is 39\n"},"1":{"data":{"text/plain":"Text(0.5, 0, 'Winnings')"},"exec_count":13,"output_type":"execute_result"},"2":{"data":{"image/png":"33be2b3d71e6c6087a70eb9ffe92b7d1f300ce9a","text/plain":"<Figure size 720x576 with 2 Axes>"},"exec_count":13,"metadata":{"image/png":{"height":479,"width":612}},"output_type":"execute_result"}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"c639f3","input":"# Simulation for Problem 20.6-3\n\n# set.seed(8) # optional - specify a seed to reproduce the simulation exactly\nSimSize=1000 # set number of trials in the simulation\n\n# Generate rondom observations for the 4 relays for the entire simultion\nrelay1 = np.random.uniform(low=1000, high=2000, size=SimSize)\nrelay2 = np.random.uniform(low=1000, high=2000, size=SimSize)\nrelay3 = np.random.uniform(low=1000, high=2000, size=SimSize)\nrelay4 = np.random.uniform(low=1000, high=2000, size=SimSize)\n\n# create an array of failure times\nfailures = np.array([relay1,relay2,relay3,relay4])\n\n# find the min of each column, which is the time to first failure (TTFF)\nTTFF = np.amin(failures,axis=0) \n\n# time to replace all 4 relays is 2 hours, a constant here\nRepairTime = 2\n\n# compure total time, time to failure plus the repair time\nTotalTime = TTFF + RepairTime\n\n# compute the total cost $1000/hr for 2 hours, $200/relay for 4 relays, constant\nTotalCost = 1000*2+200*4\n\n# compute the cost per hour\nCostPerHour = TotalCost/TotalTime\n\n# Summarize results for the simulation\n# we're using dollar_print() defined in the previous cel\n\nprint(f\"The average cost is \" + dollar_print(np.mean(CostPerHour)))\nprint(f\"The standard deviation of the cost is \" + dollar_print(np.std(CostPerHour)))\n\n# compare CostPerHour to the current cost of $3.19\nplt.figure(figsize=(8,5))\n\n# display Winnings in a histogram\nplt.hist(CostPerHour, color=\"sienna\")\nplt.ylabel('Frequency')\nplt.xlabel('Cost Per Hour')","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"The average cost is $2.35\nThe standard deviation of the cost is $0.30\n"},"1":{"data":{"text/plain":"Text(0.5, 0, 'Cost Per Hour')"},"exec_count":14,"output_type":"execute_result"},"2":{"data":{"image/png":"b4939705c8fef964c6a9064a4cdd1294f6545b04","text/plain":"<Figure size 576x360 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":316,"width":500}},"output_type":"execute_result"}},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"926e5f","input":"# plot results and trend chart showing middle 90% of simulated profits for each order quantity\nfig, ax = plt.subplots(figsize=(6, 5))\nax.plot('OrderQuantity','MeanProfit',data=df, linestyle='-', marker='o');\nplt.xlabel('Order Quantity', fontsize=12);\nplt.ylabel('Mean Profit', fontsize=12);\nplt.title(\"Trend Chart\");\nax.fill_between('OrderQuantity','Pctl_05','Pctl_95',data=df,color=\"#b9cfe7\", edgecolor=\"#b9cfe7\");","output":{"0":{"data":{"image/png":"ceadda7a6d3124c02676e8c98c2bcaf43768fc41","text/plain":"<Figure size 432x360 with 1 Axes>"},"exec_count":15,"metadata":{"image/png":{"height":334,"width":385}},"output_type":"execute_result"}},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"ac7bc8","input":"# Freddie the Newsboy Simulation - LOOP version\n\n# np.random.seed(seed=123) # optional - specify a seed to reproduce the simulation exactly\nsim_size = 10000  # set number of trials in the simulation\n\n# establish the constants in the simulation\nunit_sale_price = 2.50\nunit_purchase_cost = 1.50\nunit_salvage_value = 0.50\n\ndef profit_simulator(qty):\n    \n    # initialize array for storing profits (the value doesn't matter since we'll replace it later)\n    profit_sim = np.zeros(sim_size)\n    \n    for i in range(sim_size):\n        \n        # generate random data for this iteration of the problem\n        demand = np.random.randint( low = 40, high = 70 )\n        \n        # compute the profit based on the random data\n        sales_revenue = unit_sale_price * min( qty, demand )\n        purchasing_cost = unit_purchase_cost * qty\n        salvage_value = unit_salvage_value * max( qty - demand, 0 )\n        profit_sim[i] = sales_revenue - purchasing_cost + salvage_value\n\n    return profit_sim\n\nprofit = profit_simulator(60)\n\n# summarize results (using dollar_print defined two cells ago)\nprint(f\"The average profit is \" + dollar_print(np.mean(profit)) )\nprint(f\"The standard deviation of the profit is \" + dollar_print(np.std(profit)))\n\n# display Winnings in a histogram\nfig, ax = plt.subplots(figsize=(8, 5));\nax.hist(profit);\nplt.ylabel('Frequency');\nplt.xlabel('Profit');","output":{"0":{"name":"stdout","output_type":"stream","text":"The average profit is $45.80\nThe standard deviation of the profit is $13.67\n"},"1":{"data":{"image/png":"c08de19596ddda768f6bc0b0f7748a7215472378","text/plain":"<Figure size 576x360 with 1 Axes>"},"exec_count":15,"metadata":{"image/png":{"height":316,"width":506}},"output_type":"execute_result"}},"pos":66,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"157a75","input":"# Freddie the Newsboy Simulation with Parameter Analysis for Order Quantity\n# simulation constants and sim_size defined in previous cell\n\ndef profit_stats(qty):\n    # input: qty = order quantity\n    # output: [mean profit, 5th percentile, 95th percentile]\n    profit = profit_simulator(qty)\n    mean_profit = np.mean(profit)\n    [lower, upper] = np.quantile(profit, [.05, .95])\n    return ((mean_profit, lower, upper))\n\norder_quantity = np.arange(40, 71, 5)  # need to go over 70 to include 70\nnum_quantities = len(order_quantity)\nmean_profit = np.zeros(num_quantities)\npctl_05 = np.zeros(num_quantities)\npctl_95 = np.zeros(num_quantities)\n\n# collect simulation results for all order quantites\nfor i in range(num_quantities):\n    mean_profit[i], pctl_05[i], pctl_95[i] = profit_stats(order_quantity[i])\n\n# put results in dataframe for nice display and plotting in next cell\ndf = pd.DataFrame({\n    'OrderQuantity': order_quantity,\n    'MeanProfit': mean_profit,\n    'Pctl_05': pctl_05,\n    'Pctl_95': pctl_95\n})\ndisplay(df)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OrderQuantity</th>\n      <th>MeanProfit</th>\n      <th>Pctl_05</th>\n      <th>Pctl_95</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>40</td>\n      <td>40.0000</td>\n      <td>40.0</td>\n      <td>40.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>45</td>\n      <td>44.0274</td>\n      <td>37.0</td>\n      <td>45.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>50</td>\n      <td>46.3506</td>\n      <td>32.0</td>\n      <td>50.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>55</td>\n      <td>46.9310</td>\n      <td>27.0</td>\n      <td>55.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>45.9950</td>\n      <td>22.0</td>\n      <td>60.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>65</td>\n      <td>43.0356</td>\n      <td>17.0</td>\n      <td>65.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>70</td>\n      <td>39.0022</td>\n      <td>12.0</td>\n      <td>66.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   OrderQuantity  MeanProfit  Pctl_05  Pctl_95\n0             40     40.0000     40.0     40.0\n1             45     44.0274     37.0     45.0\n2             50     46.3506     32.0     50.0\n3             55     46.9310     27.0     55.0\n4             60     45.9950     22.0     60.0\n5             65     43.0356     17.0     65.0\n6             70     39.0022     12.0     66.0"},"exec_count":16,"output_type":"execute_result"}},"pos":69,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"261232","input":"# find maximum average profit\n# results will vary slightly on each run\n\n# to maximize we minimize the negative profit\ndef neg_mean_profit( qty ):\n    return( -profit_stats(qty)[0] ) # simulate stats and return just mean\n\nresult = minimize_scalar(neg_mean_profit,bounds=[40,70],method='bounded')\n\n# summarize results\nprint(\"The maximum average profit is approximately \" + dollar_print(-result['fun']))\nprint(f\"The optimal order quantity is approximately {result['x']:.0f}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The maximum average profit is approximately $47.16\nThe optimal order quantity is approximately 54\n"}},"pos":74,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"a66968","input":"# Freddie the Newsboy Simulation - VECTORIZED version\n\n# np.random.seed(seed=123) # optional - specify a seed to reproduce the simulation exactly\nsim_size = 10000  # set number of trials in the simulation\n\n# establish the constants in the simulation\nunit_sale_price = 2.50\nunit_purchase_cost = 1.50\nunit_salvage_value = 0.50\n\ndef profit_simulator(qty):\n    order_quantity = np.full(sim_size, qty)\n    demand = np.random.randint(low=40, high=70, size=sim_size)\n    sales_revenue = unit_sale_price * np.minimum(order_quantity, demand)\n    purchasing_cost = unit_purchase_cost * order_quantity\n    salvage_value = unit_salvage_value * np.maximum(order_quantity - demand,\n                                                    np.zeros(sim_size))\n    profit_sim = sales_revenue - purchasing_cost + salvage_value\n    return (profit_sim)\n\nprofit = profit_simulator(60)\n\n# summarize results (using dollar_print defined two cells ago)\nprint(f\"The average profit is \" + dollar_print(np.mean(profit)) )\nprint(f\"The standard deviation of the profit is \" + dollar_print(np.std(profit)))\n\n# display Winnings in a histogram\nfig, ax = plt.subplots(figsize=(8, 5));\nax.hist(profit);\nplt.ylabel('Frequency');\nplt.xlabel('Profit');","output":{"0":{"name":"stdout","output_type":"stream","text":"The average profit is $45.95\nThe standard deviation of the profit is $13.60\n"},"1":{"data":{"image/png":"bf05af9d7f67b09216add0ba476fdafa85df3c0e","text/plain":"<Figure size 576x360 with 1 Axes>"},"exec_count":17,"metadata":{"image/png":{"height":316,"width":506}},"output_type":"execute_result"}},"pos":67,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"e8c50e","input":"import numpy as np\nnp.arange(3,12.1,.5)","output":{"0":{"data":{"text/plain":"array([ 3. ,  3.5,  4. ,  4.5,  5. ,  5.5,  6. ,  6.5,  7. ,  7.5,  8. ,\n        8.5,  9. ,  9.5, 10. , 10.5, 11. , 11.5, 12. ])"},"exec_count":17,"output_type":"execute_result"}},"pos":80,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"13f093","input":"np.linspace(3,12,10,endpoint=True)","output":{"0":{"data":{"text/plain":"array([ 3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.])"},"exec_count":18,"output_type":"execute_result"}},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"61415f","input":"# EXECUTE FIRST\n\n# computational imports\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import minimize_scalar\nimport time\n\n# plotting imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\n# display imports\nfrom IPython.display import display, IFrame\nfrom IPython.core.display import HTML\n\n# for playing videos, customize height and width if desired\ndef play_video(vid_name, w=640, h=400):\n    vid_path = \"https://media.uwex.edu/content/ds/ds775_r19/\" + vid_name + \"/index.html\"\n    hlink = '<a href = ' + vid_path + ' target = \"\"\"_blank\"\"\">Open video in new tab</a>'\n    display(IFrame(vid_path, width=w, height=h))\n    display(HTML(hlink))\n\n# helper function for nicely printing dollar amounts\ndef dollar_print(x):\n    if x < 0:\n        return(f\"-${-x:,.2f}\")\n    else:\n        return(f\"${x:,.2f}\")","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"4e84b5","input":"# execute this cell for video\nplay_video(\"ds775_lesson8-simulation-highlights\")","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"data":{"iframe":"667c16dd616259070e750e459821c35bb8746b00","text/plain":"<IPython.lib.display.IFrame at 0x7f0134944880>"},"exec_count":4,"output_type":"execute_result"},"1":{"data":{"text/html":"<a href = https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson8-simulation-highlights/index.html target = \"\"\"_blank\"\"\">Open video in new tab</a>","text/plain":"<IPython.core.display.HTML object>"},"exec_count":4,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"e125f8","input":"rand = np.random.uniform(low=0.0, high=1.0, size=1)\n\nif rand <= 0.20: \n    color = \"purple\"\nelif  (rand > 0.20 and rand <= .36):\n    color = \"yellow\"\nelif  (rand > 0.36 and rand <=.57):\n    color = \"green\"    \nelif  (rand > 0.57 and rand <=.75):\n    color = \"orange\"  \nelif  (rand > 0.75 and rand <=.88):\n    color = \"red\"\nelse:\n    color = \"blue\"\n\nprint(f\"The uniform random number is {rand[0]:0.4f}\")  # this isn't necessary to print, but I'm displaying it so you can see how it works\nprint(f\"The color of this randomly selected Skittle is {color}.\") # this is a randomly generated discrete event","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"The uniform random number is 0.5227\nThe color of this randomly selected Skittle is green.\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"71be8a","input":"# 20% are purple, 16% yellow, 21% green, 18% orange, 13% red, and 12% blue\n\ncolors = np.array([\"purple\", \"yellow\", \"green\", \"orange\", \"red\", \"blue\"])\nprob = np.array([.20, .16, .21, .18, .13, .12])\n\ncolor = np.random.choice(colors, size = 1, p = prob)\n\nprint(f\"The color of this randomly selected Skittle is {color[0]}.\") # this is a randomly generated discrete event","output":{"0":{"name":"stdout","output_type":"stream","text":"The color of this randomly selected Skittle is purple.\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"a1262e","input":"demand = np.random.randint(low=40.0, high=70.0, size=1)\n\nprint(demand[0])","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"45\n"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"cab002","input":"# 1 observation from a normal distribution with mean 20 and std dev 4\na = np.random.normal(loc=20,scale=4,size=1)\nprint(f\"Normal rv:{a[0]:12.2f}\")\n\n# 1 observation from an exponential distribution with mean 3\nb = np.random.exponential(scale=3,size=1)\nprint(f\"Exponential rv: {b[0]:6.2f}\")\n\n# 1 observation from a 2-parameter Weibull distribution with shape 2 and scale 10\nc = 10*np.random.weibull(a=2,size=1)\nprint(f\"Weibull rv: {c[0]:10.2f}\")\n\n# 1 observation from a lognormal distribution with mean 100 and std dev 15\nd = np.random.lognormal(mean=3,sigma=0.5,size=1)\nprint(f\"Lognormal rv: {d[0]:8.2f}\")\n\n# 1 observation from a triangular distribution with min = 10, peak = 20, max = 50\ne = np.random.triangular(left=10,mode=20,right=50,size=1)\nprint(f\"Triangular rv: {e[0]:8.2f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Normal rv:       13.66\nExponential rv:   2.63\nWeibull rv:      12.07\nLognormal rv:    19.96\nTriangular rv:    16.37\n"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"da65c0","input":"#create a function that uses either a loop or an array to generate skittles data\ndef getSkittles(simSize, loop=True):\n    # initialize the array to the desired size and data type (string in this case)\n    color = np.full(shape=simSize, fill_value=\"colors\") \n\n    if loop:\n        # capture each simulation run using an index (i in this case)\n        for i in range(simSize):\n            rand = np.random.uniform(low=0.0, high=1.0, size=1)\n\n            if rand <= 0.20: \n                color[i] = \"purple\"\n            elif  (rand > 0.20 and rand <= .36):  \n                color[i] = \"yellow\"\n            elif  (rand > 0.36 and rand <=.57):\n                color[i] = \"green\"    \n            elif  (rand > 0.57 and rand <=.75):\n                color[i] = \"orange\"  \n            elif  (rand > 0.75 and rand <=.88):\n                color[i] = \"red\"\n            else:\n                color[i] = \"blue\"\n    else:\n        # alternately you could replace the whole loop with this:\n        colors = np.array([\"purple\", \"yellow\", \"green\", \"orange\", \"red\", \"blue\"])\n        prob = np.array([.20, .16, .21, .18, .13, .12])\n        color = np.random.choice( colors, size = simSize, p=prob)\n\n    return color\n\ntic = time.perf_counter()\nskittles_loop = getSkittles(1000, 'loop')\ntoc = time.perf_counter()\nprint(f\"The loop ran in {toc - tic:0.4f} seconds\")\n\ntic = time.perf_counter()\nskittles_array = getSkittles(1000, 'array')\ntoc = time.perf_counter()\nprint(f\"The array ran in {toc - tic:0.4f} seconds\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The loop ran in 0.0230 seconds\nThe array ran in 0.0082 seconds\n"}},"pos":41,"type":"cell"}
{"cell_type":"markdown","id":"004467","input":"True or False: Simulations provide exact results just like analytical methods.","metadata":{"hidden":true},"pos":77,"type":"cell"}
{"cell_type":"markdown","id":"06118e","input":"# Simulation Basics","metadata":{"heading_collapsed":true},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"09e020","input":"## Simulation:  What is it?","metadata":{"hidden":true},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"0b89ef","input":"True or False: If the distribution of a random variable in a simulation is unknown, then a normal distribution should always be used. ","metadata":{"hidden":true},"pos":83,"type":"cell"}
{"cell_type":"markdown","id":"124061","input":"# Lesson 10: Simulation","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"1363cc","input":"There is just one video for this lesson that gives an overview of the topic:","metadata":{"hidden":true},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"20575d","input":"Using arrays when generating data from continuous distributions is even easier, as most of them are built-in to Numpy. In the next cell, we generate 40 observations from a normal distribution with mean of 20 and standard deviation of 4.\n\nYou can change the simulation size to something larger - say 1000, and you should get a graph that shows a normal distribution (peaked at the mean, trailing off at both ends).\n","metadata":{"hidden":true},"pos":45,"type":"cell"}
{"cell_type":"markdown","id":"221c9b","input":"**Textbook Problem 20.1**\n\n20.1-1. Use the uniform random numbers in cells C13:C18 of Fig. 20.1 to generate six random observations for each of the following situations. (hint: **don't** use the computer for this one, *just use the random numbers printed in cells C13:C18 of Fig. 20.1 on p. 896*)\n\n(a) Throwing an unbiased coin.\n\n(b) A baseball pitcher who throws a strike 60 percent of the time and a ball 40 percent of the time.\n\n(c) The color of a traffic light found by a randomly arriving car when it is green 40 percent of the time, yellow 10 percent of the time, and red 50 percent of the time.","metadata":{"hidden":true},"pos":51,"type":"cell"}
{"cell_type":"markdown","id":"22f311","input":"True or False:  Simulation provides a way of experimenting with proposed systems or policies without actually implementing them. ","metadata":{"hidden":true},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"26d6ea","input":"Simulation is used for \n\n* mathematical models that are not <a href=\"https://www.britannica.com/technology/tractable-problem\">tractable</a>\n* analyzing stochastic (random/probabilistic) systems that operate indefinitely to gain insight into the behavior of the system over time\n* analyzing and designing systems that would otherwise be very time consuming and/or expensive\n* experimenting with a system without actually implementing it","metadata":{"hidden":true},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"2cef5e","input":"## Generating Discrete Events","metadata":{"heading_collapsed":true,"hidden":true},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"2e9fc1","input":"True or False:  Simulations results should be generalized beyond the conditions that were simulated.","metadata":{"hidden":true},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"30b9cb","input":"## *Self-Assessment: Simulating Outcomes*","metadata":{"hidden":true},"pos":78,"type":"cell"}
{"cell_type":"markdown","id":"3524d5","input":"(*Hint: Review the subsection titled \"Discrete-Event versus Continuous Simulation\" in Section 20.1 before answering this one.*)\n\nWhich of the following would be modeled by discrete-even simulation?  Select all that apply. \n\na. The number of products sold over time. \n\nb. The air pressure in submarine during its time under the water.\n\nc. The arrival of customers to a queue.  \n\nd. Whether is rains or not in a day over a 10-year period. \n\ne. The temperature of an engine over a period of operation. \n","metadata":{"hidden":true},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"39bc99","input":"### Random Integers","metadata":{"hidden":true},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"3ca10b","input":"## *Self-Assessment: Discrete-Event Simulation*","metadata":{"heading_collapsed":true,"hidden":true},"pos":50,"type":"cell"}
{"cell_type":"markdown","id":"473a10","input":"### Freddie the Newsboy Simulation","pos":65,"type":"cell"}
{"cell_type":"markdown","id":"5dc600","input":"An algorithm that produces sequences of numbers that follow a specified probability distribution and possess the appearance of randomness is a\n \na. warm-up period.\n\nb. simulation clock.\n\nc. financial risk analysis.\n\nd. random number generator. \n\ne. continuous simulation.\n","metadata":{"hidden":true},"pos":79,"type":"cell"}
{"cell_type":"markdown","id":"5dd49e","input":"### Freddie the Newsboy Simulation with Parameter Analysis for Order Quantity","pos":68,"type":"cell"}
{"cell_type":"markdown","id":"612b50","input":"### Using Conditions (for, while, if, elif, else) vs. Using Numpy Arrays","metadata":{"hidden":true},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"61b68d","input":"## *Self-Assessment: Simulation Results*","metadata":{"hidden":true},"pos":76,"type":"cell"}
{"cell_type":"markdown","id":"67259f","input":"There are many continuous distributions to choose from.  The Hillier textbook sections 20.3-20.4 discuss some of what is going on \"behind the scenes\" when you use computer code to generate random numbers (also called pseudo-random numbers because of their reproducibility with random number *seeds* - more on that below).\n\nLook under **Distributions** on the \n<a href = https://docs.scipy.org/doc/numpy-1.14.1/reference/routines.random.html#distributions > Numpy Manual </a> for a list of options.\n\nIn this course, the focus will be on implementation rather than the mathematics behind random number generation.  A few common options are in the cell that follows.","metadata":{"hidden":true},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"68072c","input":"Simulation results can be reproduced exactly by running the simulation again using the same\n\na. seed.\n\nb. computer.\n\nc. plant.\n\nd. method of random number generation.\n\ne. simulation clock.","metadata":{"hidden":true},"pos":85,"type":"cell"}
{"cell_type":"markdown","id":"68340b","input":"Simulation is using a computer to imitate the operation of a process or system in order to estimate its actual performance.\n\nComponents of a simulation model:\n\n* a definition of the state of the system\n* identification of the possible states of the system\n* identification of possible events that could change the value of the system\n* methods for randomly generating events\n* a way to relate the state transitions to the events that brought them about","metadata":{"hidden":true},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"68369b","input":"## Coin Flip Simulation (from Textbook)","metadata":{"hidden":true},"pos":55,"type":"cell"}
{"cell_type":"markdown","id":"6928fb","input":"### *Self-Assessment: Generalizing Simulation Results*","metadata":{"hidden":true},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"6a8166","input":"## Textbook Problem 20.6-3","metadata":{"hidden":true},"pos":58,"type":"cell"}
{"cell_type":"markdown","id":"778b09","input":"**Textbook Problem 20.3 (a,b,e)**\n\nJessica Williams, manager of Kitchen Appliances for the Midtown Department Store, feels that her inventory levels of stoves have been running higher than necessary. Before revising the inventory policy for stoves, she records the number sold each day over a period of 25 days, as summarized below.\n\n$\n\\begin{array}{l|ccccc}\n  \\hline\n\\text{Number sold}    & 2 & 3 & 4 & 5 & 6  \\\\  \n\\hline\n\\text{Number of days} & 4 & 7 & 8 & 5 & 1   \\\\\n\\hline\n\\end{array}\n$\n\n(a) Use these data to estimate the probability distribution of daily sales.\n\n(b) Calculate the mean of the distribution obtained in part (a).\n\n(e) Formulate a model in Python for performing a simulation of the daily sales. Perform 300 replications and obtain the average of the sales over the 300 simulated days.  This can be done with a loop or with `numpy.random.choice`. (Use **np.random.seed(seed=222)** and let's see if we all get the same answer.)\n\n*Note: this example shows a simulation for a situation where the outcome of interest, the mean sales in this case, can be computed analytically and so there is really no need to simulate it.  The analytical solution is a constant, whereas the simulation has inherent variability.  Simulation is best employed in situation where the analytical solution is intractable or at least so difficult that simulation is worthwhile.*","metadata":{"hidden":true},"pos":53,"type":"cell"}
{"cell_type":"markdown","id":"780b29","input":"## *Self-Assessment: Simulation Reproducibility*","metadata":{"hidden":true},"pos":84,"type":"cell"}
{"cell_type":"markdown","id":"7cef87","input":"### *Self-Assessment: Simulating a System*","metadata":{"hidden":true},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"8075cc","input":"# Further Analysis of Simulation Results","pos":62,"type":"cell"}
{"cell_type":"markdown","id":"82d321","input":"* Simulations have inherent variability, so they provide only statistical estimates rather than exact results (analytical methods provide exact results when tractable)\n* Simulations compare various alternative without necessarily finding the optimal one\n* Even with today's computers, some complex simulations still require large amounts of computing time and expense in programming and analysis\n* Simulations provide only numerical measures about the performance of a system and cause-and-effect relationships are not always evident\n* Simulations results apply only to the conditions that were simulated\n* Sensitivity analysis can be unwieldy in large simulations\n","metadata":{"hidden":true},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"83bedb","input":"## Generating Replications","metadata":{"heading_collapsed":true,"hidden":true},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"88a527","input":"## *Self-Assessment: Discrete-Event Simulation 2*","metadata":{"hidden":true},"pos":52,"type":"cell"}
{"cell_type":"markdown","id":"925693","input":"The **Freddy the Newsboy** simulation on pp. 923-939 of the Hillier textbook is constructed below in the next Python code cell.","pos":64,"type":"cell"}
{"cell_type":"markdown","id":"935647","input":"In the Coin-Flipping Game simulation example on pp. 894-899 in the Hillier textbook each play of the game involves repeatedly flipping an unbiased coin until the difference between the number of heads tossed and the number of tails is 3.  If you decide to play the game, you are required to pay \\$1 for each flip of the coin. You are not allowed to quit during a play of the game.  You receive \\$8 at the end of each play of the game.\n\nThis situation may have an analytical solution, but it would take considerable work to get through it.  In this case, good insight into the behavior of this game can be gleaned from a fairly simple simulation. The textbook authors discuss the Excel implementation of this simulation in detail. The same simulation is constructed in Python in the cell below.\n\nRun the simulation a few times to see the variability in the results. Notice the types of summaries that can be made of the simulation results: descriptive statistics like mean, standard deviation, minimum, and maximum, as well as graphical summaries like histograms or boxlots.\n\nIn this textbook, they commonly ask for 1000 replications in a given simulation, but with today's computing power you could easily increase that number to 10,000 or 100,000 or more depending on what you have to work with.  In simulation, a bigger the simulation size means more precise simulation results (*i.e.* the results are closer to the actual underlying values).","metadata":{"hidden":true},"pos":56,"type":"cell"}
{"cell_type":"markdown","id":"964b7e","input":"# Basic Simulation Tools","metadata":{"heading_collapsed":true},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"96c783","input":"In order to construct a simulation, the following questions may help guide the formulation of the process that is being simulated.\n\n* What variables are involved?  \n* Which variables are discrete and which are ones are continuous?\n* How do variables relate to each other? \n* What formulas or relationships are needed? \n* Are some variables dependent on the outcomes of others?\n* How do the various events and outcomes relate chronologically?  \n* How will the passage of time be marked?\n* How will the outcome variables be captured and summarized?\n* How will the simulation performance be evaluated?  Numerical summaries?  Probabilities? \n\nSimulations come in all shapes and sizes.  It takes a lot of creativity, programming skills, and ability to model processes with random variables and functions and equations and put it all together so that the important statistics can be captured on each simulation run  and summarize those in some way so that yo can gain insight into the process or system that you are simulating.","metadata":{"hidden":true},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"997543","input":"True or False:  Simulation is using a computer to imitate the operation of a process or system in order to estimate its actual performance. ","metadata":{"hidden":true},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"998937","input":"## Random Number Seeds","metadata":{"heading_collapsed":true,"hidden":true},"pos":47,"type":"cell"}
{"cell_type":"markdown","id":"9f07a8","input":"## Optimization Within a Simulation","pos":72,"type":"cell"}
{"cell_type":"markdown","id":"a07aa3","input":"## Simulation Basics (video)","metadata":{"hidden":true},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"a45439","input":"The Avery Co. factory has been having a maintenance problem with the control panel for one of its production processes. This control panel contains four identical electromechanical relays that have been the cause of the trouble. The problem is that the relays fail fairly frequently, thereby forcing the control panel (and the production process it controls) to be shut down while a replacement is made. The current practice is to replace the relays only when they fail. \n\nThe average total cost of doing this has been \\$3.19 per hour. To attempt to reduce this cost, a proposal has been made to replace all four relays whenever any one of them fails to reduce the frequency with which the control panel must be shut down. Would this actually reduce the cost?\n\nThe pertinent data are the following. For each relay, the operating time until failure has approximately a uniform distribution from 1,000 to 2,000 hours. The control panel must be shut down for one hour to replace one relay or for two hours to replace all four relays. The total cost associated with shutting down the control panel and replacing relays is \\$1,000 per hour plus \\$200 for each new relay.\n\nUse simulation on a spreadsheet to evaluate the cost of the proposal and compare it to the current practice. Perform 1,000 trials (where the end of each trial coincides with the end of a shutdown of the control panel) and determine the average cost per hour.","metadata":{"hidden":true},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"b0d238","input":"### *Self-Assessment: Simulation*","metadata":{"hidden":true},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"b165df","input":"## *Self-Assessment: Random Variables in Simulation*","metadata":{"hidden":true},"pos":82,"type":"cell"}
{"cell_type":"markdown","id":"b48a97","input":"That entire `if_else` structure can be replaced by one command using `numpy.random.choice`.  The code to do this is below:","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"b79cee","input":"### *Self-Assessment: Type of Simulation*","metadata":{"hidden":true},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"b942db","input":"# Formulating a Simulation Process","metadata":{"heading_collapsed":true},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"bdbe21","input":"# More Self-Assessment","metadata":{"heading_collapsed":true},"pos":75,"type":"cell"}
{"cell_type":"markdown","id":"beb5fa","input":"# Examples","metadata":{"heading_collapsed":true},"pos":54,"type":"cell"}
{"cell_type":"markdown","id":"c2c7da","input":"You should have noticed when running the cells above multiple times that the results vary each time the random numbers are generated.  A simulation can be reproduced exactly by specifying a random number seed so that the (pseudo-)random numbers generated will have the same initial value to start the process of random number generation.\n\nRun the following cell a few times to see if the results vary.  Change the random number seed to a different value and run the cell again.  Just pick any number you want for the seed.  Did the results change when the random number seed changed?\n\nGo back to the original seed of 5 and run the cell again.  What happens?  Do you recognize the result? ","metadata":{"hidden":true},"pos":48,"type":"cell"}
{"cell_type":"markdown","id":"c9e6f6","input":"### Freddie the Newsboy: find maximum average profit","pos":73,"type":"cell"}
{"cell_type":"markdown","id":"c9f5c0","input":"The average cost per hour is near \\$2.37 per hour, which is well below the current average of \\$3.19 per hour.  In fact, even the maximum cost per hour of the 1000 replications in the simulation is less than the \\$3.19 per hour, so clearly the policy of replacing all four relays when the any one of them fails is more cost-effective.  ","metadata":{"hidden":true},"pos":61,"type":"cell"}
{"cell_type":"markdown","id":"cee24e","input":"In interpreted languages like Python and R it is generally faster to avoid loops when possible.\n\nIn the next cell, we generate 10000 skittles and summarize the result with a frequency table and bar graph. Are the frequencies about what you'd expect, given our original probabilities (20\\% purple, 16\\% yellow, 21\\% green, 18\\% orange, 13\\% red, and 12\\% blue)?","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"d0e6bd","input":"Suppose uniformly distributed random integers are needed, such as the order quantity or demand in the Freddie the Newsboy simulation (see Hillier p. 923). \n\nThe following code will generate a uniformly distributed random integer in the specified range.  Again, the cell can be executed as many times as you like to see different outcomes, but they are not being stored.  In a later cell we will address how to capture a series of outputs.","metadata":{"hidden":true},"pos":32,"type":"cell"}
{"cell_type":"markdown","id":"d46929","input":"Suppose there is a very large bowl of Skittles where 20\\% are purple, 16\\% yellow, 21\\% green, 18\\% orange, 13\\% red, and 12\\% blue. Also suppose we are to select one Skittle randomly from the bowl and make note of the color.\n\nThe cell below contains code to simulate this random outcome.  You can re-run the cell as many times as you like to see different outcomes.  In a later cell we will address how to capture a series of outputs.","metadata":{"hidden":true},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"d60056","input":"## Generating Continuous Outcomes","metadata":{"hidden":true},"pos":34,"type":"cell"}
{"cell_type":"markdown","id":"da3cec","input":"## Motivation for Simulation","metadata":{"hidden":true},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"dce0fb","input":"## Parameter Analysis and Trend Charts ","pos":63,"type":"cell"}
{"cell_type":"markdown","id":"dd48ea","input":"You may not have heard of some of these probability distributions and that's OK.  If you find yourself in the situtation where you need to \n\n*Note: Be aware that many distributions, including the exponential, Weibull, and lognormal, can have different parameterizations so be sure to consult the documentation of the software you are using to be sure of what you are generating.*\n\n*We've included a separate notebook called **lognormal.ipynb** that you can use to understand how to set parameters for the lognormal distribution.*","metadata":{"hidden":true},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"de0e80","input":"True or False:  Simulation is used for analyzing stochastic systems that operate indefinitely to gain insight into the behavior of the system over time. ","metadata":{"hidden":true},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"e55141","input":"### Categorical Outcomes","metadata":{"hidden":true},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"e7b837","input":"Let's generate 1000 replicates of the Skittle selection. We'll do this two ways - with a for loop and with a Numpy array. We've written a function that takes in the simulation size and a boolean (defaulted to true) to choose whether to run looping code or generate the data using Numpy arrays. We've added some timer code to demonstrate the difference between using loops and arrays in terms of speed. \n\nRun the code in the next cell several times. Which method is faster?\n","metadata":{"hidden":true},"pos":40,"type":"cell"}
{"cell_type":"markdown","id":"eb707f","input":"## Limitations of Simulation","metadata":{"heading_collapsed":true,"hidden":true},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"fc6915","input":"### *Self Assessment: Simulation and Time*","metadata":{"hidden":true},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"ffdeaa","input":"### Using Arrays for Continuous Distributions","metadata":{"hidden":true},"pos":44,"type":"cell"}
{"id":0,"time":1685457815071,"type":"user"}
{"last_load":1685573850340,"type":"file"}