{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-f733b2dc-620d-4a6f-80f7-544e0bc33121.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"226.792px"},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1673891290541,"exec_count":1,"id":"66f94f","input":"from pyomo.environ import *\n\n### PROBLEM DATA ###\n\n# Load Data\nfriends = ['Friend1', 'Friend2']\nconstraints = ['Fraction1','Fraction2','Money','Work_Hours']\nprofits = [9000, 9000]\nrhs = [1,1,12000,600]\ncoef = [ [1,0], [0,1], [10000,8000], [400,500]]\n\n# parse into dictionaries\nprofit_rate = dict( zip( friends, profits) )\nconstraint_rhs = dict( zip( constraints, rhs) )\nconstraint_coef = { c: {f: coef[i][j] for j,f in enumerate(friends)} for i,c in enumerate(constraints)}\n\n### MODEL CONSTRUCTION ###\n\n# Declaration\nmodel = ConcreteModel()\n\n# Decision Variables\nmodel.invest_frac = Var(friends, domain=NonNegativeReals)\n\n# Objective\nmodel.profit = Objective(expr=sum(profit_rate[f] * model.invest_frac[f]\n                               for f in friends),\n                      sense=maximize)\n\n# Constraints\nmodel.constraints = ConstraintList()\nfor c in constraints:\n    model.constraints.add(\n        sum(constraint_coef[c][f] * model.invest_frac[f]\n            for f in friends) <= constraint_rhs[c])\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Maximum Profit = ${model.profit():,.2f}\")\n\nfor f in friends:\n    print(f\"Batches of {f} = {model.invest_frac[f]():.2f}\")","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"Maximum Profit = $12,000.00\nBatches of Friend1 = 0.67\nBatches of Friend2 = 0.67\n"}},"pos":2,"start":1673891287734,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292288,"exec_count":2,"id":"2976ab","input":"from pyomo.environ import *\nimport pandas as pd\n\n### PROBLEM DATA ###\n\n# Load Data\nnum_months = 11\nmax_duration = 11\nmonths = range(1, num_months + 1)\ndurations = range(1, max_duration + 1)\nrate = [ sum( 20 - i for i in range(month) ) for month in range(1, 12) ]\nspace_req =  [2000, 2000, 3000, 4000, 6000, 10000, 10000, 10000, 9000, 7000, 5000]\n\n# Parse Dictionaries\nrent = dict( zip( durations, rate))\nspace = dict( zip( months, space_req))\n\n### MODEL CONSTRUCTION ###\n\n# Declaration\nmodel = ConcreteModel(name=\"HolidayFactory\")\n\n# Decision Variables\nmodel.x_sqft = Var(months, durations, domain=NonNegativeReals)\n\n# Objective\nmodel.obj = Objective(expr=sum(rent[d] * model.x_sqft[m, d] for m in months\n                               for d in durations))\n\n# Constraints\nmodel.space_ct = ConstraintList()\nfor month in months:\n    model.space_ct.add(\n        sum(model.x_sqft[m, d] for m in months for d in durations\n            if m <= month and m + d > month) >= space[month])\n\nmodel.time_rule_ct = ConstraintList()\nfor m in months:\n    for d in durations:\n        if m + d > num_months + 1:\n            model.time_rule_ct.add(model.x_sqft[m, d] == 0)\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Total Cost = ${model.obj():,.2f}\")\n\nprint(\"\\nHere are the amounts to lease by month and duration:\")\nfor m in months:\n    for d in durations:\n        if model.x_sqft[m, d]() > 0:\n            print(f\"Lease {model.x_sqft[m, d]():.0f} sq ft in month {m:d} for {d:d} months\")","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"Total Cost = $1,125,000.00\n\nHere are the amounts to lease by month and duration:\nLease 2000 sq ft in month 1 for 11 months\nLease 1000 sq ft in month 3 for 9 months\nLease 1000 sq ft in month 4 for 8 months\nLease 1000 sq ft in month 5 for 6 months\nLease 1000 sq ft in month 5 for 7 months\nLease 1000 sq ft in month 6 for 3 months\nLease 2000 sq ft in month 6 for 4 months\nLease 1000 sq ft in month 6 for 5 months\n"}},"pos":4,"start":1673891290561,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292395,"exec_count":3,"id":"410c6a","input":"from pyomo.environ import *\nimport pandas as pd\n\n### PROBLEM DATA\n\n# Load Data\nfactories = ['factory1', 'factory2']\ncustomers = ['cust1', 'cust2', 'cust3']\nusc = [[600, 800, 700], [400, 900, 600]]\nsup = [400, 500]\ndem = [300, 200, 400]\n\n# Parse into Dictionaries\nsupply = dict(zip(factories, sup))\ndemand = dict(zip(customers, dem))\nunit_ship_cost = { f:{ c:usc[i][j] for j,c in enumerate(customers)} for i,f in enumerate(factories)}\n\n### MODEL CONSTRUCTION ###\n\n# Declaration\nmodel = ConcreteModel()\n\n# Decision Variables\nmodel.transp = Var(factories, customers, domain=NonNegativeReals)\n\n# Objective\nmodel.total_cost = Objective(expr=sum(unit_ship_cost[f][c] * model.transp[f, c]\n                                      for f in factories for c in customers),\n                             sense=minimize)\n\n# Constraints\nmodel.supply_ct = ConstraintList()\nfor f in factories:\n    model.supply_ct.add(\n        sum(model.transp[f, c] for c in customers) == supply[f])\n\nmodel.demand_ct = ConstraintList()\nfor c in customers:\n    model.demand_ct.add(\n        sum(model.transp[f, c] for f in factories) == demand[c])\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\n# dataframes are displayed nicely in Jupyter\ndvars = pd.DataFrame([[model.transp[f, c]() for c in customers]\n                      for f in factories],\n                     index=factories,\n                     columns=customers)\nprint(\"Number to ship from each factory to each customer:\")\ndvars","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"Minimum Total Cost = $540,000.00\nNumber to ship from each factory to each customer:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cust1</th>\n      <th>cust2</th>\n      <th>cust3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>factory1</th>\n      <td>0.0</td>\n      <td>200.0</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>factory2</th>\n      <td>300.0</td>\n      <td>0.0</td>\n      <td>200.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          cust1  cust2  cust3\nfactory1    0.0  200.0  200.0\nfactory2  300.0    0.0  200.0"},"exec_count":3}},"pos":7,"scrolled":true,"start":1673891292312,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292449,"exec_count":4,"id":"466431","input":"from pyomo.environ import *\n\n### PROBLEM DATA ###\n\n# load data\nvar_names = ['x1', 'x2', 'x3', 'x4']\ncon_names = ['con1', 'con2']\nobj_coef = [5, 4, -1, 3]\ncon_coef = [ [3, 2, -3, 1], [3, 3, 1, 3] ]\ncon_rhs = [24, 36]\n\n# parse into dictionaries\nobj_coef_dict = dict( zip( var_names, obj_coef) )\ncon_coef_dict = { c: {v: con_coef[i][j] for j,v in enumerate(var_names) } for i,c in enumerate(con_names)}\ncon_rhs_dict = dict( zip( con_names, con_rhs))\n\n### MODEL CONSTRUCTION ###\n\n# declaration\nmodel = ConcreteModel(name = \"Generic\")\n\n# Decision Variables\nmodel.x = Var( var_names, domain = NonNegativeReals)\n\n# Objective\nmodel.obj = Objective( expr = sum( obj_coef_dict[v] * model.x[v] for v in var_names), sense = maximize)\n\n# Constraints\nmodel.cts = ConstraintList()\nfor c in con_names:\n    model.cts.add( sum( con_coef_dict[c][v] * model.x[v] for v in var_names) <= con_rhs_dict[c] )\n\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Maximum Z = {model.obj()}\")\nfor v in var_names:\n    print(f\"{v} = {model.x[v]()}\")","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"Maximum Z = 52.0\nx1 = 11.0\nx2 = 0.0\nx3 = 3.0\nx4 = 0.0\n"}},"pos":18,"start":1673891292412,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292600,"exec_count":5,"id":"fd62d8","input":"# write the model to a sensitivity report\nmodel.write('model.lp', io_options={'symbolic_solver_labels': True})\n!glpsol -m model.lp --lp --ranges sensit.sen","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"GLPSOL: GLPK LP/MIP Solver, v4.65\r\nParameter(s) specified in the command line:\r\n -m model.lp --lp --ranges sensit.sen\r\nReading problem data from 'model.lp'...\r\n3 rows, 5 columns, 9 non-zeros\r\n34 lines were read\r\nGLPK Simplex Optimizer, v4.65\r\n3 rows, 5 columns, 9 non-zeros\r\nPreprocessing...\r\n2 rows, 4 columns, 8 non-zeros\r\nScaling...\r\n A: min|aij| =  1.000e+00  max|aij| =  3.000e+00  ratio =  3.000e+00\r\nProblem data seem to be well scaled\r\nConstructing initial basis...\r\nSize of triangular part is 2\r\n*     0: obj =  -0.000000000e+00 inf =   0.000e+00 (3)\r\n*     2: obj =   5.200000000e+01 inf =   0.000e+00 (0)\r\nOPTIMAL LP SOLUTION FOUND\r\nTime used:   0.0 secs\r\nMemory used: 0.0 Mb (40412 bytes)\r\nWrite sensitivity analysis report to 'sensit.sen'...\r\n"}},"pos":19,"start":1673891292459,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292614,"exec_count":6,"id":"467f09","input":"# widen browser and/or close TOC to see sensitivity report\nimport numpy as np\nnp.set_printoptions(linewidth=110)\nf = open('sensit.sen', 'r')\nfile_contents = f.read()\nprint(file_contents)\nf.close()","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"GLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   1\n\nProblem:    \nObjective:  obj = 52 (MAXimum)\n\n   No. Row name     St      Activity         Slack   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 c_u_cts(1)_  NU      24.00000        .               -Inf     -108.00000       -.66667     -36.00000 x(x1)\n                                            .66667      24.00000       36.00000          +Inf      60.00000 x(x3)\n\n     2 c_u_cts(2)_  NU      36.00000        .               -Inf       24.00000      -1.00000      40.00000 x(x3)\n                                           1.00000      36.00000           +Inf          +Inf          +Inf\n\n     3 c_e_ONE_VAR_CONSTANT\n                    NS       1.00000        .            1.00000         .               -Inf      52.00000 ONE_VAR_CONSTANT\n                                            .            1.00000           +Inf          +Inf      52.00000\n\nGLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   2\n\nProblem:    \nObjective:  obj = 52 (MAXimum)\n\n   No. Column name  St      Activity      Obj coef   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 x(x1)        BS      11.00000       5.00000        .              .            4.63636      48.00000 x(x2)\n                                            .               +Inf       11.00000          +Inf          +Inf\n\n     2 x(x2)        NL        .            4.00000        .                -Inf          -Inf          +Inf\n                                           -.33333          +Inf       12.00000       4.33333      48.00000 x(x1)\n\n     3 x(x3)        BS       3.00000      -1.00000        .            -3.60000      -2.33333      48.00000 x(x4)\n                                            .               +Inf       36.00000       1.66667      60.00000 c_u_cts(1)_\n\n     4 x(x4)        NL        .            3.00000        .                -Inf          -Inf          +Inf\n                                           -.66667          +Inf        6.00000       3.66667      48.00000 x(x3)\n\n     5 ONE_VAR_CONSTANT\n                    BS       1.00000        .             .             1.00000          -Inf          -Inf\n                                            .               +Inf        1.00000          +Inf          +Inf\n\nEnd of report\n\n"}},"pos":20,"start":1673891292608,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292656,"exec_count":7,"id":"4b312d","input":"from pyomo.environ import *\n\n### PROBLEM DATA ###\n\n# load data\nparts = ['toys','subs']\nunit_profit = [3,-2.5]\ncon_names = ['subA','subB']\ncon_rhs = [3000, 1000]\ncon_coef = [ [2,-1], [1,-1] ]\n\n# parse dictionaries\nunit_profit_dict = dict( zip( parts, unit_profit))\ncon_rhs_dict = dict( zip( con_names, con_rhs) )\ncon_coef_dict = { c: {p:con_coef[i][j] for j,p in enumerate(parts)} for i,c in enumerate(con_names) }\n\n### MODEL CONSTRUCTION ###\n\n# Declaration\nmodel = ConcreteModel(name = \"TannerCo\")\n\n# Decision Variables\nmodel.x = Var( parts, domain = NonNegativeReals)\n\n# Objective\nmodel.obj = Objective( expr = sum( unit_profit_dict[p] * model.x[p] for p in parts), sense = maximize )\n\n# Constraints\nmodel.cts = ConstraintList()\nfor c in con_names:\n    model.cts.add( sum( con_coef_dict[c][p] * model.x[p] for p in parts) <= con_rhs_dict[c] )\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Maximum Profit = ${model.obj():,.2f}\")\nfor p in parts:\n    print(f\"Daily product rate of {p} = {model.x[p]():.0f}\")","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"Maximum Profit = $3,500.00\nDaily product rate of toys = 2000\nDaily product rate of subs = 1000\n"}},"pos":24,"start":1673891292623,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292801,"exec_count":8,"id":"c9fd89","input":"# write the model to a sensitivity report\nmodel.write('model.lp', io_options={'symbolic_solver_labels': True})\n!glpsol -m model.lp --lp --ranges sensit.sen","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"GLPSOL: GLPK LP/MIP Solver, v4.65\r\nParameter(s) specified in the command line:\r\n -m model.lp --lp --ranges sensit.sen\r\nReading problem data from 'model.lp'...\r\n3 rows, 3 columns, 5 non-zeros\r\n26 lines were read\r\nGLPK Simplex Optimizer, v4.65\r\n3 rows, 3 columns, 5 non-zeros\r\nPreprocessing...\r\n2 rows, 2 columns, 4 non-zeros\r\nScaling...\r\n A: min|aij| =  1.000e+00  max|aij| =  2.000e+00  ratio =  2.000e+00\r\nProblem data seem to be well scaled\r\nConstructing initial basis...\r\nSize of triangular part is 2\r\n*     0: obj =  -0.000000000e+00 inf =   0.000e+00 (1)\r\n*     2: obj =   3.500000000e+03 inf =   0.000e+00 (0)\r\nOPTIMAL LP SOLUTION FOUND\r\nTime used:   0.0 secs\r\nMemory used: 0.0 Mb (40412 bytes)\r\nWrite sensitivity analysis report to 'sensit.sen'...\r\n"}},"pos":25,"start":1673891292674,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292815,"exec_count":9,"id":"0111d6","input":"# widen browser and/or close TOC to see sensitivity report\nimport numpy as np\nnp.set_printoptions(linewidth=110)\nf = open('sensit.sen', 'r')\nfile_contents = f.read()\nprint(file_contents)\nf.close()","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"GLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   1\n\nProblem:    \nObjective:  obj = 3500 (MAXimum)\n\n   No. Row name     St      Activity         Slack   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 c_u_cts(1)_  NU    3000.00000        .               -Inf     2000.00000       -.50000    3000.00000 x(subs)\n                                            .50000    3000.00000           +Inf          +Inf          +Inf\n\n     2 c_u_cts(2)_  NU    1000.00000        .               -Inf           -Inf      -2.00000          -Inf\n                                           2.00000    1000.00000     1500.00000          +Inf    4500.00000 x(subs)\n\n     3 c_e_ONE_VAR_CONSTANT\n                    NS       1.00000        .            1.00000         .               -Inf    3500.00000 ONE_VAR_CONSTANT\n                                            .            1.00000           +Inf          +Inf    3500.00000\n\nGLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   2\n\nProblem:    \nObjective:  obj = 3500 (MAXimum)\n\n   No. Column name  St      Activity      Obj coef   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 x(subs)      BS    1000.00000      -2.50000        .         -1000.00000      -3.00000    3000.00000 c_u_cts(1)_\n                                            .               +Inf           +Inf      -1.50000    4500.00000 c_u_cts(2)_\n\n     2 x(toys)      BS    2000.00000       3.00000        .          1000.00000       2.50000    2500.00000 c_u_cts(1)_\n                                            .               +Inf           +Inf       5.00000    7500.00000 c_u_cts(2)_\n\n     3 ONE_VAR_CONSTANT\n                    BS       1.00000        .             .             1.00000          -Inf          -Inf\n                                            .               +Inf        1.00000          +Inf          +Inf\n\nEnd of report\n\n"}},"pos":26,"start":1673891292809,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292859,"exec_count":10,"id":"0bd5bf","input":"from pyomo.environ import *\n\n### PROBLEM DATA ###\n\n# load data\nparts = ['toys','subs']\nunit_profit = [3,-2.5]\ncon_names = ['subA','subB','max_toys']\ncon_rhs = [3000, 1000, 2500]\ncon_coef = [ [2,-1], [1,-1], [1,0] ]\n\n# parse dictionaries\nunit_profit_dict = dict( zip( parts, unit_profit))\ncon_rhs_dict = dict( zip( con_names, con_rhs) )\ncon_coef_dict = { c: {p:con_coef[i][j] for j,p in enumerate(parts)} for i,c in enumerate(con_names) }\n\n### MODEL CONSTRUCTION ###\n\n# Declaration\nmodel = ConcreteModel(name = \"TannerCo\")\n\n# Decision Variables\nmodel.x = Var( parts, domain = NonNegativeReals)\n\n# Objective\nmodel.obj = Objective( expr = sum( unit_profit_dict[p] * model.x[p] for p in parts), sense = maximize )\n\n# Constraints\nmodel.cts = ConstraintList()\nfor c in con_names:\n    model.cts.add( sum( con_coef_dict[c][p] * model.x[p] for p in parts) <= con_rhs_dict[c] )\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Maximum Profit = ${model.obj():,.2f}\")\nfor p in parts:\n    print(f\"Daily product rate of {p} = {model.x[p]():.0f}\")","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"Maximum Profit = $3,500.00\nDaily product rate of toys = 2000\nDaily product rate of subs = 1000\n"}},"pos":29,"start":1673891292831,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891292908,"exec_count":11,"id":"54d101","input":"from pyomo.environ import *\n\n### PROBLEM DATA ###\n\n# load data\nparts = ['toys','subs']\nunit_profit = [3,-2.5]\ncon_names = ['subA','subB','max_toys']\ncon_rhs = [3001, 1000, 2500]\ncon_coef = [ [2,-1], [1,-1], [1,0] ]\n\n# parse dictionaries\nunit_profit_dict = dict( zip( parts, unit_profit))\ncon_rhs_dict = dict( zip( con_names, con_rhs) )\ncon_coef_dict = { c: {p:con_coef[i][j] for j,p in enumerate(parts)} for i,c in enumerate(con_names) }\n\n### MODEL CONSTRUCTION ###\n\n# Declaration\nmodel = ConcreteModel(name = \"TannerCo\")\n\n# Decision Variables\nmodel.x = Var( parts, domain = NonNegativeReals)\n\n# Objective\nmodel.obj = Objective( expr = sum( unit_profit_dict[p] * model.x[p] for p in parts), sense = maximize )\n\n# Constraints\nmodel.cts = ConstraintList()\nfor c in con_names:\n    model.cts.add( sum( con_coef_dict[c][p] * model.x[p] for p in parts) <= con_rhs_dict[c] )\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Maximum Profit = ${model.obj():,.2f}\")\nfor p in parts:\n    print(f\"Daily product rate of {p} = {model.x[p]():.0f}\")","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"Maximum Profit = $3,500.50\nDaily product rate of toys = 2001\nDaily product rate of subs = 1001\n"}},"pos":31,"start":1673891292870,"state":"done","type":"cell"}
{"cell_type":"code","end":1673891293071,"exec_count":12,"id":"bb50bd","input":"# write the model to a sensitivity report\nmodel.write('model.lp', io_options={'symbolic_solver_labels': True})\n!glpsol -m model.lp --lp --ranges sensit.sen\n\n# widen browser and/or close TOC to see sensitivity report\nimport numpy as np\nnp.set_printoptions(linewidth=110)\nf = open('sensit.sen', 'r')\nfile_contents = f.read()\nprint(file_contents)\nf.close()","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"GLPSOL: GLPK LP/MIP Solver, v4.65\r\nParameter(s) specified in the command line:\r\n -m model.lp --lp --ranges sensit.sen\r\nReading problem data from 'model.lp'...\r\n4 rows, 3 columns, 6 non-zeros\r\n30 lines were read\r\nGLPK Simplex Optimizer, v4.65\r\n4 rows, 3 columns, 6 non-zeros\r\nPreprocessing...\r\n2 rows, 2 columns, 4 non-zeros\r\nScaling...\r\n A: min|aij| =  1.000e+00  max|aij| =  2.000e+00  ratio =  2.000e+00\r\nProblem data seem to be well scaled\r\nConstructing initial basis...\r\nSize of triangular part is 2\r\n*     0: obj =  -0.000000000e+00 inf =   0.000e+00 (1)\r\n*     2: obj =   3.500500000e+03 inf =   0.000e+00 (0)\r\nOPTIMAL LP SOLUTION FOUND\r\nTime used:   0.0 secs\r\nMemory used: 0.0 Mb (40412 bytes)\r\nWrite sensitivity analysis report to 'sensit.sen'...\r\n"},"1":{"name":"stdout","text":"GLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   1\n\nProblem:    \nObjective:  obj = 3500.5 (MAXimum)\n\n   No. Row name     St      Activity         Slack   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 c_u_cts(1)_  NU    3001.00000        .               -Inf     2000.00000       -.50000    3000.00000 x(subs)\n                                            .50000    3001.00000     3500.00000          +Inf    3750.00000 c_u_cts(3)_\n\n     2 c_u_cts(2)_  NU    1000.00000        .               -Inf      501.00000      -2.00000    2502.50000 c_u_cts(3)_\n                                           2.00000    1000.00000     1500.50000          +Inf    4501.50000 x(subs)\n\n     3 c_u_cts(3)_  BS    2001.00000     499.00000          -Inf     1000.00000       -.50000    2500.00000 c_u_cts(1)_\n                                            .         2500.00000           +Inf       2.00000    7502.50000 c_u_cts(2)_\n\n     4 c_e_ONE_VAR_CONSTANT\n                    NS       1.00000        .            1.00000         .               -Inf    3500.50000 ONE_VAR_CONSTANT\n                                            .            1.00000           +Inf          +Inf    3500.50000\n\nGLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   2\n\nProblem:    \nObjective:  obj = 3500.5 (MAXimum)\n\n   No. Column name  St      Activity      Obj coef   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 x(subs)      BS    1001.00000      -2.50000        .         -1000.00000      -3.00000    3000.00000 c_u_cts(1)_\n                                            .               +Inf     1999.00000      -1.50000    4501.50000 c_u_cts(2)_\n\n     2 x(toys)      BS    2001.00000       3.00000        .          1000.00000       2.50000    2500.00000 c_u_cts(1)_\n                                            .               +Inf     2500.00000       5.00000    7502.50000 c_u_cts(2)_\n\n     3 ONE_VAR_CONSTANT\n                    BS       1.00000        .             .             1.00000          -Inf          -Inf\n                                            .               +Inf        1.00000          +Inf          +Inf\n\nEnd of report\n\n"}},"pos":33,"start":1673891292938,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"05711e","input":"(b) Run the model with RHS of coefficient 1 at 3001 rather than 3000. The shadow price for subassembly A is \\$0.50, which is the maximum premium that the company should be willing to pay.  See the code in the next cell.","metadata":{"hidden":true},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"057d7f","input":"# *Self-Assessment: Formulate, Solve, and Perform Sensitivity #1*","metadata":{"heading_collapsed":true},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"42f80a","input":"(a) See the code and output for the cell below.  The maximum profit is \\$3500, obtained when 2000 toys and 1000 subassemlies are produced per day.\n\n(f) From the \"Obj coef range\" in the bottom table of the GLPK sensitivty report, the allowable range of the unit profit for toys is \\$2.50 to \\$5 whereas that for subassemblies is -\\$3 to -\\$1.50.","metadata":{"hidden":true},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"5fccff","input":"(a) This is pretty simple.  Add an extra constraint that $x_1 \\leq 2500$.  The maximum profit is still \\$3500, obtained when 2000 toys and 1000 subassemlies are produced per day.  See the code cell below.\n\nSee cells befow for parts b and f.","metadata":{"hidden":true},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"67ae46","input":"(c) See the code in the following cells and the associated output.\n\n(b) From the column labeled \"Marginal\" in the top table of the GLPK sensitivity report below, the shadow prices are 0.667 for resource 1 and 1 for resource 2.","metadata":{"hidden":true},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"6914bf","input":"# *Self Assessment: Investment Allocation*","metadata":{"heading_collapsed":true},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"6bdb62","input":"# *Self-Assessment: Formulate, Solve, and Perform Sensitivity #2*","metadata":{"heading_collapsed":true},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"72c210","input":"Let $F$ be the set of factories and let $C$ be the set of customers.\n\nDecision Variables:  let $x_{f,c}$ be the number of units shipped from factory $f \\in F$ to customer $c \\in C$\n\nConstants:  \n- $q_{f,c}$ is the shipping cost per unit between factory $f \\in F$ and customer $c \\in C$\n- $d_c$ is the number of units demanded by customer $c \\in C$\n- $s_f$ is the number of units supplied by factory $f \\in F$\n\nObjective Function:  minimize $ Cost = \\displaystyle \\sum_{f \\in F} \\sum_{c \\in C} q_{f,c} x_{f,c}$\n\nConstraints:\n- Supply: $ \\displaystyle \\sum_{c \\in C} x_{f,c} = s_f, \\mbox{ for each } f \\in F$\n- Demand: $ \\displaystyle \\sum_{f \\in F} x_{f,c} = d_c, \\mbox{ for each } c \\in C$\n- Nonnegativity: $x_{f,c} \\geq 0$ for each $f \\in F, c \\in C$","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"79cd5c","input":"# Lesson 02 - Self-Assessment Solutions","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"83b939","input":"# *Self Assessment: Graphical Exploration of Sensitivity*","metadata":{"heading_collapsed":true},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"89b446","input":"Answer: False","metadata":{"hidden":true},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"936c18","input":"# *Self Assessment: Supply and Demand Problem*","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"9bd417","input":"Answer: True","metadata":{"hidden":true},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"9c8b18","input":"# *Self Assessment: Positive Shadow Price*","metadata":{"heading_collapsed":true},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"9dd9fd","input":"# *Self Assessment: Changing Parameters*","metadata":{"heading_collapsed":true},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"9f40cf","input":"(f) As shown in the sensitivity report, the shadow price is \\$0.50 for subassembly A and \\$2 for subassembly B. According to the activity range, the allowable range for the right-hand side of the subassembly A constraint is 2,000 to 3,500. The allowable range for the right-hand side of the subassembly B constraint is 500 to 1,500.","metadata":{"hidden":true},"pos":32,"type":"cell"}
{"cell_type":"markdown","id":"a02037","input":"# *Self-Assessment: Solve and Perform Sensitivity*","metadata":{"heading_collapsed":true},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"a27994","input":"Answer: True","metadata":{"hidden":true},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"a635be","input":"# *Self Assessment: Allowable Range (Objective Coef)*","metadata":{"heading_collapsed":true},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"aa83de","input":"(a) Optimal $Z=22$ occurs when $x=6$ and $y=2$.\n\n<img src=\"images/HW_exploration_a.png\" width=\"640\"> \n\n(b) Shadow price $=23-22=1$. The new optimal is $Z=23$ with coordinates $x=4$ and $y=3$.\n\n<img src=\"images/HW_exploration_b.png\" width=\"640\"> \n\n(c) The allowable range for resource 2 is $10 \\leq b_2 \\leq 15$. \n\nThe lower bound is 10, as shown here.\n\n<img src=\"images/HW_exploration_c2.png\" width=\"640\"> \n\nThe upper bound is 15, as shown here.\n\n<img src=\"images/HW_exploration_c1.png\" width=\"640\"> \n\n(d) The allowable range for the unit profit of activity 2 is $4 \\leq c_2 \\leq 6$. \n\nThe lower bound is 4, as shown here.\n\n<img src=\"images/HW_exploration_d2.png\" width=\"640\"> \n\nThe upper bound is 6, as shown here.\n\n<img src=\"images/HW_exploration_d1.png\" width=\"640\"> ","metadata":{"hidden":true},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"df4389","input":"# *Self Assessment: A Holiday Factory*","metadata":{"heading_collapsed":true},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"e03949","input":"Shadow Prices\n* Resource 1: 0.66667\n* Resource 2: 1.00000\n\nAllowable Range for Right Hand Side of Constraints\n* Resource 1: -108 to 36\n* Resource 2: 24 to $\\infty$\n\n\nAllowable Range Objective Function Coefficients\n* Coefficient 1: 4.63636 to $\\infty$\n* Coefficient 2: $-\\infty$ to 4.3333\n* Coefficient 3: -2.33333 to 1.66667\n* Coefficient 4: $-\\infty$ to 3.66667","metadata":{"hidden":true},"pos":21,"type":"cell"}
{"id":0,"time":1673891265477,"type":"user"}
{"last_load":1673891265656,"type":"file"}