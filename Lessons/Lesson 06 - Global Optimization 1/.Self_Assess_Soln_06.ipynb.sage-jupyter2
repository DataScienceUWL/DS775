{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-1c8bde11-dbac-401c-b2e5-201be90003d5.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":true}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4791b8","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8932ea","input":"class KnapsackProblem(Annealer):\n\n    # pass extra data (the distance matrix) into the constructor\n    def __init__(self, state, weights, values, max_weight, num_items):\n        # state is the groups assignment\n        self.values = values\n        self.weights = ...\n        super(KnapsackProblem, self).__init__(state)  # important!\n\n    def move(self):\n        \"\"\"Move one item to a new group\"\"\"\n        x = self.state\n        num_items = self.num_items\n        new_x = x.copy()  #randomly flip one bit\n        bit_to_flip = np.random.randint(num_items)\n        new_x[bit_to_flip] = not new_x[bit_to_flip]\n        compute the total weight of items in new_x\n        if total_weight <= self.max_weight:\n            self.state = new_x\n        \n    \n    def energy(self):\n        \"\"\"Compute max difference between groups\"\"\"\n        return negated tot_value of items in self.state\n        #return group_fitness(self.state, self.values, self.num_groups)\n\ninitial_groups = groups # defined in previous cell\nvbp = ValueBalancingProblem(initial_groups, values, num_groups, debug = False)\n\n# auto scheduling times are VERY approximate\nvbp.set_schedule(vbp.auto(minutes=.2)) #set approximate time to find results\n\n# uncomment the following 3 lines to manually control the temperatu\n\nbest_groups, best_fitness = vbp.anneal()\n\nprint(f'best fitness {best_fitness}')\nprint(f'The objective function was evaluated {vbp.steps:.0f} times.')","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"67eef6","input":"# imports\nimport numpy as np\nimport pandas as pd\nfrom simanneal import Annealer\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nfrom scipy.optimize import minimize\nfrom skopt import gp_minimize\nfrom skopt.plots import plot_convergence\nimport random\nfrom warnings import catch_warnings, simplefilter, filterwarnings","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"e1fd37","input":"filterwarnings('ignore') # suppress some of the warnings from B.O.\n\nnp.random.seed(42)\n\n# same \"bumpy\" function as in simulated annealing, just written differently\n# assumes xy is a list or array-like with xy = [x, y]\ndef booth(xy):\n    x = xy[0]\n    y = xy[1]\n    obj = (x+2*y-7)**2 + (2*x+y-5)**2\n    return obj\n\n#call the optimization.\nres = gp_minimize(booth,                  # the function to minimize\n                  [(-10, 10)]*2,      # the bounds on each dimension of x\n                 acq_func=\"EI\",      # the acquisition function \n                  n_calls=20,         # the number of evaluations of the objective function\n                  n_random_starts=5,  # the number of random initialization points\n                  random_state=42)   # the random seed\n\nprint(f'The minimum value of f(x) is {res.fun:0.4f} and occurs at x={res.x[0]:0.4f}, y={res.x[1]:0.4f}')\n\nfig = plt.figure(figsize=(10,6)) # we initialize the plot so we can control dimensions\nax = fig.add_axes\nplot_convergence(res,ax);","output":{"0":{"name":"stdout","output_type":"stream","text":"The minimum value of f(x) is 0.0000 and occurs at x=1.0000, y=3.0000\n"},"1":{"data":{"image/png":"44b9d2c31f8d4fd603410003d4f601caeae25faa","text/plain":"<Figure size 720x432 with 1 Axes>"},"exec_count":13,"metadata":{"image/png":{"height":386,"width":613}},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"ea782f","input":"import numpy as np\nimport pandas as pd\n\n# the objective function\ndef group_fitness(groups, values, num_groups):\n    sums = np.array([ sum( values[ groups == i] ) for i in range(num_groups) ])\n    return max(sums)-min(sums)\n\n# the move function\ndef change_group(groups, num_groups, debug=False):\n    #get the unique groups\n    choices = np.arange(0,num_groups)\n    #get a copy of the groups\n    new_groups = groups.copy()    \n    #select item to change\n    switch = np.random.randint(0, groups.shape[0])\n    #select new group value\n    new_group = np.random.choice(choices)\n    while groups[switch] == new_group:\n        new_group = np.random.choice(choices)\n    new_groups[switch] = new_group    \n    if debug:\n        print(f'The item at {switch} should change to {new_group}')\n        print(f'The initial groups are: {groups} and the changed groups are {new_groups}')\n    return new_groups\n\n# simulated annealing\ndef group_balance_anneal(values, num_groups, max_no_improve, init_temp, alpha, debug=False):\n    \n    num_items = values.shape[0]\n    current_groups = np.random.randint(low=0,high=num_groups, size=num_items)\n    current_fitness =  group_fitness(current_groups, values, num_groups)\n\n    best_fitness = current_fitness\n    best_groups = current_groups\n        \n    num_moves_no_improve = 0\n    iterations = 0\n    acceptances = 0\n    temp = init_temp\n    \n    history = np.array([[iterations, current_fitness, best_fitness]])\n    \n    while (num_moves_no_improve < max_no_improve):\n        iterations += 1\n        num_moves_no_improve += 1\n        new_groups = change_group(current_groups, num_groups, debug)\n        new_fitness = group_fitness(new_groups, values, num_groups)\n        delta = current_fitness - new_fitness\n        prob = np.exp(min(delta,0) / temp)\n        if debug:\n            print(f'Old fitness: {current_fitness}, New fitness {new_fitness}')\n        if new_fitness < current_fitness or np.random.uniform() < prob:\n            acceptances += 1\n            current_fitness = new_fitness\n            current_groups = new_groups\n            if current_fitness < best_fitness:\n                best_groups = current_groups\n                best_fitness = current_fitness\n                num_moves_no_improve = 0\n            \n        temp *= alpha\n        \n        history = np.vstack( (history, np.array([[iterations,current_fitness,best_fitness]]) ) )\n        \n    print(f'acceptance rate: {acceptances/iterations:0.2f}')\n        \n    return best_fitness, best_groups, iterations, history","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"4d3f1f","input":"# run and plot for small test problem\n\nvalues = np.array([5,10,23,8])\ngroups = np.array([0,1,0,1])\n\nnum_groups = 2\nmax_no_improve = 10\ninit_temp = 100\nalpha = 0.99\nbest_fitness, best_groups, iterations, history = group_balance_anneal(values, num_groups, max_no_improve, init_temp, alpha)\n\nprint(f\"The minimized maximum difference between groups is {best_fitness:.0f}\")\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nfig = plt.figure(figsize=(8, 6))\nline_min, = plt.plot(history[:,0], history[:,1], label='Curr. Districts.',color='red')\nline_curr, = plt.plot(history[:,0],history[:,2], label='Best. Districts.')\nplt.xlabel('Generation')\nplt.ylabel('Num Districts')\nplt.legend(handles=[line_curr, line_min])\nplt.title('Max difference of summed values: {:d}'.format(int(best_fitness)));","output":{"0":{"name":"stdout","output_type":"stream","text":"acceptance rate: 1.00\nThe minimized maximum difference between groups is 0\n"},"1":{"data":{"image/png":"acdbf0ff18e9c7951100d37260bc8c9f50e89039","text/plain":"<Figure size 576x432 with 1 Axes>"},"exec_count":37,"metadata":{"image/png":{"height":386,"width":494}},"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"877ec5","input":"# run and plot for 1000 item / 4 group problem\n\n# the weird construction here guarantees that 4 groups can be perfectly balanced so the global min is zero\n\nnp.random.seed(123)\n\ntot_num_items = 1000 # should be divisible by 4\nnum_items = int(tot_num_items / 4)\nnum_groups = 4\n\nvalues = np.random.randint(10,100,size=num_items)\nvalues = np.hstack([values,values,values,values])\ngroups = np.random.randint(num_groups,size=tot_num_items)\n\nnp.random.seed()\n\nmax_no_improve = 10000\ninit_temp = 5000\nalpha = 0.999\nbest_fitness, best_groups, iterations, history = group_balance_anneal(values, num_groups, max_no_improve, init_temp, alpha)\n\nprint(f\"The minimized maximum difference between groups is {best_fitness:.0f}\")\n\nprint(f'The objective function was evaluated {iterations:.0f} times')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nfig = plt.figure(figsize=(8, 6))\nline_min, = plt.plot(history[:,0], history[:,1], label='Curr. Max Diff',color='red')\nline_curr, = plt.plot(history[:,0],history[:,2], label='Best Max Diff')\nplt.xlabel('Generation')\nplt.ylabel('Num Districts')\nplt.legend(handles=[line_curr, line_min])\nplt.title('Max difference of summed values: {:d}'.format(int(best_fitness)));","output":{"0":{"name":"stdout","output_type":"stream","text":"acceptance rate: 0.29\nThe minimized maximum difference between groups is 7\nThe objective function was evaluated 16438 times\n"},"1":{"data":{"image/png":"efcbb41e6b9c7e331e2c3386e87cae164b0959c8","text/plain":"<Figure size 576x432 with 1 Axes>"},"exec_count":38,"metadata":{"image/png":{"height":386,"width":506}},"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"66fed2","input":"import numpy as np\nimport pandas as pd\n\n# the objective function\ndef group_fitness(groups,values,num_groups):\n    # groups must be a numpy array for this to work\n    sums = np.array([ sum( values[ groups == i] ) for i in range(num_groups) ])\n    return max(sums)-min(sums)\n\n# the move function\ndef change_group(groups, num_groups, debug=False):\n    #get the unique groups\n    choices = np.arange(0,num_groups)\n    #get a copy of the groups\n    new_groups = groups.copy()    \n    #select item to change\n    switch = np.random.randint(0, groups.shape[0])\n    #select new group value\n    new_group = np.random.choice(choices)\n    while groups[switch] == new_group:\n        new_group = np.random.choice(choices)\n    new_groups[switch] = new_group    \n    if debug:\n        print(f'The item at {switch} should change to {new_group}')\n        print(f'The initial groups are: {groups} and the changed groups are {new_groups}')\n    return new_groups\n\n# the weird construction here guarantees that 4 groups can be perfectly balanced so the global min is zero\n\nnp.random.seed(123)\n\ntot_num_items = 1000 # should be divisible by 4\nnum_items = int(tot_num_items / 4)\nnum_groups = 4\n\nvalues = np.random.randint(10,100,size=num_items)\nvalues = np.hstack([values,values,values,values])\ngroups = np.random.randint(num_groups,size=1000)\n\nnp.random.seed()","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"0ee409","input":"# must execute the cell labeled \"load problem data and define objective and move functions\"\n# in the previous self-assessment\n\nfrom simanneal import Annealer\n\nclass ValueBalancingProblem(Annealer):\n\n    # pass extra data (the distance matrix) into the constructor\n    def __init__(self, state, values, num_groups, debug = False):\n        # state is the groups assignment\n        self.values = values\n        self.num_groups = num_groups\n        self.debug = debug\n        super(ValueBalancingProblem, self).__init__(state)  # important!\n\n    def move(self):\n        \"\"\"Move one item to a new group\"\"\"\n        self.state = change_group( self.state, self.num_groups, debug = self.debug)\n    \n    def energy(self):\n        \"\"\"Compute max difference between groups\"\"\"\n        return group_fitness(self.state, self.values, self.num_groups)\n\ninitial_groups = groups # defined in previous cell\nvbp = ValueBalancingProblem(initial_groups, values, num_groups, debug = False)\n\n# auto scheduling times are VERY approximate\nvbp.set_schedule(vbp.auto(minutes=.2)) #set approximate time to find results\n\n# uncomment the following 3 lines to manually control the temperatu\n\nbest_groups, best_fitness = vbp.anneal()\n\nprint(f'best fitness {best_fitness}')\nprint(f'The objective function was evaluated {vbp.steps:.0f} times.')","output":{"0":{"name":"stderr","output_type":"stream","text":" Temperature        Energy    Accept   Improve     Elapsed   Remaining\n\r     0.00000       2159.00                         0:00:00            \r"},"1":{"name":"stderr","output_type":"stream","text":"\r    46.00000        287.00    50.70%    22.60%     0:00:01     0:00:07\r\r"},"10":{"name":"stderr","output_type":"stream","text":"\r  1600.00000       2296.00    98.75%    42.40%     0:00:03     0:00:04\r\r"},"100":{"name":"stderr","output_type":"stream","text":"\r    11.56317         50.00    12.30%     5.14%     0:00:10     0:00:04\r\r"},"101":{"name":"stderr","output_type":"stream","text":"\r    10.79792         18.00    11.35%     5.14%     0:00:10     0:00:04\r\r"},"102":{"name":"stderr","output_type":"stream","text":"\r    10.08332          4.00     8.24%     3.92%     0:00:10     0:00:04\r\r"},"103":{"name":"stderr","output_type":"stream","text":"\r     9.41601         33.00     7.84%     3.38%     0:00:10     0:00:03\r\r"},"104":{"name":"stderr","output_type":"stream","text":"\r     8.79286         26.00     9.73%     4.59%     0:00:11     0:00:03\r\r"},"105":{"name":"stderr","output_type":"stream","text":"\r     8.21095         20.00     9.46%     4.05%     0:00:11     0:00:03\r\r"},"106":{"name":"stderr","output_type":"stream","text":"\r     7.66755         27.00    10.95%     4.73%     0:00:11     0:00:03\r\r"},"107":{"name":"stderr","output_type":"stream","text":"\r     7.16011         17.00     6.76%     2.57%     0:00:11     0:00:03\r\r"},"108":{"name":"stderr","output_type":"stream","text":"\r     6.68626         20.00     7.30%     3.11%     0:00:11     0:00:03\r\r"},"109":{"name":"stderr","output_type":"stream","text":"\r     6.24376         25.00     1.35%     0.68%     0:00:11     0:00:03\r\r"},"11":{"name":"stderr","output_type":"stream","text":"\r  1100.00000       1426.00    97.35%    42.15%     0:00:04     0:00:04\r\r"},"110":{"name":"stderr","output_type":"stream","text":"\r     5.83055          8.00     4.32%     2.30%     0:00:11     0:00:03\r\r"},"111":{"name":"stderr","output_type":"stream","text":"\r     5.44469         10.00     4.86%     2.70%     0:00:12     0:00:02\r\r"},"112":{"name":"stderr","output_type":"stream","text":"\r     5.08436         14.00     2.84%     1.35%     0:00:12     0:00:02\r\r"},"113":{"name":"stderr","output_type":"stream","text":"\r     4.74788         35.00     4.32%     1.89%     0:00:12     0:00:02\r\r"},"114":{"name":"stderr","output_type":"stream","text":"\r     4.43366          6.00     1.76%     0.81%     0:00:12     0:00:02\r\r"},"115":{"name":"stderr","output_type":"stream","text":"\r     4.14025         17.00     2.43%     0.81%     0:00:12     0:00:02\r\r"},"116":{"name":"stderr","output_type":"stream","text":"\r     3.86625         24.00     2.16%     0.95%     0:00:12     0:00:02\r\r"},"117":{"name":"stderr","output_type":"stream","text":"\r     3.61038         14.00     3.38%     1.35%     0:00:12     0:00:02\r\r"},"118":{"name":"stderr","output_type":"stream","text":"\r     3.37144         20.00     2.57%     1.08%     0:00:13     0:00:01\r\r"},"119":{"name":"stderr","output_type":"stream","text":"\r     3.14832         11.00     1.76%     0.81%     0:00:13     0:00:01\r\r"},"12":{"name":"stderr","output_type":"stream","text":"\r   730.00000       2728.00    96.25%    40.20%     0:00:04     0:00:04\r\r"},"120":{"name":"stderr","output_type":"stream","text":"\r     2.93997          8.00     1.08%     0.27%     0:00:13     0:00:01\r\r"},"121":{"name":"stderr","output_type":"stream","text":"\r     2.74540          8.00     1.35%     0.41%     0:00:13     0:00:01\r\r"},"122":{"name":"stderr","output_type":"stream","text":"\r     2.56371         18.00     0.14%     0.00%     0:00:13     0:00:01\r\r"},"123":{"name":"stderr","output_type":"stream","text":"\r     2.39405          5.00     1.22%     0.54%     0:00:13     0:00:01\r\r"},"124":{"name":"stderr","output_type":"stream","text":"\r     2.23561          5.00     0.00%     0.00%     0:00:13     0:00:01\r\r"},"125":{"name":"stderr","output_type":"stream","text":"\r     2.08766          5.00     0.00%     0.00%     0:00:14     0:00:00\r\r"},"126":{"name":"stderr","output_type":"stream","text":"\r     1.94950          5.00     0.00%     0.00%     0:00:14     0:00:00\r\r"},"127":{"name":"stderr","output_type":"stream","text":"\r     1.82048          5.00     0.00%     0.00%     0:00:14     0:00:00\r\r"},"128":{"name":"stderr","output_type":"stream","text":"\r     1.70000          5.00     0.00%     0.00%     0:00:14     0:00:00\r\r"},"129":{"name":"stdout","output_type":"stream","text":"best fitness 4\nThe objective function was evaluated 74000 times.\n"},"13":{"name":"stderr","output_type":"stream","text":"\r   490.00000        772.00    94.80%    41.65%     0:00:04     0:00:03\r\r"},"14":{"name":"stderr","output_type":"stream","text":"\r   330.00000        433.00    92.20%    38.25%     0:00:05     0:00:03\r\r"},"15":{"name":"stderr","output_type":"stream","text":"\r   220.00000        458.00    86.30%    37.40%     0:00:05     0:00:03\r\r"},"16":{"name":"stderr","output_type":"stream","text":"\r   150.00000        143.00    81.40%    35.15%     0:00:06     0:00:03\r\r"},"17":{"name":"stderr","output_type":"stream","text":"\r   100.00000         97.00    76.05%    33.70%     0:00:06     0:00:02\r\r"},"18":{"name":"stderr","output_type":"stream","text":"\r    67.00000        285.00    66.95%    28.05%     0:00:06     0:00:02\r\r"},"19":{"name":"stderr","output_type":"stream","text":"\r    45.00000        212.00    52.55%    23.00%     0:00:07     0:00:02\r\r"},"2":{"name":"stderr","output_type":"stream","text":"\r    69.00000        325.00    63.50%    28.25%     0:00:01     0:00:06\r\r"},"20":{"name":"stderr","output_type":"stream","text":"\r    30.00000        231.00    40.70%    17.40%     0:00:07     0:00:01\r\r"},"21":{"name":"stderr","output_type":"stream","text":"\r    20.00000         54.00    27.65%    11.95%     0:00:07     0:00:01\r\r"},"22":{"name":"stderr","output_type":"stream","text":"\r    13.00000         90.00    14.20%     6.30%     0:00:08     0:00:01\r\r"},"23":{"name":"stderr","output_type":"stream","text":"\r     8.70000         22.00     7.85%     4.05%     0:00:08     0:00:00\r\r"},"24":{"name":"stderr","output_type":"stream","text":"\r     5.80000         20.00     4.80%     1.95%     0:00:08     0:00:00\r\r"},"25":{"name":"stderr","output_type":"stream","text":"\r     3.90000         14.00     1.55%     0.70%     0:00:08     0:00:00\r\r"},"26":{"name":"stderr","output_type":"stream","text":"\r     2.60000          7.00     0.70%     0.25%     0:00:09    -1:59:59\r\r"},"27":{"name":"stderr","output_type":"stream","text":"\r     1.70000          7.00     0.00%     0.00%     0:00:09    -1:59:59\r\r"},"28":{"name":"stderr","output_type":"stream","text":" Temperature        Energy    Accept   Improve     Elapsed   Remaining\n\r  1600.00000          7.00                         0:00:00            \r"},"29":{"name":"stderr","output_type":"stream","text":"\r  1494.11241        827.00    98.24%    41.35%     0:00:00     0:00:11\r\r"},"3":{"name":"stderr","output_type":"stream","text":"\r   100.00000         63.00    75.25%    32.45%     0:00:01     0:00:06\r\r"},"30":{"name":"stderr","output_type":"stream","text":"\r  1395.23243       1744.00    97.57%    40.54%     0:00:00     0:00:11\r\r"},"31":{"name":"stderr","output_type":"stream","text":"\r  1302.89630       1191.00    97.70%    40.95%     0:00:00     0:00:12\r\r"},"32":{"name":"stderr","output_type":"stream","text":"\r  1216.67095       1009.00    97.97%    41.62%     0:00:00     0:00:11\r\r"},"33":{"name":"stderr","output_type":"stream","text":"\r  1136.15198        414.00    97.57%    40.95%     0:00:01     0:00:11\r\r"},"34":{"name":"stderr","output_type":"stream","text":"\r  1060.96173       1414.00    97.84%    42.70%     0:00:01     0:00:11\r\r"},"35":{"name":"stderr","output_type":"stream","text":"\r   990.74755       1189.00    97.43%    41.89%     0:00:01     0:00:11\r\r"},"36":{"name":"stderr","output_type":"stream","text":"\r   925.18013       1303.00    97.84%    40.14%     0:00:01     0:00:11\r\r"},"37":{"name":"stderr","output_type":"stream","text":"\r   863.95195       1087.00    96.62%    41.89%     0:00:01     0:00:11\r\r"},"38":{"name":"stderr","output_type":"stream","text":"\r   806.77583       1656.00    97.03%    41.62%     0:00:01     0:00:11\r\r"},"39":{"name":"stderr","output_type":"stream","text":"\r   753.38361        762.00    95.00%    40.81%     0:00:01     0:00:11\r\r"},"4":{"name":"stderr","output_type":"stream","text":"\r   150.00000        660.00    82.05%    34.55%     0:00:01     0:00:06\r\r"},"40":{"name":"stderr","output_type":"stream","text":"\r   703.52487       2021.00    96.49%    38.92%     0:00:01     0:00:10\r\r"},"41":{"name":"stderr","output_type":"stream","text":"\r   656.96577       2407.00    96.62%    38.38%     0:00:02     0:00:10\r\r"},"42":{"name":"stderr","output_type":"stream","text":"\r   613.48795       1200.00    96.08%    41.22%     0:00:02     0:00:10\r\r"},"43":{"name":"stderr","output_type":"stream","text":"\r   572.88747        622.00    95.41%    40.95%     0:00:02     0:00:10\r\r"},"44":{"name":"stderr","output_type":"stream","text":"\r   534.97392        874.00    96.22%    41.89%     0:00:02     0:00:10\r\r"},"45":{"name":"stderr","output_type":"stream","text":"\r   499.56948        776.00    93.78%    41.22%     0:00:02     0:00:10\r\r"},"46":{"name":"stderr","output_type":"stream","text":"\r   466.50810        537.00    94.19%    40.27%     0:00:02     0:00:10\r\r"},"47":{"name":"stderr","output_type":"stream","text":"\r   435.63472       1616.00    94.05%    38.92%     0:00:02     0:00:10\r\r"},"48":{"name":"stderr","output_type":"stream","text":"\r   406.80452        883.00    94.59%    38.78%     0:00:02     0:00:10\r\r"},"49":{"name":"stderr","output_type":"stream","text":"\r   379.88230       1361.00    92.70%    38.65%     0:00:03     0:00:09\r\r"},"5":{"name":"stderr","output_type":"stream","text":"\r   220.00000        413.00    88.20%    37.60%     0:00:02     0:00:06\r\r"},"50":{"name":"stderr","output_type":"stream","text":"\r   354.74179        776.00    93.38%    39.32%     0:00:03     0:00:09\r\r"},"51":{"name":"stderr","output_type":"stream","text":"\r   331.26507       1233.00    92.97%    37.97%     0:00:03     0:00:09\r\r"},"52":{"name":"stderr","output_type":"stream","text":"\r   309.34203        864.00    91.22%    39.86%     0:00:03     0:00:09\r\r"},"53":{"name":"stderr","output_type":"stream","text":"\r   288.86985       1033.00    92.16%    39.05%     0:00:03     0:00:09\r\r"},"54":{"name":"stderr","output_type":"stream","text":"\r   269.75252       1197.00    87.70%    36.22%     0:00:03     0:00:09\r\r"},"55":{"name":"stderr","output_type":"stream","text":"\r   251.90036       1147.00    89.86%    37.43%     0:00:03     0:00:09\r\r"},"56":{"name":"stderr","output_type":"stream","text":"\r   235.22966        591.00    88.11%    36.62%     0:00:03     0:00:09\r\r"},"57":{"name":"stderr","output_type":"stream","text":"\r   219.66222       1278.00    89.19%    38.24%     0:00:04     0:00:09\r\r"},"58":{"name":"stderr","output_type":"stream","text":"\r   205.12503        439.00    87.30%    38.11%     0:00:04     0:00:09\r\r"},"59":{"name":"stderr","output_type":"stream","text":"\r   191.54991        502.00    86.62%    37.16%     0:00:04     0:00:09\r\r"},"6":{"name":"stderr","output_type":"stream","text":"\r   330.00000        862.00    91.90%    39.00%     0:00:02     0:00:05\r\r"},"60":{"name":"stderr","output_type":"stream","text":"\r   178.87319        391.00    85.54%    36.89%     0:00:04     0:00:08\r\r"},"61":{"name":"stderr","output_type":"stream","text":"\r   167.03540        831.00    82.57%    36.89%     0:00:04     0:00:08\r\r"},"62":{"name":"stderr","output_type":"stream","text":"\r   155.98104        251.00    85.68%    37.97%     0:00:04     0:00:08\r\r"},"63":{"name":"stderr","output_type":"stream","text":"\r   145.65826        477.00    84.05%    35.27%     0:00:04     0:00:08\r\r"},"64":{"name":"stderr","output_type":"stream","text":"\r   136.01863        222.00    82.30%    35.95%     0:00:04     0:00:08\r\r"},"65":{"name":"stderr","output_type":"stream","text":"\r   127.01695         76.00    79.05%    32.43%     0:00:05     0:00:08\r\r"},"66":{"name":"stderr","output_type":"stream","text":"\r   118.61100        519.00    78.78%    33.65%     0:00:05     0:00:08\r\r"},"67":{"name":"stderr","output_type":"stream","text":"\r   110.76136        262.00    77.84%    31.62%     0:00:05     0:00:08\r\r"},"68":{"name":"stderr","output_type":"stream","text":"\r   103.43120        374.00    76.22%    32.84%     0:00:05     0:00:08\r\r"},"69":{"name":"stderr","output_type":"stream","text":"\r    96.58615        444.00    75.95%    32.84%     0:00:06     0:00:08\r\r"},"7":{"name":"stderr","output_type":"stream","text":"\r   500.00000        941.00    94.50%    40.85%     0:00:02     0:00:05\r\r"},"70":{"name":"stderr","output_type":"stream","text":"\r    90.19410        229.00    73.51%    31.35%     0:00:06     0:00:08\r\r"},"71":{"name":"stderr","output_type":"stream","text":"\r    84.22508        187.00    70.00%    31.22%     0:00:06     0:00:08\r\r"},"72":{"name":"stderr","output_type":"stream","text":"\r    78.65108        320.00    69.59%    29.19%     0:00:06     0:00:08\r\r"},"73":{"name":"stderr","output_type":"stream","text":"\r    73.44598         73.00    66.76%    30.00%     0:00:06     0:00:07\r\r"},"74":{"name":"stderr","output_type":"stream","text":"\r    68.58534        381.00    66.76%    28.38%     0:00:06     0:00:07\r\r"},"75":{"name":"stderr","output_type":"stream","text":"\r    64.04638        123.00    65.95%    29.86%     0:00:06     0:00:07\r\r"},"76":{"name":"stderr","output_type":"stream","text":"\r    59.80781        110.00    61.22%    27.16%     0:00:06     0:00:07\r\r"},"77":{"name":"stderr","output_type":"stream","text":"\r    55.84974        454.00    57.57%    25.14%     0:00:07     0:00:07\r\r"},"78":{"name":"stderr","output_type":"stream","text":"\r    52.15362        315.00    59.32%    26.22%     0:00:07     0:00:07\r\r"},"79":{"name":"stderr","output_type":"stream","text":"\r    48.70211        276.00    57.16%    26.89%     0:00:07     0:00:06\r\r"},"8":{"name":"stderr","output_type":"stream","text":"\r   750.00000       1560.00    96.30%    41.60%     0:00:03     0:00:05\r\r"},"80":{"name":"stderr","output_type":"stream","text":"\r    45.47901         96.00    52.97%    24.19%     0:00:07     0:00:06\r\r"},"81":{"name":"stderr","output_type":"stream","text":"\r    42.46922         44.00    49.05%    21.89%     0:00:07     0:00:06\r\r"},"82":{"name":"stderr","output_type":"stream","text":"\r    39.65862        165.00    44.05%    19.86%     0:00:07     0:00:06\r\r"},"83":{"name":"stderr","output_type":"stream","text":"\r    37.03402        268.00    43.65%    20.41%     0:00:07     0:00:06\r\r"},"84":{"name":"stderr","output_type":"stream","text":"\r    34.58312         12.00    41.49%    19.86%     0:00:07     0:00:06\r\r"},"85":{"name":"stderr","output_type":"stream","text":"\r    32.29442         82.00    42.03%    17.70%     0:00:07     0:00:06\r\r"},"86":{"name":"stderr","output_type":"stream","text":"\r    30.15718        216.00    43.78%    18.51%     0:00:08     0:00:05\r\r"},"87":{"name":"stderr","output_type":"stream","text":"\r    28.16139         32.00    37.30%    16.35%     0:00:08     0:00:05\r\r"},"88":{"name":"stderr","output_type":"stream","text":"\r    26.29767        132.00    37.70%    16.76%     0:00:08     0:00:05\r\r"},"89":{"name":"stderr","output_type":"stream","text":"\r    24.55730         44.00    35.95%    17.43%     0:00:08     0:00:05\r\r"},"9":{"name":"stderr","output_type":"stream","text":"\r  1100.00000       1535.00    97.70%    40.90%     0:00:03     0:00:04\r\r"},"90":{"name":"stderr","output_type":"stream","text":"\r    22.93211         73.00    37.03%    16.08%     0:00:08     0:00:05\r\r"},"91":{"name":"stderr","output_type":"stream","text":"\r    21.41446         68.00    27.84%    12.84%     0:00:08     0:00:05\r\r"},"92":{"name":"stderr","output_type":"stream","text":"\r    19.99726         59.00    28.65%    12.43%     0:00:08     0:00:05\r\r"},"93":{"name":"stderr","output_type":"stream","text":"\r    18.67385         39.00    24.32%    10.54%     0:00:09     0:00:05\r\r"},"94":{"name":"stderr","output_type":"stream","text":"\r    17.43802         72.00    21.35%     9.05%     0:00:09     0:00:04\r\r"},"95":{"name":"stderr","output_type":"stream","text":"\r    16.28397         59.00    20.54%     9.86%     0:00:09     0:00:04\r\r"},"96":{"name":"stderr","output_type":"stream","text":"\r    15.20630         65.00    19.86%     8.38%     0:00:09     0:00:04\r\r"},"97":{"name":"stderr","output_type":"stream","text":"\r    14.19995         72.00    19.19%     8.38%     0:00:09     0:00:04\r\r"},"98":{"name":"stderr","output_type":"stream","text":"\r    13.26021         41.00    14.46%     7.03%     0:00:09     0:00:04\r\r"},"99":{"name":"stderr","output_type":"stream","text":"\r    12.38265         19.00    15.54%     6.89%     0:00:09     0:00:04\r\r"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"a974d2","input":"# Self-Assessment Solution for Simulated Annealing with Continuous Variables\n\ndef f(xy):\n    obj = 0.2 + sum(xy**2 - 0.1*np.cos(6*np.pi*xy))\n    return obj\n\ndef gauss_move(xy,sigma):\n    # xy is a 1 by dim numpy array\n    # sigma is the standard deviation for the normal distribution\n    dim = len(xy)\n    return xy + np.random.normal(loc = 0, scale = sigma, size=dim)\n\ndef clip_to_bounds(xy,low,high):\n    # xy is a 1 by dim numpy array\n    # low is the lower bound for clipping variables\n    # high is the upper bound for clipping variables\n    return np.array( [min(high,max(low,v)) for v in xy])\n\nclass NonConvex2D(Annealer):\n\n    # no extra data so just initialize with state\n    def __init__(self, state, sigma, low, high):\n        self.sigma = sigma\n        self.low = low\n        self.high = high\n        super(NonConvex2D, self).__init__(state)  # important!\n\n    def move(self):\n        self.state = gauss_move(self.state, self.sigma)\n        self.state = clip_to_bounds(self.state, self.low, self.high)\n\n    def energy(self):\n        return f(self.state)\n\ninit_state = np.random.uniform(low=-1,high=1,size=2)\nsigma = 1/3\nlow = -1\nhigh = 1\n\nproblem2D = NonConvex2D( init_state, sigma, low, high )\n#problem2D.set_schedule(problem2D.auto(minutes=.2))\nproblem2D.Tmax = 10000.0  # Max (starting) temperature\nproblem2D.Tmin = 0.1     # Min (ending) temperature\nproblem2D.steps = 5000   # Number of iterations\nbest_x, best_fun = problem2D.anneal()\n\nprint(\"Notice that the results below are displayed using scientific notation.\\n\")\nprint(f\"The lowest function value found by simulated annealing is {best_fun:.3e}\")\nprint(f\"That value is achieved when x = {best_x[0]:.3e} and y = {best_x[1]:.3e}\")\n# refine with local search\nfrom scipy.optimize import minimize\n\nresult = minimize(f,best_x)\nprint(\"\\nAfter refining the result from simulated annealing with local search.\")\nprint(f\"The lowest function value found by local search is {result.fun:.3e}\")\nprint(f\"That value is achieved when x = {result.x[0]:.3e} and y = {result.x[1]:.3e}\")","metadata":{"heading_collapsed":true},"output":{"0":{"name":"stderr","output_type":"stream","text":" Temperature        Energy    Accept   Improve     Elapsed   Remaining\n\r     0.00000          1.07                         0:00:00            \r"},"1":{"name":"stderr","output_type":"stream","text":"\r     1.30000          1.08    87.10%    42.90%     0:00:00     0:00:02\r\r"},"10":{"name":"stderr","output_type":"stream","text":"\r     2.00000          0.30    91.60%    46.00%     0:00:01     0:00:01\r\r"},"100":{"name":"stderr","output_type":"stream","text":"\r     0.01004          0.01     0.69%     0.23%     0:00:08     0:00:04\r\r"},"101":{"name":"stderr","output_type":"stream","text":"\r     0.00907          0.01     0.42%     0.23%     0:00:08     0:00:04\r\r"},"102":{"name":"stderr","output_type":"stream","text":"\r     0.00820          0.02     0.27%     0.15%     0:00:08     0:00:04\r\r"},"103":{"name":"stderr","output_type":"stream","text":"\r     0.00741          0.02     0.46%     0.23%     0:00:08     0:00:03\r\r"},"104":{"name":"stderr","output_type":"stream","text":"\r     0.00669          0.00     0.27%     0.19%     0:00:08     0:00:03\r\r"},"105":{"name":"stderr","output_type":"stream","text":"\r     0.00605          0.00     0.35%     0.19%     0:00:09     0:00:03\r\r"},"106":{"name":"stderr","output_type":"stream","text":"\r     0.00546          0.01     0.42%     0.23%     0:00:09     0:00:03\r\r"},"107":{"name":"stderr","output_type":"stream","text":"\r     0.00494          0.00     0.31%     0.27%     0:00:09     0:00:03\r\r"},"108":{"name":"stderr","output_type":"stream","text":"\r     0.00446          0.00     0.08%     0.04%     0:00:09     0:00:03\r\r"},"109":{"name":"stderr","output_type":"stream","text":"\r     0.00403          0.00     0.46%     0.23%     0:00:09     0:00:03\r\r"},"11":{"name":"stderr","output_type":"stream","text":"\r     1.30000          0.44    88.90%    44.10%     0:00:01     0:00:01\r\r"},"110":{"name":"stderr","output_type":"stream","text":"\r     0.00364          0.00     0.12%     0.04%     0:00:09     0:00:03\r\r"},"111":{"name":"stderr","output_type":"stream","text":"\r     0.00329          0.00     0.15%     0.12%     0:00:09     0:00:02\r\r"},"112":{"name":"stderr","output_type":"stream","text":"\r     0.00297          0.01     0.08%     0.04%     0:00:09     0:00:02\r\r"},"113":{"name":"stderr","output_type":"stream","text":"\r     0.00268          0.00     0.19%     0.15%     0:00:09     0:00:02\r\r"},"114":{"name":"stderr","output_type":"stream","text":"\r     0.00242          0.00     0.08%     0.04%     0:00:10     0:00:02\r\r"},"115":{"name":"stderr","output_type":"stream","text":"\r     0.00219          0.00     0.04%     0.00%     0:00:10     0:00:02\r\r"},"116":{"name":"stderr","output_type":"stream","text":"\r     0.00198          0.00     0.08%     0.04%     0:00:10     0:00:02\r\r"},"117":{"name":"stderr","output_type":"stream","text":"\r     0.00179          0.00     0.04%     0.00%     0:00:10     0:00:02\r\r"},"118":{"name":"stderr","output_type":"stream","text":"\r     0.00162          0.00     0.00%     0.00%     0:00:10     0:00:02\r\r"},"119":{"name":"stderr","output_type":"stream","text":"\r     0.00146          0.00     0.08%     0.04%     0:00:10     0:00:02\r\r"},"12":{"name":"stderr","output_type":"stream","text":"\r     0.87000          1.18    82.85%    41.10%     0:00:01     0:00:01\r\r"},"120":{"name":"stderr","output_type":"stream","text":"\r     0.00132          0.00     0.08%     0.00%     0:00:10     0:00:01\r\r"},"121":{"name":"stderr","output_type":"stream","text":"\r     0.00119          0.00     0.12%     0.04%     0:00:11     0:00:01\r\r"},"122":{"name":"stderr","output_type":"stream","text":"\r     0.00108          0.00     0.12%     0.08%     0:00:11     0:00:01\r\r"},"123":{"name":"stderr","output_type":"stream","text":"\r     0.00097          0.00     0.08%     0.04%     0:00:11     0:00:01\r\r"},"124":{"name":"stderr","output_type":"stream","text":"\r     0.00088          0.00     0.08%     0.04%     0:00:11     0:00:01\r\r"},"125":{"name":"stderr","output_type":"stream","text":"\r     0.00079          0.00     0.00%     0.00%     0:00:11     0:00:01\r\r"},"126":{"name":"stderr","output_type":"stream","text":"\r     0.00072          0.00     0.00%     0.00%     0:00:11     0:00:01\r\r"},"127":{"name":"stderr","output_type":"stream","text":"\r     0.00065          0.00     0.04%     0.04%     0:00:11     0:00:01\r\r"},"128":{"name":"stderr","output_type":"stream","text":"\r     0.00059          0.00     0.00%     0.00%     0:00:11     0:00:00\r\r"},"129":{"name":"stderr","output_type":"stream","text":"\r     0.00053          0.00     0.00%     0.00%     0:00:11     0:00:00\r\r"},"13":{"name":"stderr","output_type":"stream","text":"\r     0.58000          0.48    73.40%    37.00%     0:00:01     0:00:01\r\r"},"130":{"name":"stderr","output_type":"stream","text":"\r     0.00048          0.00     0.00%     0.00%     0:00:11     0:00:00\r\r"},"131":{"name":"stderr","output_type":"stream","text":"\r     0.00043          0.00     0.00%     0.00%     0:00:12     0:00:00\r\r"},"132":{"name":"stderr","output_type":"stream","text":"\r     0.00039          0.00     0.04%     0.00%     0:00:12     0:00:00\r\r"},"133":{"name":"stdout","output_type":"stream","text":"Notice that the results below are displayed using scientific notation.\n\nThe lowest function value found by simulated annealing is 4.774e-06\nThat value is achieved when x = 4.410e-04 and y = -2.448e-04\n\nAfter refining the result from simulated annealing with local search.\nThe lowest function value found by local search is 8.404e-14\nThat value is achieved when x = -3.500e-08 and y = -5.704e-08\n"},"14":{"name":"stderr","output_type":"stream","text":"\r     0.39000          0.14    63.90%    31.15%     0:00:02     0:00:01\r\r"},"15":{"name":"stderr","output_type":"stream","text":"\r     0.26000          0.22    57.70%    29.20%     0:00:02     0:00:01\r\r"},"16":{"name":"stderr","output_type":"stream","text":"\r     0.17000          0.19    40.70%    20.30%     0:00:02     0:00:01\r\r"},"17":{"name":"stderr","output_type":"stream","text":"\r     0.11000          0.24    28.50%    14.05%     0:00:02     0:00:01\r\r"},"18":{"name":"stderr","output_type":"stream","text":"\r     0.07300          0.13    16.05%     8.65%     0:00:02     0:00:01\r\r"},"19":{"name":"stderr","output_type":"stream","text":"\r     0.04900          0.21     8.10%     3.65%     0:00:02     0:00:00\r\r"},"2":{"name":"stderr","output_type":"stream","text":"\r     2.00000          0.91    91.65%    44.90%     0:00:00     0:00:02\r\r"},"20":{"name":"stderr","output_type":"stream","text":"\r     0.03300          0.01     3.70%     2.05%     0:00:02     0:00:00\r\r"},"21":{"name":"stderr","output_type":"stream","text":"\r     0.02200          0.03     0.95%     0.50%     0:00:02     0:00:00\r\r"},"22":{"name":"stderr","output_type":"stream","text":"\r     0.01500          0.00     0.75%     0.30%     0:00:02     0:00:00\r\r"},"23":{"name":"stderr","output_type":"stream","text":"\r     0.01000          0.00     0.55%     0.35%     0:00:02     0:00:00\r\r"},"24":{"name":"stderr","output_type":"stream","text":"\r     0.00670          0.01     0.20%     0.10%     0:00:02     0:00:00\r\r"},"25":{"name":"stderr","output_type":"stream","text":"\r     0.00450          0.00     0.10%     0.10%     0:00:02     0:00:00\r\r"},"26":{"name":"stderr","output_type":"stream","text":"\r     0.00300          0.00     0.15%     0.05%     0:00:03     0:00:00\r\r"},"27":{"name":"stderr","output_type":"stream","text":"\r     0.00200          0.00     0.05%     0.05%     0:00:03     0:00:00\r\r"},"28":{"name":"stderr","output_type":"stream","text":"\r     0.00130          0.00     0.15%     0.10%     0:00:03     0:00:00\r\r"},"29":{"name":"stderr","output_type":"stream","text":"\r     0.00087          0.00     0.10%     0.05%     0:00:03     0:00:00\r\r"},"3":{"name":"stderr","output_type":"stream","text":"\r     3.00000          0.56    94.80%    44.55%     0:00:00     0:00:02\r\r"},"30":{"name":"stderr","output_type":"stream","text":"\r     0.00058          0.00     0.05%     0.05%     0:00:03    -1:59:59\r\r"},"31":{"name":"stderr","output_type":"stream","text":"\r     0.00039          0.00     0.00%     0.00%     0:00:03    -1:59:59\r\r"},"32":{"name":"stderr","output_type":"stream","text":" Temperature        Energy    Accept   Improve     Elapsed   Remaining\n\r    10.00000          0.00                         0:00:00            \r"},"33":{"name":"stderr","output_type":"stream","text":"\r     9.03464          1.84    98.31%    48.00%     0:00:00     0:00:12\r\r"},"34":{"name":"stderr","output_type":"stream","text":"\r     8.16246          1.46    98.58%    48.46%     0:00:00     0:00:12\r\r"},"35":{"name":"stderr","output_type":"stream","text":"\r     7.37449          0.55    97.92%    47.31%     0:00:00     0:00:11\r\r"},"36":{"name":"stderr","output_type":"stream","text":"\r     6.66258          0.55    97.85%    47.19%     0:00:00     0:00:11\r\r"},"37":{"name":"stderr","output_type":"stream","text":"\r     6.01940          0.32    97.23%    48.08%     0:00:01     0:00:11\r\r"},"38":{"name":"stderr","output_type":"stream","text":"\r     5.43831          0.30    96.96%    47.62%     0:00:01     0:00:11\r\r"},"39":{"name":"stderr","output_type":"stream","text":"\r     4.91331          0.72    97.19%    47.85%     0:00:01     0:00:11\r\r"},"4":{"name":"stderr","output_type":"stream","text":"\r     4.50000          0.69    96.50%    46.60%     0:00:00     0:00:02\r\r"},"40":{"name":"stderr","output_type":"stream","text":"\r     4.43900          1.94    96.65%    48.12%     0:00:01     0:00:11\r\r"},"41":{"name":"stderr","output_type":"stream","text":"\r     4.01048          0.22    96.12%    46.27%     0:00:01     0:00:11\r\r"},"42":{"name":"stderr","output_type":"stream","text":"\r     3.62332          0.21    96.15%    47.46%     0:00:01     0:00:11\r\r"},"43":{"name":"stderr","output_type":"stream","text":"\r     3.27354          0.25    94.35%    47.08%     0:00:01     0:00:11\r\r"},"44":{"name":"stderr","output_type":"stream","text":"\r     2.95752          1.13    95.27%    47.00%     0:00:01     0:00:10\r\r"},"45":{"name":"stderr","output_type":"stream","text":"\r     2.67201          1.01    94.85%    46.19%     0:00:02     0:00:10\r\r"},"46":{"name":"stderr","output_type":"stream","text":"\r     2.41407          1.94    93.88%    46.15%     0:00:02     0:00:10\r\r"},"47":{"name":"stderr","output_type":"stream","text":"\r     2.18102          0.76    93.08%    46.23%     0:00:02     0:00:10\r\r"},"48":{"name":"stderr","output_type":"stream","text":"\r     1.97047          0.55    91.00%    44.35%     0:00:02     0:00:10\r\r"},"49":{"name":"stderr","output_type":"stream","text":"\r     1.78025          0.61    91.38%    43.85%     0:00:02     0:00:10\r\r"},"5":{"name":"stderr","output_type":"stream","text":"\r     6.80000          1.12    97.80%    47.40%     0:00:00     0:00:02\r\r"},"50":{"name":"stderr","output_type":"stream","text":"\r     1.60839          1.72    91.42%    44.62%     0:00:02     0:00:11\r\r"},"51":{"name":"stderr","output_type":"stream","text":"\r     1.45312          1.16    90.77%    45.31%     0:00:02     0:00:10\r\r"},"52":{"name":"stderr","output_type":"stream","text":"\r     1.31284          1.09    89.54%    44.04%     0:00:03     0:00:10\r\r"},"53":{"name":"stderr","output_type":"stream","text":"\r     1.18611          1.38    87.04%    42.58%     0:00:03     0:00:10\r\r"},"54":{"name":"stderr","output_type":"stream","text":"\r     1.07160          1.35    85.69%    42.85%     0:00:03     0:00:10\r\r"},"55":{"name":"stderr","output_type":"stream","text":"\r     0.96815          1.13    84.73%    41.46%     0:00:03     0:00:10\r\r"},"56":{"name":"stderr","output_type":"stream","text":"\r     0.87469          0.43    83.31%    40.88%     0:00:03     0:00:10\r\r"},"57":{"name":"stderr","output_type":"stream","text":"\r     0.79025          1.08    80.50%    39.54%     0:00:03     0:00:10\r\r"},"58":{"name":"stderr","output_type":"stream","text":"\r     0.71396          1.25    79.65%    39.31%     0:00:03     0:00:09\r\r"},"59":{"name":"stderr","output_type":"stream","text":"\r     0.64504          0.60    78.50%    39.15%     0:00:03     0:00:09\r\r"},"6":{"name":"stderr","output_type":"stream","text":"\r    10.00000          1.35    98.10%    48.30%     0:00:01     0:00:01\r\r"},"60":{"name":"stderr","output_type":"stream","text":"\r     0.58277          0.90    76.58%    38.35%     0:00:04     0:00:09\r\r"},"61":{"name":"stderr","output_type":"stream","text":"\r     0.52651          1.09    75.19%    37.00%     0:00:04     0:00:09\r\r"},"62":{"name":"stderr","output_type":"stream","text":"\r     0.47568          0.33    71.54%    35.81%     0:00:04     0:00:09\r\r"},"63":{"name":"stderr","output_type":"stream","text":"\r     0.42976          0.34    69.58%    34.58%     0:00:04     0:00:09\r\r"},"64":{"name":"stderr","output_type":"stream","text":"\r     0.38828          1.01    64.65%    31.46%     0:00:04     0:00:08\r\r"},"65":{"name":"stderr","output_type":"stream","text":"\r     0.35079          0.52    64.31%    32.42%     0:00:04     0:00:08\r\r"},"66":{"name":"stderr","output_type":"stream","text":"\r     0.31693          0.31    61.62%    30.54%     0:00:04     0:00:09\r\r"},"67":{"name":"stderr","output_type":"stream","text":"\r     0.28633          0.31    58.46%    29.85%     0:00:05     0:00:09\r\r"},"68":{"name":"stderr","output_type":"stream","text":"\r     0.25869          0.45    54.69%    27.15%     0:00:05     0:00:08\r\r"},"69":{"name":"stderr","output_type":"stream","text":"\r     0.23372          0.18    52.08%    25.31%     0:00:05     0:00:08\r\r"},"7":{"name":"stderr","output_type":"stream","text":"\r     6.70000          0.91    97.95%    46.30%     0:00:01     0:00:01\r\r"},"70":{"name":"stderr","output_type":"stream","text":"\r     0.21116          0.22    48.77%    24.15%     0:00:05     0:00:08\r\r"},"71":{"name":"stderr","output_type":"stream","text":"\r     0.19077          0.95    46.12%    22.58%     0:00:05     0:00:08\r\r"},"72":{"name":"stderr","output_type":"stream","text":"\r     0.17236          0.21    45.38%    22.96%     0:00:05     0:00:08\r\r"},"73":{"name":"stderr","output_type":"stream","text":"\r     0.15572          0.69    42.08%    21.31%     0:00:05     0:00:08\r\r"},"74":{"name":"stderr","output_type":"stream","text":"\r     0.14068          0.44    37.42%    19.23%     0:00:05     0:00:07\r\r"},"75":{"name":"stderr","output_type":"stream","text":"\r     0.12710          0.28    33.62%    17.19%     0:00:05     0:00:07\r\r"},"76":{"name":"stderr","output_type":"stream","text":"\r     0.11483          0.20    32.38%    16.23%     0:00:06     0:00:07\r\r"},"77":{"name":"stderr","output_type":"stream","text":"\r     0.10375          0.04    30.04%    15.08%     0:00:06     0:00:07\r\r"},"78":{"name":"stderr","output_type":"stream","text":"\r     0.09373          0.33    28.04%    13.69%     0:00:06     0:00:07\r\r"},"79":{"name":"stderr","output_type":"stream","text":"\r     0.08468          0.06    23.46%    11.38%     0:00:06     0:00:07\r\r"},"8":{"name":"stderr","output_type":"stream","text":"\r     4.50000          0.94    96.50%    48.15%     0:00:01     0:00:01\r\r"},"80":{"name":"stderr","output_type":"stream","text":"\r     0.07651          0.22    18.96%     9.58%     0:00:06     0:00:06\r\r"},"81":{"name":"stderr","output_type":"stream","text":"\r     0.06912          0.14    17.85%     9.04%     0:00:06     0:00:06\r\r"},"82":{"name":"stderr","output_type":"stream","text":"\r     0.06245          0.00    14.81%     7.85%     0:00:06     0:00:06\r\r"},"83":{"name":"stderr","output_type":"stream","text":"\r     0.05642          0.02    11.35%     5.62%     0:00:06     0:00:06\r\r"},"84":{"name":"stderr","output_type":"stream","text":"\r     0.05097          0.01     7.00%     3.42%     0:00:06     0:00:06\r\r"},"85":{"name":"stderr","output_type":"stream","text":"\r     0.04605          0.23     8.50%     3.96%     0:00:07     0:00:06\r\r"},"86":{"name":"stderr","output_type":"stream","text":"\r     0.04161          0.05     9.04%     4.35%     0:00:07     0:00:06\r\r"},"87":{"name":"stderr","output_type":"stream","text":"\r     0.03759          0.01     5.15%     2.35%     0:00:07     0:00:06\r\r"},"88":{"name":"stderr","output_type":"stream","text":"\r     0.03396          0.00     4.19%     1.96%     0:00:07     0:00:05\r\r"},"89":{"name":"stderr","output_type":"stream","text":"\r     0.03068          0.02     3.88%     1.85%     0:00:07     0:00:05\r\r"},"9":{"name":"stderr","output_type":"stream","text":"\r     3.00000          0.66    94.50%    46.00%     0:00:01     0:00:01\r\r"},"90":{"name":"stderr","output_type":"stream","text":"\r     0.02772          0.02     2.81%     1.27%     0:00:07     0:00:05\r\r"},"91":{"name":"stderr","output_type":"stream","text":"\r     0.02505          0.03     1.81%     0.85%     0:00:07     0:00:05\r\r"},"92":{"name":"stderr","output_type":"stream","text":"\r     0.02263          0.05     1.12%     0.65%     0:00:07     0:00:05\r\r"},"93":{"name":"stderr","output_type":"stream","text":"\r     0.02044          0.11     1.35%     0.77%     0:00:07     0:00:05\r\r"},"94":{"name":"stderr","output_type":"stream","text":"\r     0.01847          0.00     0.73%     0.42%     0:00:07     0:00:05\r\r"},"95":{"name":"stderr","output_type":"stream","text":"\r     0.01669          0.01     0.54%     0.27%     0:00:08     0:00:04\r\r"},"96":{"name":"stderr","output_type":"stream","text":"\r     0.01508          0.02     1.00%     0.58%     0:00:08     0:00:04\r\r"},"97":{"name":"stderr","output_type":"stream","text":"\r     0.01362          0.01     0.85%     0.46%     0:00:08     0:00:04\r\r"},"98":{"name":"stderr","output_type":"stream","text":"\r     0.01231          0.01     0.31%     0.15%     0:00:08     0:00:04\r\r"},"99":{"name":"stderr","output_type":"stream","text":"\r     0.01112          0.01     0.62%     0.27%     0:00:08     0:00:04\r\r"}},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"18ce9b","input":"# *Self-Assessment for Simulated Annealing with Continuous Variables*","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"7213cd","input":"# Self-Assessment - Bayesian Optimization of the Booth function\n\nUse Bayesian Optimization (`gp_minimize`) to estimate the global minimum value of the Booth function, a common optimization test problem:\n\n$f(x,y)=(x+2y-7)^2+(2x+y-5)^2$\n\nfor $x$ and $y$ both in [-10,10].","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"74173f","input":"# *Self Assessment: Simulated Annealing for Value Balancing*","metadata":{"heading_collapsed":true},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"7a1480","input":"# *Self Assessment: Use simanneal package for Value Balancing*\n\nThis time we'll solve just the large problem.  In the first cell below we include all of the helper functions and data generation:","metadata":{"heading_collapsed":true},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"97cb09","input":"Notice that we get close to the optimal solution, but only to within 5 or so decimal places.  Simulated annealing is very good at exploring the entire space of solutions but is not so efficient at converging to a nearby minimum value.  Most practical simulated annealing type search algorithms for continuous optimization combine a gradient based local search with the annealing process to promote faster convergence.","pos":11,"type":"cell"}
{"id":0,"time":1666116085479,"type":"user"}
{"last_load":1666118717429,"type":"file"}