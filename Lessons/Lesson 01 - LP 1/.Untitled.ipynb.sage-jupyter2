{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83542016},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1592586101119,"exec_count":3,"id":"277f38","input":"xd = 1234567\nprint(f'The total cost is ${xd:,d} or ${xd:,.2f}')","kernel":"python3","output":{"0":{"name":"stdout","text":"The total cost is $1,234,567 or $1,234,567.00\n"}},"pos":10,"start":1592586101113,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"4ec46d","input":"x = 123456.7890\nprint(f'The total cost is ${x:,.2f}')","output":{"0":{"name":"stdout","output_type":"stream","text":"The total cost is $123,456.79\n"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"2e53b7","input":"active_graph()","output":{"0":{"data":{"image/png":"bb5ffa4ff19105db2758fa118d3b758899a1311b","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":302,"width":313},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"4c7fc3c8a8ca4adc8fcf72ff4e5e695b","version_major":2,"version_minor":0},"text/plain":"interactive(children=(IntSlider(value=5, description='slope', max=10), Output()), _dom_classes=('widget-intera…"},"exec_count":11,"output_type":"execute_result"}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"e476ea","input":"from ipywidgets import *\nfrom matplotlib import pyplot as plt\nimport numpy as np\n%matplotlib inline\n\nfig = plt.figure(figsize=(5,5))\n\nd = np.linspace(0, 12)\nline1, = plt.plot(d, d, lw=3, color='b')\n\ndef update(slope):\n    line1.set_ydata( slope*d )\n    #fig.canvas.draw()\n    plt.show()\n\ninteract(update,slope=(0,10))","output":{"0":{"data":{"image/png":"bb5ffa4ff19105db2758fa118d3b758899a1311b","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":302,"width":313},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"eb02cc20b91f4ae1ba0da1a1b3288302","version_major":2,"version_minor":0},"text/plain":"interactive(children=(IntSlider(value=5, description='slope', max=10), Output()), _dom_classes=('widget-intera…"},"exec_count":14,"output_type":"execute_result"},"2":{"data":{"text/plain":"<function __main__.update(slope)>"},"exec_count":14,"output_type":"execute_result"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"3390c6","input":"from ipywidgets import *\nfrom matplotlib import pyplot as plt\nimport numpy as np\n%matplotlib inline\n\nfig = plt.figure(figsize=(5,5))\nd = np.linspace(0, 12)\n\ndef update(slope):\n    plt.plot(d,slope*d,lw=3,color='b')\n    plt.ylim(-1,120)\n    plt.show()\n\ninteract(update,slope=(0,10))","output":{"0":{"data":{"text/plain":"<Figure size 360x360 with 0 Axes>"},"exec_count":15,"output_type":"execute_result"},"1":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a9bd2d6fe0ed4b3b9783f9b4d5fb990d","version_major":2,"version_minor":0},"text/plain":"interactive(children=(IntSlider(value=5, description='slope', max=10), Output()), _dom_classes=('widget-intera…"},"exec_count":15,"output_type":"execute_result"},"2":{"data":{"text/plain":"<function __main__.update(slope)>"},"exec_count":15,"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"52f714","input":"# Run this to see widget, it isn't important to understand the code\n# Must run in Jupyter Classic View for correct functionality\n%matplotlib inline\nfrom ipywidgets import *\nfrom matplotlib import pyplot as plt\nfrom matplotlib.path import Path\nfrom matplotlib.patches import PathPatch\nimport numpy as np\nfrom pyomo.environ import *\n\ndef WyndorInteractiveGraph( coefSlider = False, constraintSlider = False):\n\n    # create model instance\n    model = ConcreteModel( name = \"Wyndor\" )\n\n    # decision variables\n    model.doors = Var( domain = NonNegativeReals )\n    model.windows = Var( domain = NonNegativeReals )\n\n    # objective function\n    model.c1 = Param(default=3,mutable=True)\n    model.c2 = Param(default=5,mutable=True)\n    model.profit = Objective(expr = model.c1 * model.doors + \n                             model.c2 * model.windows, sense = maximize )\n\n    # constraints\n    model.b1 = Param(default=4,mutable=True)\n    model.b2 = Param(default=12,mutable=True)\n    model.b3 = Param(default=18,mutable=True)\n    model.ct_plant1 = Constraint( expr = model.doors <= model.b1 )\n    model.ct_plant2 = Constraint( expr = 2*model.windows <= model.b2 )\n    model.ct_plant3 = Constraint( expr = 3*model.doors + 2*model.windows <= model.b3 )\n\n    # solver\n    solver = SolverFactory('glpk')\n\n    # use seaborn to change the default graphics to something nicer\n    # and set a nice color palette\n    import seaborn as sns\n    sns.set_palette('Set1')\n\n    d = np.linspace(0, 12)\n    \n    plim = (.5,1.5,.05)\n    \n    if coefSlider:\n        c1lim = (0,10,.5)\n        c2lim = (0,10,.5)\n    else:\n        c1lim = fixed(3)\n        c2lim = fixed(5)\n        \n    if constraintSlider:\n        b1lim = (1,7)\n        b2lim = (6,18)\n        b3lim = (12,24)\n    else:\n        b1lim = fixed(4)\n        b2lim = fixed(12)\n        b3lim = fixed(18)\n\n    def update( profScl = .5, c1 = 3, c2 = 5, b1 = 4, b2 = 12, b3 = 18):\n        model.c1 = c1\n        model.c2 = c2\n        model.b1 = b1\n        model.b2 = b2\n        model.b3 = b3\n        solver.solve(model)\n        mxprofit = model.profit()\n        profit = mxprofit*profScl\n \n        plt.figure(figsize=(6,6))\n        plt.plot(d, (profit-c1*d)/(c2+0.0001), 'k--', lw = 3, label = 'profit')\n        plt.plot(b1 * np.ones_like(d), d, lw=3, label='Plant 1',color='b')\n        plt.fill_betweenx(d, 0, b1, alpha=0.1,color='b')\n        \n        plt.plot(d, b2/2*np.ones_like(d), lw=3, label='Plant 2',color='r')\n        plt.fill_between(d, 0, b2/2, alpha=0.1,color='r')\n        \n        plt.plot(d, (b3-3*d)/2, lw=3, label='Plant 3',color='g')\n        plt.fill_between(d, 0, (b3-3*d)/2, alpha=0.1,color='g')   \n        \n        plt.plot(np.zeros_like(d), d, lw=3, label='d non-negative',color='c')\n        plt.plot(d, np.zeros_like(d), lw=3, label='w non-negative',color='m')\n        \n        plt.xlabel('doors', fontsize=16)\n        plt.ylabel('windows', fontsize=16)\n        plt.xlim(-0.05, 12)\n        plt.ylim(-0.05, 12)\n        plt.legend(loc = 'upper right',fontsize=12)\n        \n        plt.text( 6.2, 6.4, 'Profit = {:3.2f}'.format(profit), fontsize = 12)\n        plt.show()  \n        \n    interact(update,profScl=plim,c1=c1lim,c2=c2lim,b1=b1lim,b2=b2lim,b3=b3lim)","pos":0,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"e38da2","input":"WyndorInteractiveGraph(True,True)","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8445506695b94260af38861185f88877","version_major":2,"version_minor":0},"text/plain":"interactive(children=(FloatSlider(value=0.5, description='profScl', max=1.5, min=0.5, step=0.05), FloatSlider(…"},"exec_count":17,"output_type":"execute_result"}},"pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"25733b","input":"from ipywidgets import *\nfrom matplotlib import pyplot as plt\n\ndef active_graph():\n    fig = plt.figure(figsize=(5,5))\n    \n    d = np.linspace(0, 12)\n    line1, = plt.plot(d, d, lw=3, color='b')\n    \n    def update(slope):\n        line1.set_ydata( slope*d )\n        fig.canvas.draw()\n        plt.show()\n    \n    interact(update,slope=(0,10))","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"999368","input":"f'The total cost is ${x:,.2f}'","output":{"0":{"data":{"text/plain":"'The total cost is $123,456.79'"},"exec_count":3,"output_type":"execute_result"}},"pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"d9b47e","input":"%matplotlib inline\nx = [1,2,5,4,3]\n@interact(n=(2,5))\ndef f(n):\n    plt.plot(x[:n])\n    plt.show()","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ef5fcb1ac8e44a39b1bd112e2fcfa6ab","version_major":2,"version_minor":0},"text/plain":"interactive(children=(IntSlider(value=3, description='n', max=5, min=2), Output()), _dom_classes=('widget-inte…"},"exec_count":8,"output_type":"execute_result"}},"pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"9d70b7","input":"import matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\n\nx = np.linspace(0, 6*np.pi, 100)\ny = np.sin(x)\n\n# You probably won't need this if you're embedding things in a tkinter plot...\nplt.ion()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nline1, = ax.plot(x, y, 'r-') # Returns a tuple of line objects, thus the comma\n\nfor phase in np.linspace(0, 10*np.pi, 500):\n    line1.set_ydata(np.sin(x + phase))\n    #fig.canvas.draw()\n    #fig.canvas.flush_events()\n    plt.show()","output":{"0":{"data":{"image/png":"9eb03ba139f3390c9b72ec3a35c6c3c4f98dd3d3","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":248,"width":386},"needs_background":"light"},"output_type":"execute_result"}},"pos":2,"state":"done","type":"cell"}
{"id":"3548da","input":"","pos":11,"state":"done","type":"cell"}
{"id":0,"time":1592586042620,"type":"user"}
{"last_load":1592601915481,"type":"file"}