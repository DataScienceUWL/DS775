{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-8c0cc863-4e6a-42c6-8627-104df12be5bb.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"270.667px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"170bdd","input":"# execute this cell for Desmos Graph\nfrom IPython.display import IFrame\nIFrame('https://www.desmos.com/calculator/mldmglotw3', width=1000, height = 600)","output":{"0":{"data":{"iframe":"d049d2b103edf85ec7caffd1b10fc4e517c22e7b","text/plain":"<IPython.lib.display.IFrame at 0x7f33666b7340>"},"exec_count":1,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"d3b3a6","input":"# execute this cell for Desmos Graph\nfrom IPython.display import IFrame\nIFrame('https://www.desmos.com/calculator/s4llmtb8jw', width=1000, height = 600)","output":{"0":{"data":{"iframe":"a0c614abe826139d5a0b8cd6a70cd7cedb27aac7","text/plain":"<IPython.lib.display.IFrame at 0x7f33666b73a0>"},"exec_count":2,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"53a76d","input":"# execute this cell for Desmos Graph\nfrom IPython.display import IFrame\nIFrame('https://www.desmos.com/calculator/givnk8crtg', width=1000, height = 600)","output":{"0":{"data":{"iframe":"c4a75f7d438cd6f29f126cb6a8a6e997ed981edb","text/plain":"<IPython.lib.display.IFrame at 0x7f33666b7790>"},"exec_count":3,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"8acf7b","input":"# execute this cell for Desmos Graph\nfrom IPython.display import IFrame\nIFrame('https://www.desmos.com/calculator/cd4vcedr8z', width=1000, height = 600)","output":{"0":{"data":{"iframe":"3539cdd5bbc8093d732fbced80e2f41189210878","text/plain":"<IPython.lib.display.IFrame at 0x7f33666b7490>"},"exec_count":4,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"d2b94e","input":"from pyomo.environ import *\n\n# Concrete Model\nmodel = ConcreteModel(name=\"Wyndor\")\n\n# Decision Variables\nmodel.doors = Var(domain=Reals, bounds=(0,4))\nmodel.windows = Var(domain=Reals, bounds = (0,6))\n\n# Objective\nmodel.profit = Objective(expr=3.0 * model.doors + 5.0 * model.windows,\n                         sense=maximize)\n\n# Constraints\nmodel.Plant3 = Constraint(expr=3.0 * model.doors + 2.0 * model.windows <= 18)\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n#display(model)\n\n#  display solution\nprint(f\"Maximum Profit = ${1000*model.profit():,.2f}\")\nprint(f\"Batches of Doors = {model.doors():.1f}\")\nprint(f\"Batches of Windows = {model.windows():.1f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum Profit = $36,000.00\nBatches of Doors = 2.0\nBatches of Windows = 6.0\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d6bcf9","input":"# Unfold to see the Pyomo solution with individual decision variables\nfrom pyomo.environ import *\n\n# Concrete Model\nmodel = ConcreteModel(name=\"Ralph\")\n\n# Decision Variables\nmodel.steak = Var(domain=Reals)\nmodel.potatoes = Var(domain=Reals)\n\n# Objective\nmodel.cost = Objective(expr=8.0 * model.steak + 4.0 * model.potatoes,\n                       sense=minimize)\n\n# Constraints\nmodel.carbs = Constraint(expr=5.0 * model.steak + 15.0 * model.potatoes >= 50)\nmodel.protein = Constraint(\n    expr=20.0 * model.steak + 5.0 * model.potatoes >= 40)\nmodel.fat = Constraint(expr=15 * model.steak + 2.0 * model.potatoes <= 60)\nmodel.sgeq0 = Constraint(expr=model.steak >= 0)\nmodel.pgeq0 = Constraint(expr=model.potatoes >= 0)\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"Minimum Cost = ${model.cost():,.2f}\")\nprint(f\"Servings of Steak = {model.steak():.1f}\")\nprint(f\"Servings of Potatoes = {model.potatoes():.1f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum Cost = $21.82\nServings of Steak = 1.3\nServings of Potatoes = 2.9\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c9e56b","input":"# first, the Pyomo solution to 3.4-10 for real number decision variables\n\nfrom pyomo.environ import *\n\n# Concret Model\nmodel = ConcreteModel(name = \"Staffing\")\n\n# Decision Variables\nmodel.x = Var( ['xf1','xf2','xf3','xp1','xp2','xp3','xp4'], \n              domain = NonNegativeReals)\n\n# Objective \nmodel.obj = Objective( expr = 40 * 8 * (model.x['xf1'] + model.x['xf2'] + model.x['xf3']) +\n                      30 * 4 * (model.x['xp1'] + model.x['xp2'] + model.x['xp3'] + \n                            model.x['xp4']), sense = minimize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = model.x['xf1'] + model.x['xp1'] >= 4 )\nmodel.Constraint2 = Constraint( expr = model.x['xf1'] + model.x['xf2'] + \n                               model.x['xp2'] >= 8 )\nmodel.Constraint3 = Constraint( expr = model.x['xf2'] + model.x['xf3'] + \n                               model.x['xp3'] >= 10 )\nmodel.Constraint4 = Constraint( expr = model.x['xf3'] + model.x['xp4'] >= 6 )\nmodel.Constraint5 = Constraint( expr = model.x['xf1'] - 2*model.x['xp1'] >= 0 )\nmodel.Constraint6 = Constraint( expr = model.x['xf1'] + model.x['xf2'] -\n                               2*model.x['xp2'] >= 0 )\nmodel.Constraint7 = Constraint( expr = model.x['xf2'] + model.x['xf3'] - \n                               2*model.x['xp3'] >= 0 )\nmodel.Constraint8 = Constraint( expr = model.x['xf3'] - 2*model.x['xp4'] >= 0 )\n                      \n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f\"Total Cost = ${model.obj():,.2f}\")\nprint(f\"Number of FT, 8 am - 4 pm: {model.x['xf1']():.2f}\")\nprint(f\"Number of FT, noon - 8 pm: {model.x['xf2']():.2f}\")\nprint(f\"Number of FT, 4 pm -12 am: {model.x['xf3']():.2f}\")\nprint(f\"Number of PT, 8 am -12 pm: {model.x['xp1']():.2f}\")\nprint(f\"Number of PT, noon - 4 pm: {model.x['xp2']():.2f}\")\nprint(f\"Number of PT, 4 pm - 8 pm: {model.x['xp3']():.2f}\")\nprint(f\"Number of PT, 8 pm -12 am: {model.x['xp4']():.2f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Total Cost = $4,106.67\nNumber of FT, 8 am - 4 pm: 2.67\nNumber of FT, noon - 8 pm: 2.67\nNumber of FT, 4 pm -12 am: 4.00\nNumber of PT, 8 am -12 pm: 1.33\nNumber of PT, noon - 4 pm: 2.67\nNumber of PT, 4 pm - 8 pm: 3.33\nNumber of PT, 8 pm -12 am: 2.00\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"8545de","input":"# now the solution to 3.4-10 for decison variables restricted to integers\n\nfrom pyomo.environ import *\n\n# Concret Model\nmodel = ConcreteModel(name = \"Staffing\")\n\n# Decision Variables\nmodel.x = Var( ['xf1','xf2','xf3','xp1','xp2','xp3','xp4'], \n              domain = NonNegativeIntegers)\n\n# Objective \nmodel.obj = Objective( expr = 40 * 8 * (model.x['xf1'] + model.x['xf2'] + model.x['xf3']) +\n                      30 * 4 * (model.x['xp1'] + model.x['xp2'] + model.x['xp3'] + \n                            model.x['xp4']), sense = minimize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = model.x['xf1'] + model.x['xp1'] >= 4 )\nmodel.Constraint2 = Constraint( expr = model.x['xf1'] + model.x['xf2'] + \n                               model.x['xp2'] >= 8 )\nmodel.Constraint3 = Constraint( expr = model.x['xf2'] + model.x['xf3'] + \n                               model.x['xp3'] >= 10 )\nmodel.Constraint4 = Constraint( expr = model.x['xf3'] + model.x['xp4'] >= 6 )\nmodel.Constraint5 = Constraint( expr = model.x['xf1'] - 2*model.x['xp1'] >= 0 )\nmodel.Constraint6 = Constraint( expr = model.x['xf1'] + model.x['xf2'] -\n                               2*model.x['xp2'] >= 0 )\nmodel.Constraint7 = Constraint( expr = model.x['xf2'] + model.x['xf3'] - \n                               2*model.x['xp3'] >= 0 )\nmodel.Constraint8 = Constraint( expr = model.x['xf3'] - 2*model.x['xp4'] >= 0 )\n                      \n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f\"Total Cost = ${model.obj():,.2f}\")\nprint(f\"Number of FT, 8 am - 4 pm: {model.x['xf1']():.0f}\")\nprint(f\"Number of FT, noon - 8 pm: {model.x['xf2']():.0f}\")\nprint(f\"Number of FT, 4 pm -12 am: {model.x['xf3']():.0f}\")\nprint(f\"Number of PT, 8 am -12 pm: {model.x['xp1']():.0f}\")\nprint(f\"Number of PT, noon - 4 pm: {model.x['xp2']():.0f}\")\nprint(f\"Number of PT, 4 pm - 8 pm: {model.x['xp3']():.0f}\")\nprint(f\"Number of PT, 8 pm -12 am: {model.x['xp4']():.0f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Total Cost = $4,160.00\nNumber of FT, 8 am - 4 pm: 3\nNumber of FT, noon - 8 pm: 3\nNumber of FT, 4 pm -12 am: 4\nNumber of PT, 8 am -12 pm: 1\nNumber of PT, noon - 4 pm: 2\nNumber of PT, 4 pm - 8 pm: 3\nNumber of PT, 8 pm -12 am: 2\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"3f1c14","input":"# Pyomo solution for HW1.6 (Problem 3.5-6)\n\n# part e\nfrom pyomo.environ import *\n\n# Concret Model\nmodel = ConcreteModel(name = \"AlvaElectric\")\n\n# Decision Variables\nmodel.x = Var( ['x1','x2','x3'], domain = NonNegativeReals)\n\n# Objective \nmodel.obj = Objective( expr = model.x['x1'] + model.x['x2'] + model.x['x3'], \n                      sense = minimize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = 2*model.x['x1'] + model.x['x2'] +\n                               0.5*model.x['x3'] >= 400 )\nmodel.Constraint2 = Constraint( expr = 0.5*model.x['x1'] + 0.5*model.x['x2'] +\n                               model.x['x3'] >= 100 )\nmodel.Constraint3 = Constraint( expr = 1.5*model.x['x2'] + 2*model.x['x3'] >= 300 )\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f\"Minimum investment = {model.obj():.1f} units\")\nprint(f\"Units purchased of Asset 1: {model.x['x1']():.1f}\")\nprint(f\"Units purchased of Asset 2: {model.x['x2']():.1f}\")\nprint(f\"Units purchased of Asset 3: {model.x['x3']():.1f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum investment = 300.0 units\nUnits purchased of Asset 1: 100.0\nUnits purchased of Asset 2: 200.0\nUnits purchased of Asset 3: 0.0\n"}},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"096bf1","input":"From the graphical method observe that the two binding\n  contraints are $3 x_1 + 2 x_2 \\leq 2400$ and $2x_1 \\leq 1200.$\n  Since the constraints are binding we know that $3 x_1 + 2x_2 = 2400$\n  and $ 2x_1 = 1200.$  From the second equation we know $x_1 = 600$.\n  Substitute $x_1 = 600$ into the first equation to get $1800 + 2x_2 =\n  2400$ which yields $x_2 = 300.$  So the optimal value is $Z^* =\n  3600$ and it occurs at $x_1^* = 600, x_2^*=300.$  \n  \nHover over the CPF solutions in Desmos to get the coordinates:","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"0a895d","input":"There are infinitely many optimal solutions to this problem.  $(x_1^*,\nx_2^*) = (15,15), (2.5,35.8\\bar{3})$ and all the points on the line\nconnecting these two points, $Z^* = 12000$. ","metadata":{"hidden":true},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"0b05a6","input":"### Textbook Problem  3.5-6 (a,e) Solution\n\n(a) Model formulation:\n<img src=\"images/screen-solution3_5-6.png\" width=\"340\" height=\"150\">\n\n(e) Optimal solution using the simplex method in Pyomo is in the following cell.","metadata":{"hidden":true},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"0ccbbd","input":"The maximum value is $Z^* = 210$ and occurs when $x_1^* = 3$ and $x_2^* = 9$.\n  \n<img src=\"images/solve_by_hand.png\" alt=\"Solution\" width=\"1000\">","metadata":{"code_folding":[],"hidden":true},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"11cdab","input":"# *Self-Assessment: Specifying Bounds*","metadata":{"heading_collapsed":true},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"2076db","input":"# *Self Assessment: Graphical Method #2*","metadata":{"heading_collapsed":true},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"3b1cdf","input":"# *Self Assessment: LP Assumptions*","metadata":{"heading_collapsed":true},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"580785","input":"# *Self-Assessment: Formulate and Solve #3*","metadata":{"heading_collapsed":true},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"5906f0","input":"# *Self-Assessment: Unbounded Region*\n\n1.  There is no maximum value since we can increase the value of $x_1$ to make it as large as we want so that the value of $Z$ grows unboundedly.  There is a minimum value of $Z^* = 4$ at $(x_1^*, x_2^*) = (0,2)$.\n2.  There are multiple ways to do this.  For example change to $c_1 = -2, c_2 = 3$.  Now we get a maximum value of $Z^* = 15$ at $(x_1^*, x_2^*) = (0,5)$ but there is no minimum value.\n3. Any pair of $c_1,c_2$ that satisfy $c_1 < 0, c_2 < 0,$ and $c_1 = c_2,$ e.g. $c_1 = c_2 = -2,$ will make it so that $Z$ has infinitely many maxima (with negative values) along the line $x_1 + x_2 = 2$ at the left edge of the feasible region.\n","metadata":{"heading_collapsed":true},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"597abf","input":"# *Self Assessment: Graphical Method #3*","metadata":{"heading_collapsed":true},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"70daf6","input":"# *Self-Assessment: Formulate and Solve #1*","metadata":{"heading_collapsed":true},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"80775a","input":"# *Self Assessment:  Graphical Method #4*","metadata":{"heading_collapsed":true},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"8c41e8","input":"# *Self Assessment: Paper and Pencil Method*","metadata":{"code_folding":[],"heading_collapsed":true},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"a8052d","input":"# *Self-Assessment: Formulate and Solve #2*","metadata":{"heading_collapsed":true},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"b35c3c","input":"(a) The LP model: \n\n<img src=\"images/screen-solution4a.png\" alt=\"Solution\" width=\"640\" height=\"350\">   \n\nThe hard part of this model, for most students, seems to be the constraint\nthat the number of full time workers has to be at least twice the\nnumber of part time workers: \n\nfull time $\\geq$ 2 * part time \n\nfull time - 2 * part time $\\geq$ 0\n\n(b) The Pyomo solution is in the cell below this one.  \n\nThe objective function minimum cost is \\$4,106.67 if it were possible to have a fractional number of workers per shift.  Of course you can't have a fractional number of workers per shift,\nbut you can either round these values to integers for an approximate\nsolution or you can tell the solver to use only integer values which\nactually makes the problem into a harder problem called an integer\nprogramming problem.  If you round the numbers of consultants to the\nnearest integer you should find a total cost of \\$4280.\n\n\n(c) Set an integer constraint (**domain=NonNegativeIntegers**) on the decision variable cells and\n  solve using Pyomo to get a total cost of \\$4160.  Rounding fractional\n  solutions yielded a less optimal answer than using integer\n  programming in this case. (In general don't use integer variables unless instructed to do so.  We will see more about this in Lesson 6.)","metadata":{"hidden":true},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"c819fa","input":"\n(a) Model formulation:\n<img src=\"images/screen-solution3_5-6.png\" width=\"340\" height=\"150\">\n\n(e) Optimal solution using the simplex method in Pyomo is in the following cell.","metadata":{"hidden":true},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"cad22a","input":"After setting up in Desmos check the value of Z at the CPFs which are the vertices of the unbounded, U-shaped region at the top of the graph.","metadata":{"hidden":true},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"d80fe5","input":"# *Self Assessment:  Graphical Method #1*","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"e29ea7","input":"(a) **Additivity** is violated by the term $x_1 x_2$ in the objective function and **proportionality** is violated\nby the term $x^2_2$ in the third constraint.\n\n(b) The $+3$ in the objective function violates the **proportionality** assumption and the constraints of\n$x_1 = 1,2,3, \\ldots, x_2 = 1,2,3, \\ldots$ violate the **divisibility** assumption.\n\n(c) $0.25 x + 1$ as the RHS of constraint 2 violated the **proportionality** assumption and the **certainty** assumption is violated because the exact value of $a_2$ is not known.","metadata":{"hidden":true},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"e4427d","input":"(a) Minimize $C = 8S + 4P$ \n\nsubject to\n\n$\n\\begin{eqnarray*}\n5S + 15P &\\geq& 50 \\\\\n20S + 5P &\\geq& 40 \\\\\n15S + 2P &\\leq& 60 \\\\\nS,P &\\geq& 0\n\\end{eqnarray*}\n$\n  \n(c) Pyomo Solution in next cell","metadata":{"hidden":true},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"e7276b","input":"(a) As in the Wyndor Glass Co. problem, we want to find the optimal\n  levels of two activities that compete for limited resources.  Let\n  $x_1$ and $x_2$ be the fraction purchased of the partnership in the\n  first and second friends venture respectively.\n  \n<img src=\"images/screen-solution5.png\" alt=\"Solution\" width=\"640\">\n\n(b) Maximize $P = 9000 x_1 + 9000 x_2$ \n\nsubject to \n\n$x_1 \\leq 1$ \n\n$x_2 \\leq 1$ \n\n$10000 x_1 + 8000 x_2 \\leq 12000$\n\n$400 x_1 + 500 x_2 \\leq 600$ \n\n$ x_1, x_2 \\geq 0$\n\n(c) Solved by the graphical method.  $(x_1^*,x_2^*) = (2/3,\n  2/3)$ and $P^* = 12000$.  ","metadata":{"hidden":true},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"fd1b6d","input":"# Lesson 01 - Self-Assessment Solutions","pos":0,"type":"cell"}
{"id":0,"time":1674852081102,"type":"user"}
{"last_load":1674852080878,"type":"file"}