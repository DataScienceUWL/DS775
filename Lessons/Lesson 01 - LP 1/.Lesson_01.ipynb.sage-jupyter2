{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-3c760165-b7c6-4643-8079-d3e9d04c6ccc.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"338.324px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"685ef4","input":"","pos":55,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"07497c","input":"# execute this cell for video\nplay_video(\"ds775_lesson1-wyndor1\")","metadata":{"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1-wyndor1/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fe8e1047b00>"},"exec_count":11,"output_type":"execute_result"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"cfa1c0","input":"# Concrete Model\nmodel = ConcreteModel(name=\"Wyndor\")\n\n# Decision Variables\nmodel.doors = Var(domain=Reals)\nmodel.windows = Var(domain=Reals)\n\n# Objective\nmodel.profit = Objective(expr=3.0 * model.doors + 5.0 * model.windows,\n                         sense=maximize)\n\n# Constraints\nmodel.Plant1 = Constraint(expr=model.doors <= 4)\nmodel.Plant2 = Constraint(expr=2.0 * model.windows <= 12)\nmodel.Plant3 = Constraint(expr=3.0 * model.doors + 2.0 * model.windows <= 18)\nmodel.dgeq0 = Constraint(expr=model.doors >= 0)\nmodel.wgeq0 = Constraint(expr=model.windows >= 0)\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n#display(model)\n\n# display solution\nprint(f\"Maximum Profit = ${1000*model.profit():,.2f}\")\nprint(f\"Batches of Doors = {model.doors():.1f}\")\nprint(f\"Batches of Windows = {model.windows():.1f}\")\n\n# NOTE:  the string formatting was updated from the video, we're now use f-strings, short for formatted string literals, for cleaner and more \"pythonic\" formatting\n# Learn more here:  https://realpython.com/python-f-strings/ and http://zetcode.com/python/fstring/","metadata":{"code_folding":[]},"output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum Profit = $36,000.00\nBatches of Doors = 2.0\nBatches of Windows = 6.0\n"}},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"9a5eb1","input":"# execute this cell for video\nplay_video(\"ds775_lesson1-wyndor2\")","metadata":{"code_folding":[0]},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1-wyndor2/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fe8e0f80a58>"},"exec_count":13,"output_type":"execute_result"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"850d0d","input":"# Concrete Model\nmodel = ConcreteModel(name=\"Wyndor\")\n\nproducts = ['drs', 'wdw']\n\nbounds_dict = {'drs': (0, 4), 'wdw': (0, 6)}\ndef bounds_rule(model, product):\n    return (bounds_dict[product])\n\nmodel.x = Var(products, domain=Reals, bounds=bounds_rule)\n\n# Objective\nmodel.profit = Objective(expr=3.0 * model.x['drs'] + 5.0 * model.x['wdw'],\n                         sense=maximize)\n\n# Constraints\nmodel.Constraint3 = Constraint(\n    expr=3.0 * model.x['drs'] + 2.0 * model.x['wdw'] <= 18)\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display(model)\n\n# display solution\nprint(f\"Maximum Profit = ${1000*model.profit():,.2f}\")\nprint(f\"Batches of Doors = {model.x['drs']():.1f}\")\nprint(f\"Batches of Windows = {model.x['wdw']():.1f}\")","metadata":{"code_folding":[]},"output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum Profit = $36,000.00\nBatches of Doors = 2.0\nBatches of Windows = 6.0\n"}},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"7ecd97","input":"# execute this cell for video\nplay_video(\"ds775_lesson1-ex-3-4-9-model-requirements\")","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1-ex-3-4-9-model-requirements/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fe8e0fb6748>"},"exec_count":15,"output_type":"execute_result"}},"pos":66,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"a3d840","input":"# execute this cell for video\nplay_video(\"ds775_lesson1-ex-3-4-9-model-formulation\")","metadata":{"code_folding":[],"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1-ex-3-4-9-model-formulation/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fe8e0fb6c88>"},"exec_count":16,"output_type":"execute_result"}},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"a1f5b7","input":"# Concrete Model\nmodel = ConcreteModel(name = \"WebMerc\")\n\n# Decision Variables\nmodel.x = Var( ['x11','x12','x13','x14','x15','x21','x22','x23','x24',\n                'x31','x32','x33','x41','x42','x51'], \n              domain = NonNegativeReals )\n\n# Objective \nmodel.obj = Objective( expr = 65 * (model.x['x11'] + model.x['x21'] + model.x['x31'] + \n                                   model.x['x41'] + model.x['x51']) + \n                      100 * (model.x['x12'] + model.x['x22'] + model.x['x32'] + \n                            model.x['x42']) + \n                      135 * (model.x['x13'] + model.x['x23'] + model.x['x33']) + \n                      160 * (model.x['x14'] + model.x['x24']) + \n                      190 * model.x['x15'], sense = minimize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = model.x['x11'] + model.x['x12'] + model.x['x13'] +\n                               model.x['x14'] + model.x['x15'] >= 30000 )\nmodel.Constraint2 = Constraint( expr = model.x['x12'] + model.x['x13'] + model.x['x14'] +\n                               model.x['x15'] + model.x['x21'] + model.x['x22'] + \n                               model.x['x23'] + model.x['x24'] >= 20000 )\nmodel.Constraint3 = Constraint( expr = model.x['x13'] + model.x['x14'] + model.x['x15'] +\n                               model.x['x22'] + model.x['x23'] + model.x['x24'] +\n                               model.x['x31'] + model.x['x32'] + model.x['x33'] >= 40000 )\nmodel.Constraint4 = Constraint( expr = model.x['x14'] + model.x['x15'] + model.x['x23'] + \n                               model.x['x24'] + model.x['x32'] + model.x['x33'] + \n                               model.x['x41'] + model.x['x42'] >= 10000 )\nmodel.Constraint5 = Constraint( expr = model.x['x15'] + model.x['x24'] + model.x['x33'] + \n                               model.x['x42'] + model.x['x51'] >= 50000 )\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display(model)\n\n# print a shorter summary of relevant results (we inspected the results to figure out what to print)\nimport babel.numbers as numbers   # needed to display as currency\nprint(f\"Total Cost = ${model.obj():,.2f}\")\nprint(f\"Lease {model.x['x15']():.0f} sq. ft. in month 1 for 5 months\")\nprint(f\"Lease {model.x['x31']():.0f} sq. ft. in month 3 for 1 month\")\nprint(f\"Lease {model.x['x51']():.0f} sq. ft. in month 5 for 1 month\")","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Total Cost = $7,650,000.00\nLease 30000 sq. ft. in month 1 for 5 months\nLease 10000 sq. ft. in month 3 for 1 month\nLease 20000 sq. ft. in month 5 for 1 month\n"}},"pos":71,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"079cd8","input":"# execute this cell for video\nplay_video(\"ds775_lesson1-latex-demo\")","output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1-latex-demo/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fe8e0f9ea58>"},"exec_count":18,"output_type":"execute_result"}},"pos":73,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"d3938d","input":"# Concrete Model\nM = ConcreteModel(name = \"Sausages1\")\n\n# Decision Variables\nM.pe = Var(domain = NonNegativeReals)\nM.we = Var(domain = NonNegativeReals)\nM.se = Var(domain = NonNegativeReals)\nM.pp = Var(domain = NonNegativeReals)\nM.wp = Var(domain = NonNegativeReals)\nM.sp = Var(domain = NonNegativeReals)\n\n# Objective \nM.cost = Objective( expr = 4.32*(M.pe+M.pp)+2.46*(M.we+M.wp)+1.86*(M.se+M.sp),\n                      sense = minimize )\n\n# Constraints\nM.tot_econ_ct = Constraint( expr = M.pe + M.we + M.se == 17.5 )\nM.tot_prem_ct = Constraint( expr = M.pp + M.wp + M.sp == 25 )\nM.p_prp_econ_ct = Constraint( expr = M.pe >= 0.4*(M.pe + M.we + M.se) )\nM.p_prp_prem_ct = Constraint( expr = M.pp >= 0.6*(M.pp + M.wp + M.sp) )\nM.s_prp_econ_ct = Constraint( expr = M.se <= 0.25*(M.pe + M.we + M.se) )\nM.s_prp_prem_ct = Constraint( expr = M.sp <= 0.25*(M.pp + M.wp + M.sp) )\nM.p_tot_mx_ct = Constraint( expr = M.pe + M.pp <= 30 )\nM.w_tot_mx_ct = Constraint( expr = M.we + M.wp <= 20 )\nM.s_tot_mx_ct = Constraint( expr = M.se + M.sp <= 17 )\nM.p_tot_mn_ct = Constraint( expr = M.pe + M.pp >= 23 )\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(M)\n\n# display(M)\n\n# display solution\nprint(f\"Minimum Cost = ${M.cost():,.2f}\")\n\nimport pandas as pd\ndvars = pd.DataFrame( [[M.pe(),M.pp()],\n                       [M.we(),M.wp()],\n                       [M.se(),M.sp()]],\n                    index = ['Pork','Wheat','Starch'],\n                    columns = ['Economy','Premium'])\nprint(\"Kilograms of each ingredient in each type of sausage:\")\ndvars","output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum Cost = $140.96\nKilograms of each ingredient in each type of sausage:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Economy</th>\n      <th>Premium</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Pork</th>\n      <td>8.000</td>\n      <td>15.00</td>\n    </tr>\n    <tr>\n      <th>Wheat</th>\n      <td>5.125</td>\n      <td>3.75</td>\n    </tr>\n    <tr>\n      <th>Starch</th>\n      <td>4.375</td>\n      <td>6.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Economy  Premium\nPork      8.000    15.00\nWheat     5.125     3.75\nStarch    4.375     6.25"},"exec_count":19,"output_type":"execute_result"}},"pos":85,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"14a8b4","input":"# Execute to play video\nplay_video(\"ds775_cocalc-walkthrough\")","output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_cocalc-walkthrough/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f7125409160>"},"exec_count":2,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"397399","input":"# EXECUTE FIRST\n\n# computational imports\nfrom pyomo.environ import *\n\n# plotting imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\n# display imports\nfrom IPython.display import display, IFrame\nfrom IPython.core.display import HTML\n\n# for playing videos, customize height and width if desired\n# keep a 16:9 ratio, e.g. 960 by 540, or 1280 by 720\ndef play_video(vid_name, w=640, h=360):\n    vid_path = \"https://media.uwex.edu/content/ds/ds775_r19/\"\n    return IFrame(vid_path + vid_name + \"/index.html\", width=w, height=h)","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"3b0e3c","input":"# execute this cell for video\nplay_video(\"ds775_lesson1_what-is-linear-programming\")","output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1_what-is-linear-programming/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f715d423f70>"},"exec_count":3,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"56d584","input":"# Execute to play video\nplay_video(\"ds775_course-overview\")","output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_course-overview/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fe57abcbf10>"},"exec_count":3,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"3e49f9","input":"# execute this cell for video\nplay_video(\"ds775_lesson1-graphical-by-hand\")","metadata":{"code_folding":[]},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1-graphical-by-hand/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fe8e6e79fd0>"},"exec_count":4,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"3f2b5b","input":"# execute this cell for video\nplay_video(\"ds775_lesson1_linear-programming-basics\")","output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1_linear-programming-basics/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f715d3a1340>"},"exec_count":4,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"241fee","input":"# execute this cell for Desmos Graph\nfrom IPython.display import IFrame\nIFrame('https://www.desmos.com/calculator/dbixzrgtca', width=800, height = 600)","metadata":{"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"800\"\n            height=\"600\"\n            src=\"https://www.desmos.com/calculator/dbixzrgtca\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fbdeeb89a30>"},"exec_count":6,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"a80e71","input":"# execute this cell for video\nplay_video(\"ds775_lesson1-graphical-example-desmos\")","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson1-graphical-example-desmos/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fe8e6e79f28>"},"exec_count":6,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"07b2a5","input":"The decision variables are the kg of each ingredient to use:\n\nVariable | Description\n--- | ---\n$p_e$ | kg pork in the economy sausages  \n$w_e$ | kg wheat in the economy sausages  \n$s_e$ | kg starch in the economy sausages  \n$p_p$ | kg pork in the premium sausages  \n$w_p$ | kg wheat in the premium sausages  \n$s_p$ | kg starch in the premium sausages\n\nWe want to minimize the cost:\n$$ \\mbox{Cost} = 4.32 ( p_e + p_p) + 2.46( w_e + w_p) + 1.86 (s_e + s_p) $$\n\nSubject to the following constraints:\n\n<p style=\"padding-right: 120px;\"> Constraint</p> | Description\n---------------------------------| ---\n$p_e + w_e + s_e = 350 \\times 0.05$ | total kg of economy sausages\n$p_p + w_p + s_p = 500 \\times 0.05$ | total kg of premium sausages\n$p_e \\geq 0.4 (p_e + w_e + s_e)$ | ecomony sausage must be at least 40% pork\n$p_p \\geq 0.6 (p_p + w_p + s_p)$ | premium sausage must be at least 60% pork\n$s_e \\leq 0.25 (p_e + w_e + s_e)$ | no more than 25% starch\n$s_p \\leq 0.25 (p_p + w_p + s_p)$ | no more than 25% starch\n$p_e + p_p \\leq 30$ | 30 kg of pork available\n$w_e + w_p \\leq 20$ | 20 kg of wheat available\n$s_e + s_p \\leq 17$ | 17 kg of starch avaialble\n$p_e + p_p \\geq 23$ | must use the 23 kg of pork we already purchased","pos":83,"type":"cell"}
{"cell_type":"markdown","id":"07d941","input":"## *Self Assessment:  Unbounded Region*\n\nExplore the linear program below using Desmos.  The goal here is to understand that a linear program is not guaranteed to have a maximum value or a minimum value on an unbounded region.  It depends on how the objective function is \"oriented\" with respect to the feasible region.\n\nOptimize $Z = c_1 x_1 + c_2 x_2,$ \n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n    &   &  x_2 & \\leq & 5 \\\\\nx_1 & + &  x_2 & \\geq & 2\n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0.$ \n\nIn this problem there is no upper bound on $x_1$ so the feasible region is a strip that extends to infinity in the horizontal direction.\n\nTry and answer the questions below using the Desmos graph in the next cell.\n\n1. Using values of $c_1 = 3, c_2 = 2$ so that $Z = 3 x_1 + 2 x_2$  Is there a minimum value?  Is there a maximum value?\n2. Now change the coefficients c1 and c2 ($ Z = c_1 x + c_2 y $).  Can you find an objective function that has maximum value but no minimum value?\n3. Find coefficients c1 and c2 so that there are infinitely many maxima.","metadata":{"hidden":true},"pos":34,"type":"cell"}
{"cell_type":"markdown","id":"08d6c4","input":"## Typesetting mathematical notation with LaTeX code (video)","pos":72,"type":"cell"}
{"cell_type":"markdown","id":"09995e","input":"**Textbook Problem 3.1-6.** Use paper and pencil to solve this problem using the graphical method.\n\nMaximize $Z = 10x_1 + 20x_2,$ \n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n-x_1 & + & 2x_2 & \\leq & 15 \\\\\n x_1 & + &  x_2 & \\leq & 12 \\\\\n5x_1 & + & 3x_2 & \\leq & 45\n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0.$","metadata":{"hidden":true},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"0e173b","input":"Here is the Wyndor model as described in the textbook.  $Z$ is the profit in thousands of dollars.  $d$ and $w$ are the batches of doors and windows, respectively.  The constraints, in order, represent the production capacities of Plants 1, 2, and 3.\n\nMaximize $Z = 3 d + 5 w$\n\nSubject to:\n\n$\n\\begin{array}{ccccc}\n d &   &    & \\leq & 4 \\\\\n   &   & 2w & \\leq & 12 \\\\\n3d & + & 2w & \\leq & 18\n\\end{array}\n$\n\n$d \\geq 0$, $w \\geq 0$","metadata":{"hidden":true},"pos":47,"type":"cell"}
{"cell_type":"markdown","id":"1acfc9","input":"Using design variables $x_{ij}$ that represent the square feet leased for $j$ months beginning in the $i^{th}$ month, the model is\n\nMinimize $Z =65(x_{11} +x_{21} +x_{31} +x_{41} +x_{51})+100(x_{12} +x_{22} +x_{32} +x_{42}) +135(x_{13} + x_{23} + x_{33}) + 160(x_{14} + x_{24}) + 190x_{15}$\n\nSubject to:\n\n$\n\\begin{array}{lcl}\n x_{11} + x_{12} + x_{13} + x_{14} + x_{15} & \\geq & 30,000 \\\\\n x_{12} + x_{13} + x_{14} + x_{15} + x_{21} + x_{22} + x_{23} + x_{24} & \\geq & 20,000 \\\\\nx_{13} + x_{14} + x_{15} + x_{22} + x_{23} + x_{24} + x_{31} + x_{32} + x_{33} & \\geq & 40,000 \\\\\nx_{14} + x_{15} + x_{23} + x_{24} + x_{32} + x_{33} + x_{41} + x_{42} & \\geq & 10,000  \\\\\nx_{15} + x_{24} + x_{33} + x_{42} + x_{51} & \\geq & 50,000 \\\\\n\\end{array}\n$\n\nand all $x_{ij} \\geq 0$.\n\nTo learn about typesetting mathematics like this go to the section below labeled \"Typesetting mathematical notation with LaTeX code.\"","metadata":{"hidden":true},"pos":69,"type":"cell"}
{"cell_type":"markdown","id":"1ae931","input":"## Paper Example (video)","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"27da96","input":"### *Self Assessment: Graphical Method #3*","metadata":{"heading_collapsed":true,"hidden":true},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"2d0e73","input":"## *Self Assessment: LP Assumptions*","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"377c0f","input":"## Course Overview and some Optimization Basics\n\nIn the video below we'll preview some of the course content, explain why we chose this textbook, discuss why we're using Python, and introduce some optimization terminology.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"3858c7","input":"### *Self-Assessment: Formulate and Solve #1*","pos":61,"type":"cell"}
{"cell_type":"markdown","id":"3a8609","input":"### *Self Assessment:  Graphical Method #1*","metadata":{"hidden":true},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"3ef45e","input":"## Problem Description","pos":80,"type":"cell"}
{"cell_type":"markdown","id":"3fc17a","input":"#### Video: Code Walkthrough","metadata":{"heading_collapsed":true},"pos":49,"type":"cell"}
{"cell_type":"markdown","id":"41348d","input":"## Introduction to CoCalc","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"436fcf","input":"### Pyomo solution using a vector of decision variables","pos":56,"type":"cell"}
{"cell_type":"markdown","id":"4485a3","input":"## Two kinds of Pyomo models","metadata":{"heading_collapsed":true},"pos":43,"type":"cell"}
{"cell_type":"markdown","id":"4605c0","input":"Some resources to help you learn more about Pyomo:\n    \n* <a href=\"https://pyomo.readthedocs.io/en/stable/\"> The Official Pyomo Documentation. </a> \n* The <a href=\"https://www.osti.gov/servlets/purl/1376827\"> Pyomo Tutorial </a> is a large set of slides from the Pyomo developers at Sandia National Labs\n* Professor Jeffrey Cantor's <a href=\"https://jckantor.github.io/ND-Pyomo-Cookbook/\"> ND Pyomo Cookbook </a> gives many examples\n* <a href = \"https://github.com/Pyomo/PyomoGallery\"> The Pyomo Gallery </a> also has several examples.","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"495546","input":"**Before progressing through the remainder of this notebook, you really should have read Chapter 3 so that you know the basics of a linear program.**","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"497fe6","input":"#### Pyomo Solutions","pos":59,"type":"cell"}
{"cell_type":"markdown","id":"502f3b","input":"The material in this chapter assumes that you're familiar with graphing lines, graphing inequalities, and solving linear equations.  If you need to refresh your memory of these topics there are many sources on the internet.  All of these topics may be found in this <a href=\"https://www.khanacademy.org/math/algebra\">free Algebra course at Khan Academy.</a>","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"515a3c","input":"# Start to Finish: Formulate a Model and Code it in Pyomo ","pos":63,"type":"cell"}
{"cell_type":"markdown","id":"52b3db","input":"## Pyomo Solution","pos":84,"type":"cell"}
{"cell_type":"markdown","id":"56386f","input":"## The linear program","pos":82,"type":"cell"}
{"cell_type":"markdown","id":"5c2dae","input":"## Contents of each Lesson Directory\n\nThe lesson structure and folder contents is pretty similar for all of the lessons.  We'll show this one as an example so you can know what to expect.\n\nHere is a partial tree view of the lesson directory contents:\n\n```\n├── Lesson_01.ipynb\n├── Overview_01.ipynb\n├── Self_Assess_Solns_01.ipynb\n├── extras\n│   ├── Python Refresher - Functions.ipynb\n│   └── Python Refresher - Loops.ipynb\n├── images\n└── scripts\n```\n\n**Descriptions of the files:**\n* `Lesson_01.ipynb` - the main lesson file with presentations and self-assessment exercises.\n* `Overview_01.ipynb` - contains a list of lesson topics, objectives, and supplemental materials if any are available.\n* `Self_Assess_Solns_01.ipynb` - solutions to the self-assessment exercises in the Lesson notebook.\n* `extras` - if there are supplemental materials for the week they are contained in this directory.\n* `images` - directory containing image files used in the notebook.\n* `scripts` - directory contains code files that aren't important for the course content, but may be used to produce aninmiations or other tools.\n\n## Our view of the provided materials\n\nIt's our intention that you should lightly read the corresponding sections in the textbook (focus on applications and big picture, don't pay attention to details of algorithms or Excel instructions).  After reading the textbook work your way through the lesson notebook.  If you have time, go through each example and make sure you understand the implementation and solution.  Work Self-Assessment problems to solidify your understanding (we don't collect these).  Finally, start the homework and return to the lesson as needed.\n\n## What to do for homework\n\nEach Lesson has an accompanying homework notebook.  You should use the notebook to work out the solutions after which you'll enter the solutions in a Canvas quiz.  You get two attempts at each quiz question.  You should submit:\n\n* Your lesson notebook in CoCalc.  You don't have to do anything to submit, just make sure the completed notebook (.ipynb file) is in the original folder in CoCalc by the due date.  Make sure the notebook is clearly named, especially if there are multiple notebooks in the folder.\n* Complete the Canvas quiz by using your answers in the notebook.  You're allowed two attempts at the quiz prior to the due date.\n\nWe've seen students mostly use two different approaches to homework:\n\n1.  Work completely and carefully through the lesson and Self-Assessment problems before beginning the homework.  Your goal is to have a solid understanding of the concepts and code before beginning the homework.  This approach may be too time consuming for some students.\n2.  Loosely work through the lesson notebook before beginning the homework.  You goal is develop awareness of the content and code before beginning the homework.  After developing a loose understanding of the lesson then start the homework and refer to the lesson to fill in details as needed.  This approach may be more time efficient for some students, but it's easy to fall into the trap of trying to copy and tweak code from the lesson without really understanding the code in the first place.  Tweaking code without really understanding it is inefficient and frustrating.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"63566a","input":"<p><font size=18>Lesson 01: Linear Programming and Pyomo</font></p>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"66ab6a","input":"## *Self Assessment:  Graphical Method #4*","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"6bc6ad","input":"Here is an extra example, with no videos, of a blending problem.  We'll revisit this example in the next lesson.\n\nThis example adapted from here: http://benalexkeen.com/linear-programming-with-python-and-pulp-part-4/.  ","pos":79,"type":"cell"}
{"cell_type":"markdown","id":"6e2d91","input":"### *Self Assessment: Graphical Method #2*","metadata":{"heading_collapsed":true,"hidden":true},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"725847","input":"# Graphical Solutions\n\nThe next video explains some basic ideas like feasible region and corner feasible point.  It's also pretty easy to get same information from reading the textbook, but watch the video below if you think it might be useful for you.  The video immediately following this one also mentions some of the same ideas.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"75aa13","input":"**Textbook Problem 3.4-4.** Use the graphical method to solve the problem:  \n\n**Minimize** $Z = 15x_1 + 20x_2,$ \n\nsubject to \n\n$\n\\begin{array}{rcrcr}\nx_1 & + & 2x_2 & \\geq & 10 \\\\\n2 x_1 & - &  3x_2 & \\leq & 6 \\\\\nx_1 & + & x_2 & \\geq & 6\n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0.$ ","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"78f6a6","input":"**Textbook Problem 3.2-3.** This is your lucky day. You have just won a \\$20,000\n  prize. You are setting aside \\$8,000 for taxes and partying\n  expenses, but you have decided to invest the other \\$12,000. Upon\n  hearing this news, two different friends have offered you an\n  opportunity to become a partner in two different entrepreneurial\n  ventures, one planned by each friend. In both cases, this investment\n  would involve expending some of your time next summer as well as\n  putting up cash. Becoming a full partner in the first friend’s\n  venture would require an investment of \\$10,000 and 400 hours, and\n  your estimated profit (ignoring the value of your time) would be\n  \\$9,000. The corresponding figures for the second friend’s venture\n  are \\$8,000 and 500 hours, with an estimated profit to you of\n  \\$9,000. However, both friends are flexible and would allow you to\n  come in at any fraction of a full partnership you would like. If you\n  choose a fraction of a full partnership, all the above figures given\n  for a full partnership (money investment, time investment, and your\n  profit) would be multiplied by this same fraction.  Because you were\n  looking for an interesting summer job anyway (maximum of 600 hours),\n  you have decided to participate in one or both friends’ ventures in\n  whichever combination would maximize your total estimated\n  profit. You now need to solve the problem of finding the best\n  combination.\n  \n(a) Describe the analogy between this problem and\n  the Wyndor Glass Co. problem discussed in Sec. 3.1. Then construct\n  and fill in a table like Table 3.1 for this problem, identifying\n  both the activities and the resources.  \n\n(b) Formulate a linear\n  programming model for this problem.  \n\n(c) Use <a href=\"http://www.desmos.com\">Desmos</a> to solve this model by the graphical\n  method. What are the values of the decision variables at the optimal solution?  What is the total estimated profit?  ","metadata":{"hidden":true},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"7ac30c","input":"### First Pyomo Solution","pos":48,"type":"cell"}
{"cell_type":"markdown","id":"7bf9ae","input":"<a href=\"https://www.desmos.com/\">Desmos</a> is a step up from \"paper and pencil\", but is still pretty hands-on.  While there are easier tools to use (e.g. PHPSimplex), we prefer using Desmos because it helps to understand the relationship between the equations, the feasible solutions, and the optimal solution.","metadata":{"hidden":true},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"854690","input":"## Installing Pyomo and GLPK","metadata":{"heading_collapsed":true},"pos":41,"type":"cell"}
{"cell_type":"markdown","id":"8c39be","input":"### Wyndor Glass Company","metadata":{"heading_collapsed":true},"pos":46,"type":"cell"}
{"cell_type":"markdown","id":"8d0ab2","input":"### *Self Assessment: Paper and Pencil Method*","metadata":{"heading_collapsed":true},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"9239ce","input":"## Pyomo Resources","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"925197","input":"Non-negativity constraints like $d\\geq0$ can be included in the variable declarations by changing ```domain=Reals``` to ```domain=NonNegativeReals```.  \n\nWe can also include lower and upper bounds in the variable declarations like this: ```model.doors = Var(domain=Reals, bounds = (0,4) )```.  \n\n*Try this:*  Copy the Pyomo Wyndor solution into a new code block, add appropriate bounds to the doors and windows variables and delete all constraints except the constraint for Plant 3.  Run the code.  Do you get the same answer?","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"94eaf4","input":"**Textbook Problem 3.1-9.** The Primo Insurance Company is introducing two new product lines: special risk insurance and mortgages. The expected profit is \\$5 per unit on special risk insurance and \\$2 per unit on mortgages.  Management wishes to establish sales quotas for the new product lines to maximize total expected profit. The work requirements are as follows:\n\n<img src=\"images/screen-problem2.png\" width=\"440\">\n\n(a) Formulate a linear programming model for this problem.\n\n(b) Use <a href=\"http://www.desmos.com\">Desmos</a> to solve this model using the graphical method. Paste screen shots of your solution into your homework file.\n\n(c) Verify the exact value of your optimal solution from  (b)\n  by solving algebraically for the simultaneous solution of the\n  relevant two equations","metadata":{"hidden":true},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"950bd6","input":"If you're working in CoCalc these are already installed.  If you want to install them at home we suggest using the Anocanda distribution, then in a terminal window:\n\ninstall Pyomo with:\n```conda install -c conda-forge pyomo```\n\ninstall GLPK with:\n```conda install -c conda-forge glpk```\n\n## Solution Algorithms behind Pyomo\n\nPyomo works with a wide variety of solvers, but the Pyomo code remains the same. There are two main types of solvers:\n* those based on the simplex method\n* interior point methods\n\nBoth of these are discussed in some detail in the textbook in Chapter 4.  We won't go into the details behind these methods, but for most problems they behave similarly in terms of performance.  Linear programs with thousands of variables are now fairly routine for most solvers.  GLPK is based on the simplex method.","metadata":{"hidden":true},"pos":42,"type":"cell"}
{"cell_type":"markdown","id":"960326","input":"**Textbook Problem 3.2-4.** Use the graphical method to find all optimal soutions for the\nfollowing model:  \n\nMaximize $Z = 500x_1 + 300x_2,$ \n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n15 x_1 & + &  5 x_2 & \\leq & 300 \\\\\n10 x_1 & + &   6 x_2 & \\leq & 240 \\\\\n8x_1 & + & 12x_2 & \\leq & 450\n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0.$","metadata":{"hidden":true,"jupyter":{"source_hidden":false}},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"9771d0","input":"The video below demonstrates how we will use CoCalc in this class.  If you got this notebook without signing up for CoCalc (possible through github) then visit Canvas to find and follow the \"CoCalc and Jupyter Instructions\" handout before viewing the video.  Even if you setup your own Jupyter environment at home, you'll still need to submit your assignments via CoCalc.\n\n<font color=\"blue\">In CoCalc you can use this notebook in either the CoCalc interface, the Jupyter Classic View, or in Jupyter Lab.  Jupyter Lab is our personal favorite, but the CoCalc interface has automatic backups and other features.  \n**In the CoCalc interface always be sure to explicitly save your file(s) before exiting - press the green \"Save\" button if it isn't light green.** </font>","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"a0a3e2","input":"Read Hillier 3.3 and answer the questions below.  Solutions are found in the **Self_Assessment_Solutions** notebook.\n\nFor parts (a) - (c) below, state which, if any, linear programming model assumptions are violated and why.\n\n(a) Maximize $Z = 2x_1 + 7x_2 + x_1 x_2,$ \n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n5 x_1 & + &  3 x_2 & \\leq & 30 \\\\\n x_1 & + &  3 x_2 & \\leq & 40 \\\\\n12 x_1 & + & x^2_2 & \\leq & 50\n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0.$\n\n(b) Minimize $Z = x_1 + 2x_2 + 3,$ \n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n & + &  5 x_2 & \\geq & 8 \\\\\n x_1 & + &  & \\geq & 4 \\\\\n x_1 & + & x_2 & \\geq & 10\n\\end{array}\n$\n\nand $x_1 = 1,2,3, \\ldots, x_2 = 1,2,3, \\ldots$\n\n(c)  Maximize $Z = 0.5 x + 0.3 y$\n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n2x & - & 0.1 y & \\leq & 2.5 \\\\\n0.25 x & + & 1 & \\leq & 5.5 \\\\\n 3 x & + & a_2 y & \\leq & 7.9\n\\end{array}\n$\n\n$x \\geq 0, y \\geq 0,$ \n\n$2 \\leq a_2 \\leq 3$\n\n<font color=\"red\">**Note:** We don't collect or grade the Self-Assessment questions (even though some of them have language that suggest you should submit something).  Do not submit the self-assessments.  The Self-Assessment solutions are included with each lesson in a separate Jupyter notebook.</font>","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"a6a3ee","input":"## Problem Description (video)","metadata":{"heading_collapsed":true},"pos":64,"type":"cell"}
{"cell_type":"markdown","id":"a704cd","input":"## What is Pyomo?","metadata":{"heading_collapsed":true},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"a71804","input":"# Introduction and Set-Up","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"a86a6c","input":"Get \"old school\" and solve a graphical example with paper and pencil along with some graphing and algebra.  This video talks you through an example.  Doing this yourself will help your understanding (and appreciation) of how optimal solutions are found graphically using various software applications. ","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"a9a8bf","input":"* A Python framework for formulating optimization models\n* Similar to other mathematical programming languages such as AMPL and LINDO (see page 72 in the textbook)\n* Uses natural math syntax for models (we'll get into examples below)\n* Allows separation of the model from the data to formulate large models concisely\n* Works with many solvers including GLPK, CPLEX, Gurobi, etc.\n\nPyomo is an example of a declarative programming language.  Instead of specifying exactly how to get the solution (imperative programming) we *declare* the problem mathematically.  Pyomo then translates the mathematical problem into a computer problem that can be solved by one of many avaialable solvers.","metadata":{"hidden":true},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"ac7ebe","input":"#### *Self-Assessment: Specifying Bounds*","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"bacfab","input":"We're going to make sausages by blending pork, wheat, and starch.  Our objective is to minimize the cost of making the sausages.  The table below shows the ingredients available, the cost, and the amount of each ingredient available from our supplier:\n\nIngredient | Cost ($/kg) | Amount (kg)\n-----------|------|--------------\nPork       | 4.32 | 7\nWheat      | 2.46 | 20.0\nStarch     | 1.86 | 17\n\nAdditionally, we have 23 kg of pork on hand that we must use in the sausages.\n\nWe want to make 2 types of sausage:\n* Economy ( > 40% pork)\n* Premium ( > 60% pork)\n\nEach sausage is 50 grams (0.05 kg).  \n\nAccording to government regulations, the most starch we can use in our sausages is 25% by weight.\n\nWe have a demand for 350 economy sausages and 500 premium sausages.","pos":81,"type":"cell"}
{"cell_type":"markdown","id":"c4636e","input":"## Software for Graphical Solutions","metadata":{"heading_collapsed":true},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"c9c8fe","input":"**Concrete Models:** data first, then model:\n\n<img src=\"images/concrete_model.png\" width=\"220\">\n\n* 1-pass construction: numerical constants supplied as model is built\n* easier to script\n* harder to reuse model\n\n**Abstract Models:** model first, then data:\n\n<img src=\"images/abstract_model.png\" width=\"320\">\n\n* 2-pass construction\n* Pass 1: Model is constructed with unknown numerical constants\n* Pass 2: Numerical constants added from separate file at runtime\n* harder to script\n* **easier for large problems and model reuse**\n\nWe'll stick to concrete models in this course, but we'll take steps toward making them abstract by separating the data and the model.","metadata":{"hidden":true},"pos":44,"type":"cell"}
{"cell_type":"markdown","id":"d40d28","input":"## Solving the model in Pyomo","metadata":{"heading_collapsed":true},"pos":70,"type":"cell"}
{"cell_type":"markdown","id":"db4688","input":"## Pyomo Example","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"dcb0ac","input":"**Textbook Problem 3.4-10** Larry Edison is the director of the Computer Center for Buckly\nCollege. He now needs to schedule the staffing of the center. It is\nopen from 8 A.M. until midnight. Larry has monitored the usage of the\ncenter at various times of the day, and determined that the following\nnumber of computer consultants are required: \n\n<img src=\"images/screen-problem3_4-10.png\" alt=\"Solution\" width=\"440\">\n\nTwo types of computer consultants can be hired: full-time and\npart-time. The full-time consultants work for 8 consecutive hours in\nany of the following shifts: morning (8 A.M.–4 P.M.), afternoon\n(noon–8 P.M.), and evening (4 P.M.–midnight). Full-time consultants\nare paid \\\\$40 per hour.  Part-time consultants can be hired to work\nany of the four shifts listed in the above table. Part-time\nconsultants are paid \\\\$30 per hour.  An additional requirement is that\nduring every time period, there must be at least 2 full-time\nconsultants on duty for every part-time consultant on duty.  Larry\nwould like to determine how many full-time and how many part-time\nworkers should work each shift to meet the above requirements at the\nminimum possible cost.\n\n(a) Formulate a linear programming model for this problem. (Hint: you could have 7 design variables - 3 for the number of full-time workers on each shift and 4 for the number of part-time workers on each shift.)\n\n(b) Solve this model using Pyomo.  You may\n  find fractional numbers of consultants per shift so round the\n  answers to get an approximate solution.  Report the total cost with\n  both fractional and rounded numbers of consultants.\n  \n(c) (not in book) Using Pyomo in Python, require the decision variables to be integers (specify **domain=NonNegativeIntegers** rather than **NonNegativeReals** for the decision variables), and compute the solution.  *How does it compare to the solution in (b)?* This is now an integer programming problem and is not solved by the simplex method.  We'll learn more about integer programming soon.  Be aware that integer programming problems are generally much more computationally intense than those using real valued variables.","pos":75,"type":"cell"}
{"cell_type":"markdown","id":"ddec91","input":"### *Self-Assessment: Formulate and Solve #2*","pos":74,"type":"cell"}
{"cell_type":"markdown","id":"e0a323","input":"**Textbook Problem 3.4-8 (a,c)** Ralph Edmund loves steaks and potatoes. Therefore, he has\n  decided to go on a steady diet of only these two foods (plus some\n  liquids and vitamin supplements) for all his meals. Ralph realizes\n  that this isn’t the healthiest diet, so he wants to make sure that\n  he eats the right quantities of the two foods to satisfy some key\n  nutritional requirements. He has obtained the nutritional and cost\n  information shown below.  Ralph wishes to\n  determine the number of daily servings (may be fractional) of steak\n  and potatoes that will meet these requirements at a minimum cost.\n  \n<img src=\"images/screen-problem3.png\" alt=\"Solution\" width=\"440\" height=\"250\">\n\n(a) Formulate a mathematical model (the linear program) for this problem.\n\n(c) Use Pyomo to solve the model.  Report the minimum cost as well as the number of servings each of steak and potatoes at the minimum.","pos":62,"type":"cell"}
{"cell_type":"markdown","id":"e2c30a","input":"# What is a Linear Program?","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"e6a855","input":"## Unbounded Regions","metadata":{"heading_collapsed":true},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"edaf03","input":"**Textbook Problem 3.5-6 (a,e).** Maureen Laird is the chief financial officer for the Alva\n  Electric Co., a major public utility in the midwest. The company has\n  scheduled the construction of new hydroelectric plants 5, 10, and 20\n  years from now to meet the needs of the growing population in the\n  region served by the company. To cover at least the construction\n  costs, Maureen needs to invest some of the company’s money now to\n  meet these future cash-flow needs. Maureen may purchase only three\n  kinds of financial assets, each of which costs \\$1 million per\n  unit. Fractional units may be purchased. The assets produce income\n  5, 10, and 20 years from now, and that income is needed to cover at\n  least minimum cash-flow requirements in those years. (Any excess\n  income above the minimum requirement for each time period will be\n  used to increase dividend payments to shareholders rather than\n  saving it to help meet the minimum cash-flow requirement in the\n  next time period.) The following table shows both the amount of\n  income generated by each unit of each asset and the minimum amount\n  of income needed for each of the future time periods when a new\n  hydroelectric plant will be constructed. \n  \n<img src=\"images/screen-problem7.png\" width=\"440\">\n\nMaureen wishes to determine the mix of investments in these assets\nthat will cover the cash-flow requirements while minimizing the total\namount invested.\n\n(a) Formulate a linear programming model for this problem.\n  \n(e) Use Pyomo to solve the model.","pos":77,"type":"cell"}
{"cell_type":"markdown","id":"f1909f","input":"## Mathematical Formulation (video)","metadata":{"heading_collapsed":true},"pos":67,"type":"cell"}
{"cell_type":"markdown","id":"f2af6f","input":"This is problem 3.4-9, page 85, from the textbook.\n\nWeb Mercantile sells many household products through an online catalog. The company needs substantial warehouse space for storing its goods. Plans now are being made for leasing warehouse storage space over the next 5 months. Just how much space will be required in each of these months is known. However, since these space requirements are quite different, it may be most economical to lease only the amount needed each month on a month-by-month basis. On the other hand, the additional cost for leasing space for additional months is much less than for the first month, so it may be less expensive to lease the maximum amount needed for the entire 5 months. Another option is the intermediate approach of changing the total amount of space leased (by adding a new lease and/or having an old lease expire) at least once but not every month.\n\nThe space requirement and the leasing costs for the various leasing periods are as follows:","metadata":{"hidden":true},"pos":65,"type":"cell"}
{"cell_type":"markdown","id":"f5b26f","input":"# Solving Linear Programs with Pyomo","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"f7b38d","input":"#### Pyomo Solution","pos":51,"type":"cell"}
{"cell_type":"markdown","id":"f9dc28","input":"### *Self-Assessment: Formulate and Solve #3*","pos":76,"type":"cell"}
{"cell_type":"markdown","id":"fae5f3","input":"# Sausages Blending Problem ","pos":78,"type":"cell"}
{"cell_type":"markdown","id":"fc5493","input":"#### Video: Code Walkthrough","pos":57,"type":"cell"}
{"id":0,"time":1630360484703,"type":"user"}
{"last_load":1630370790789,"type":"file"}