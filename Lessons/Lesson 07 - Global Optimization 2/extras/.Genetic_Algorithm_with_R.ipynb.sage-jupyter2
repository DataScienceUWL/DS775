{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-7e4e40b6-3ef3-4caa-81a2-4b67b3d309af.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.10"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"250.696px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1635216777727,"exec_count":2,"id":"4ea952","input":"import warnings\nwarnings.filterwarnings('ignore')","kernel":"python3","metadata":{"code_folding":[0]},"pos":0,"start":1635216777722,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"cd43bd","input":"# load problem data into Python \nimport pandas as pd\nimport json\n\nwith open(\"data/HillierTSP.json\", \"r\") as tsp_data:\n    tsp = json.load(tsp_data)\n\ndistance_matrix = tsp[\"DistanceMatrix\"]\nind_size = tsp[\"TourSize\"] # number fo variables or dimension of the problem\n\n# put distance matrix into pandas dataframe for easy passing to R\ndist_mat_pd = pd.DataFrame(distance_matrix)\ndist_mat_pd","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0</td>\n      <td>12</td>\n      <td>10</td>\n      <td>100</td>\n      <td>100</td>\n      <td>100</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>12</td>\n      <td>0</td>\n      <td>8</td>\n      <td>12</td>\n      <td>100</td>\n      <td>100</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>10</td>\n      <td>8</td>\n      <td>0</td>\n      <td>11</td>\n      <td>3</td>\n      <td>100</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>100</td>\n      <td>12</td>\n      <td>11</td>\n      <td>0</td>\n      <td>11</td>\n      <td>10</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>100</td>\n      <td>100</td>\n      <td>3</td>\n      <td>11</td>\n      <td>0</td>\n      <td>6</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>100</td>\n      <td>100</td>\n      <td>100</td>\n      <td>10</td>\n      <td>6</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>12</td>\n      <td>100</td>\n      <td>9</td>\n      <td>100</td>\n      <td>7</td>\n      <td>9</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     0    1    2    3    4    5    6\n0    0   12   10  100  100  100   12\n1   12    0    8   12  100  100  100\n2   10    8    0   11    3  100    9\n3  100   12   11    0   11   10  100\n4  100  100    3   11    0    6    7\n5  100  100  100   10    6    0    9\n6   12  100    9  100    7    9    0"},"exec_count":2,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"3df862","input":"out","output":{"0":{"data":{"text/html":"\n    <span>ListVector with 2 elements.</span>\n    <table>\n      <tbody>\n      \n      <tr>\n      <th>\n        population\n      </th>\n      <td>\n        \n    <span>Matrix with 4 elements.</span>\n    <table>\n      <tbody>\n      <tr>\n      \n      <td>\n        0.843087\n      </td>\n      \n      <td>\n        0.843087\n      </td>\n      \n      <td>\n        0.843087\n      </td>\n      \n      <td>\n        0.843087\n      </td>\n      \n      </tr>\n      </tbody>\n    </table>\n    \n      </td>\n      </tr>\n      \n      <tr>\n      <th>\n        fitness\n      </th>\n      <td>\n        \n    <span>FloatVector with 4 elements.</span>\n    <table>\n      <tbody>\n      <tr>\n      \n      <td>\n        -1.508248\n      </td>\n      \n      <td>\n        -1.508248\n      </td>\n      \n      <td>\n        -1.508248\n      </td>\n      \n      <td>\n        -1.508248\n      </td>\n      \n      </tr>\n      </tbody>\n    </table>\n    \n      </td>\n      </tr>\n      \n      </tbody>\n    </table>\n    ","text/plain":"R object with classes: ('list',) mapped to:\n<ListVector - Python:0x0000011ADC71FF88 / R:0x0000011AB174CC18>\n[Matrix, FloatVector]\n  population: <class 'rpy2.robjects.vectors.Matrix'>\n  R object with classes: ('matrix',) mapped to:\n<Matrix - Python:0x0000011AB100F508 / R:0x0000011AB2E2F4B0>\n[0.843087, 0.843087, 0.843087, 0.843087]\n  fitness: <class 'rpy2.robjects.vectors.FloatVector'>\n  R object with classes: ('numeric',) mapped to:\n<FloatVector - Python:0x0000011AAE0EFEC8 / R:0x0000011AB3177928>\n[-1.508248, -1.508248, -1.508248, -1.508248]"},"exec_count":23,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"a3ef97","input":"%%R  -o out -o GA\nrequire(GA)\n# 1) one-dimensional function\nf <- function(x) abs(x)+cos(x)\ncurve(f, -20, 20)\nfitness <- function(x) -f(x)\nGA <- ga(type = \"real-valued\", popSize=4, fitness = fitness, lower = -20, upper = 20)\n\nout <- ga_tourSelection(GA, k = 3)","output":{"0":{"data":{"image/png":"26fbc56a109a5c89d89209ab5d3cbaa0c490c4ac"},"output_type":"display_data"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"8aca62","input":"# load rpy2 to interface R to Python\nimport rpy2.rinterface\n%load_ext rpy2.ipython","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"22844c","input":"%%R -i dist_mat_pd -o best_tour -o best_dist\n# define R cell and import dist_mat_pd as R dataframe\n\n# given a tour, calculate the total cost\ntourCost <- function(tour, costMatrix) {\n  tour <- c(tour, tour[1])\n  route <- embed(tour, 2)[, 2:1]\n  sum(costMatrix[route])\n}\n# inverse of the total distance is the fitness\ntspFitness <- function(tour, ...) 1/tourCost(tour, ...)\n\nrequire(GA)\nnumcities = 7\ncostMatrix = dist_mat_pd\nresult <- ga(type = \"permutation\", fitness = tspFitness, costMatrix=costMatrix, lower = 1, \n             upper = numcities, popSize = 10, maxiter = 500, run = 100, pmutation = 0.2            \n             , monitor = NULL)\n\nbest_dist <- as.vector(1/result@fitnessValue[1])\nbest_tour <- c(result@solution[1,]);","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"660a0c","input":"import rpy2.robjects as robjects\nfrom rpy2.robjects.packages import importr\nbase = importr('base')\nbase.summary(GA)\n","output":{"0":{"data":{"text/html":"\n    <span>ListVector with 11 elements.</span>\n    <table>\n      <tbody>\n      \n      <tr>\n      <th>\n        type\n      </th>\n      <td>\n        \n    <span>StrVector with 1 elements.</span>\n    <table>\n      <tbody>\n      <tr>\n      \n      <td>\n        'real-valued'\n      </td>\n      \n      </tr>\n      </tbody>\n    </table>\n    \n      </td>\n      </tr>\n      \n      <tr>\n      <th>\n        popSize\n      </th>\n      <td>\n        \n    <span>FloatVector with 1 elements.</span>\n    <table>\n      <tbody>\n      <tr>\n      \n      <td>\n        4.000000\n      </td>\n      \n      </tr>\n      </tbody>\n    </table>\n    \n      </td>\n      </tr>\n      \n      <tr>\n      <th>\n        maxiter\n      </th>\n      <td>\n        \n    <span>FloatVector with 1 elements.</span>\n    <table>\n      <tbody>\n      <tr>\n      \n      <td>\n        100.000000\n      </td>\n      \n      </tr>\n      </tbody>\n    </table>\n    \n      </td>\n      </tr>\n      \n      <tr>\n      <th>\n        ...\n      </th>\n      <td>\n        ...\n      </td>\n      </tr>\n      \n      <tr>\n      <th>\n        iter\n      </th>\n      <td>\n        \n    <span>IntVector with 1 elements.</span>\n    <table>\n      <tbody>\n      <tr>\n      \n      <td>\n        100\n      </td>\n      \n      </tr>\n      </tbody>\n    </table>\n    \n      </td>\n      </tr>\n      \n      <tr>\n      <th>\n        fitness\n      </th>\n      <td>\n        \n    <span>FloatVector with 1 elements.</span>\n    <table>\n      <tbody>\n      <tr>\n      \n      <td>\n        -1.180917\n      </td>\n      \n      </tr>\n      </tbody>\n    </table>\n    \n      </td>\n      </tr>\n      \n      <tr>\n      <th>\n        solution\n      </th>\n      <td>\n        \n    <span>Matrix with 1 elements.</span>\n    <table>\n      <tbody>\n      <tr>\n      \n      <td>\n        -0.201062\n      </td>\n      \n      </tr>\n      </tbody>\n    </table>\n    \n      </td>\n      </tr>\n      \n      </tbody>\n    </table>\n    ","text/plain":"R object with classes: ('summary.ga',) mapped to:\n<ListVector - Python:0x0000011AB1F7D748 / R:0x0000011AAEE65C28>\n[StrVector, FloatVector, FloatVector, FloatVector, ..., RNULLType, IntVector, FloatVector, Matrix]\n  type: <class 'rpy2.robjects.vectors.StrVector'>\n  R object with classes: ('character',) mapped to:\n<StrVector - Python:0x0000011AB1E9A9C8 / R:0x0000011AAE7B5670>\n['real-valued']\n  popSize: <class 'rpy2.robjects.vectors.FloatVector'>\n  R object with classes: ('numeric',) mapped to:\n<FloatVector - Python:0x0000011AB1E9A3C8 / R:0x0000011AAE78B6B0>\n[4.000000]\n  maxiter: <class 'rpy2.robjects.vectors.FloatVector'>\n  R object with classes: ('numeric',) mapped to:\n<FloatVector - Python:0x0000011AB1E92FC8 / R:0x0000011AB1B898A0>\n[100.000000]\n  elitism: <class 'rpy2.robjects.vectors.FloatVector'>\n  R object with classes: ('numeric',) mapped to:\n<FloatVector - Python:0x0000011AB1E923C8 / R:0x0000011AAE7D5950>\n[1.000000]\n...\n  pmutation: <class 'rpy2.rinterface.RNULLType'>\n  rpy2.rinterface.NULL\n  domain: <class 'rpy2.robjects.vectors.IntVector'>\n  R object with classes: ('integer',) mapped to:\n<IntVector - Python:0x0000011AB1E92588 / R:0x0000011AAF6902A0>\n[100]\n  suggestions: <class 'rpy2.robjects.vectors.FloatVector'>\n  R object with classes: ('numeric',) mapped to:\n<FloatVector - Python:0x0000011AB1E92448 / R:0x0000011AAF68F650>\n[-1.180917]\n  iter: <class 'rpy2.robjects.vectors.Matrix'>\n  R object with classes: ('matrix',) mapped to:\n<Matrix - Python:0x0000011AB1E9A748 / R:0x0000011AB1B06FB0>\n[-0.201062]"},"exec_count":43,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"84510b","input":"GA.rx('popSize')","output":{"0":{"ename":"AttributeError","evalue":"'RS4' object has no attribute 'rx'","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[1;32m<ipython-input-44-47f0e9025118>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mGA\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrx\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'popSize'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[1;31mAttributeError\u001b[0m: 'RS4' object has no attribute 'rx'"]}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"d9914a","input":"# back in Python again!\nprint(\"The best tour found was:\")\nprint(best_tour)\nprint(f\"The total distance for this tour is {best_dist[0]}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The best tour found was:\nx1 x2 x3 x4 x5 x6 x7 \n\r\n 7  5  3  1  2  4  6 \n\nThe total distance for this tour is 63.0\n"}},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"2fc6a3","input":"# Genetic Algorithm via R\n\nR has an easy-to-use genetic algorithm package called `GA`.  You can find <a href=\"https://cran.r-project.org/web/packages/GA/GA.pdf\" target=\"_blank\">documentation about it here.</a>. \n\nThis notebook also serves as an example of how to integrate R into a Python Jupyter notebook using the `rpy2` package.  For integrating R and Python in a Jupyter notebook we found <a href=\"https://www.linkedin.com/pulse/interfacing-r-from-python-3-jupyter-notebook-jared-stufft/\">this brief tutorial</a> quite helpful.","pos":1,"type":"cell"}
{"id":0,"time":1635216737386,"type":"user"}
{"last_load":1635216736997,"type":"file"}