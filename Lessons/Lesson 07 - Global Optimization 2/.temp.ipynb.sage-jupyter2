{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-15850a9f-0d29-47f8-a274-1dd2bb22de01.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"end":1646877558215,"exec_count":3,"id":"4c0c3b","input":"import GAUtilities as ga # this is a local package\nimport numpy as np\n\nnp.random.seed(10101010) #for everything, everything, everything... (Courtesy of the Violent Femmes)\npop_size = 6 # should be even due to the way we'll implement crossover\nind_size = 3 #this is the number of genes in each individual\n\n#bounds are used for both real and integer problems. \n#For integer problems, the upper bound should be 1 over what you actually want\nbounds = [1,7]\n\n#each type of problem might use different types of populations. This one is a simple matrix of integers.\npop = np.random.randint(low=bounds[0], high=bounds[1], size =(pop_size,ind_size))\n\ndef obj_sumDice(x):\n    x = np.array(x) # force a numpy arrray here so that the math below works\n    return np.sum(x)\n\n#compute the fitness by passing in the function and population\nfitness = ga.computeFitness(obj_sumDice, pop)\n\nprint('Not sorted')\nprint(fitness)\nprint(pop)\n\npop = ga.sortPop(pop, fitness)#sort population\n\nprint('Sorted')\nprint(pop)","kernel":"python3","output":{"0":{"name":"stdout","text":"Not sorted\n[ 9. 13.  9. 15. 13.  7.]\n[[2 3 4]\n [3 6 4]\n [2 3 4]\n [6 4 5]\n [6 2 5]\n [4 1 2]]\nSorted\n[[4 1 2]\n [2 3 4]\n [2 3 4]\n [3 6 4]\n [6 2 5]\n [6 4 5]]\n"}},"pos":0,"start":1646877558208,"state":"done","type":"cell"}
{"exec_count":2,"id":"78f7e7","input":"","kernel":"python3","output":{"0":{"data":{"text/plain":"array([[4, 1, 2],\n       [2, 3, 4],\n       [2, 3, 4],\n       [3, 6, 4],\n       [6, 2, 5],\n       [6, 4, 5]])"},"exec_count":2}},"pos":1,"state":"done","type":"cell"}
{"id":"a45c25","input":"","pos":2,"type":"cell"}
{"last_load":1646877060360,"type":"file"}