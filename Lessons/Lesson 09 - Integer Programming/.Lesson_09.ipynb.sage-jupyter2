{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-68950599-b86d-468c-88fd-3060882aa934.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"263.082px"},"toc_section_display":true,"toc_window_display":true},"toc-showcode":false,"toc-showmarkdowntxt":false,"toc-showtags":false,"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"ff69f9","input":"# EXECUTE FIRST\n\n# computational imports\nfrom pyomo.environ import *\n# for reading files from urls\nimport urllib.request\n# display imports\nfrom IPython.display import display, IFrame\nfrom IPython.core.display import HTML\n\n# for playing videos, customize height and width if desired\ndef play_video(vid_name, w = 640, h = 360):\n    vid_path = \"https://media.uwex.edu/content/ds/ds775_r19/\"\n    return IFrame( vid_path + vid_name + \"/index.html\", width = w, height = h )\n\n# import notebook styling for tables and width etc.\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ee4f9d","input":"#Abstract Code for the Prototype Problem\n\ndecisions = ['i1', 'i2', 'i3', 'i4']\nvals = [8,4,6,16]\ncosts = [5,3,2,8]\n\ntotal_capital = 10\n\n\ncts = ['ct2','ct3','ct4']\n#create a matric of 1s and zeros that would match our constraints\ncoefs = {'ct2':dict(zip(decisions,[ 0,1,1,0])), #model.x['i2'] + model.x['i3'] <= 1\n         'ct3':dict(zip(decisions,[0,0,1,-1])), #- model.x['i4'] + model.x['i3'] <= 0\n         'ct4':dict(zip(decisions,[1,-1,0,0]))} #- model.x['i2'] + model.x['i1'] <= 0\nrhs = dict(zip(cts,[1,0,0]))\n\n\n# Concrete Model\nmodel = ConcreteModel(name = \"BiInvest2\")\n\n#Decision Variables\nmodel.investments = Var(decisions, domain=Boolean)\n\n#Objective\nmodel.profit = Objective(expr=sum(vals[decisions.index(d)] * model.investments[d] for d in decisions),\n                         sense=maximize)\n\nmodel.constraints = ConstraintList()\nmodel.constraints.add(sum(costs[decisions.index(d)] * model.investments[d] for d in decisions) <= total_capital)\nfor c in cts:\n    model.constraints.add( expr = sum(coefs[c][d]*model.investments[d] for d in decisions) <= rhs[c])\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n\n# display solution\nprint(f\"The future profit is ${model.profit():,.2f} million.\")\nfor d in decisions:\n    print(f\"Invest {d}? {['No','Yes'][int(model.investments[d]())]}\" )","output":{"0":{"name":"stdout","output_type":"stream","text":"The future profit is $22.00 million.\nInvest i1? No\nInvest i2? No\nInvest i3? Yes\nInvest i4? Yes\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"fa2aa8","input":"# concrete Good Products\nm = ConcreteModel(name=\"Example_1\")\n\nm.x1 = Var(bounds=(0,7))\nm.x2 = Var(bounds=(0,5))\nm.x3 = Var(bounds=(0,9))\n\nm.y1 = Var(domain=Boolean)\nm.y2 = Var(domain=Boolean)\nm.y3 = Var(domain=Boolean)\nm.y4 = Var(domain=Boolean) # 0 to use Plant 1, 1 to use Plant 2\n\nm.profit = Objective( expr = 5*m.x1 + 7*m.x2 + 3*m.x3, sense = maximize)\n\nbigM = 10000\n\n# Constraints:\nm.cts = ConstraintList()\nm.cts.add( m.y1 + m.y2 + m.y3 <= 2)\nm.cts.add( 3 * m.x1 + 4 * m.x2 + 2 * m.x3 <= 30 + bigM * m.y4 )\nm.cts.add( 4 * m.x1 + 6 * m.x2 + 2 * m.x3 <= 40 + bigM * (1 - m.y4))\nm.cts.add( m.x1 <= bigM * m.y1)\nm.cts.add( m.x2 <= bigM * m.y2)\nm.cts.add( m.x3 <= bigM * m.y3)\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(m)\n\nprint(f\"Maximum Profit = ${1000*m.profit():,.2f}\")\n\nprint(\"Use \"+ \"Plant 2.\" if m.y4() else \"Plant 1.\" )\n\nfor i,amount in enumerate([m.x1(),m.x2(),m.x3()]):\n    if amount > 0:\n        print(f\"Produce {amount:0.1f} of product {i+1} per week\")","output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum Profit = $54,500.00\nUse Plant 2.\nProduce 5.5 of product 1 per week\nProduce 9.0 of product 3 per week\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"4d6008","input":"# abstract Good Products\n\n# Problem data\nproducts = ['Product1', 'Product2', 'Product3']\nunit_profit = dict(zip(products, [5, 7, 3]))\n\nsales_potential = dict(zip(products, [7, 5, 9]))\ndef bounds_rule(model, product):\n    return ((0, sales_potential[product]))\n\nplants = ['Plant1', 'Plant2']\nproduction_avail = dict(zip(plants, [30, 40]))\n\ntpu = [[3, 4, 2], [4, 6, 2]]\ntime_per_unit = {\n    plants[p]: dict(zip(products, tpu[p][:]))\n    for p in range(len(plants))\n}\nbigM = 10000\n\nmax_num_products_to_choose = 2\nnum_plants_to_use = 1\n\n# Instantiate concrete model\nM = ConcreteModel(name=\"Example_1\")\n\n# Decision Variables\nM.x = Var(products, domain=Reals, bounds=bounds_rule)\nM.y = Var(products, domain=Boolean)\nM.plant_choice = Var(plants, domain=Boolean)\n\n# Objective:  Maximize Profit\nM.profit = Objective(expr=sum(unit_profit[pr] * M.x[pr] for pr in products),\n                     sense=maximize)\n\n# Constraints:\nM.constraints = ConstraintList()\n\nfor pr in products:  # produce product only if product is chosen\n    M.constraints.add(M.x[pr] <= bigM * M.y[pr])\n\n# choose 2 products\nM.constraints.add(sum(M.y[pr] for pr in products) <= max_num_products_to_choose)\n\nfor pl in plants:  # production capacities\n    M.constraints.add(\n        sum(time_per_unit[pl][pr] * M.x[pr]\n            for pr in products) <= production_avail[pl] +\n        bigM * (1-M.plant_choice[pl]) )\n\n# choose 1 plant\nM.constraints.add(sum(M.plant_choice[pl] for pl in plants) == num_plants_to_use)\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(M)\n\nprint(f\"Maximum Profit = ${1000 * M.profit():,.2f}\")\n\nprint(\"\\nWhich plant to use:\")\nfor pl in plants:\n    print(f\"Produce at {pl}? {['No','Yes'][int(M.plant_choice[pl]())]}\")\n\nprint(\"\\nWhich products and how many:\")\nfor pr in products:\n    if bool(M.y[pr]()):\n        print(f\"Produce {pr} at a rate of {M.x[pr]():.2f} per week\")\n    else:\n        print(f\"Do not produce {pr}\" )","output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum Profit = $54,500.00\n\nWhich plant to use:\nProduce at Plant1? No\nProduce at Plant2? Yes\n\nWhich products and how many:\nProduce Product1 at a rate of 5.50 per week\nDo not produce Product2\nProduce Product3 at a rate of 9.00 per week\n"}},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"09c1c0","input":"## *Self-Assessment: Type of Programming*","metadata":{"heading_collapsed":true},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"108ea8","input":"The Research and Development Division of the GOOD PRODUCTS COMPANY has developed three possible new products. However, to avoid undue diversification of the companyâ€™s product line, management has imposed the following restriction:\n\n- **Restriction 1:** From the three possible new products, at most two should be chosen to be produced.\n\nEach of these products can be produced in either of two plants. For administrative reasons, management has imposed a second restriction in this regard.\n\n- **Restriction 2:** Just one of the two plants should be chosen to be the sole producer of the new products.\n\nThe production cost per unit of each product would be essentially the same in the two plants. However, because of differences in their production facilities, the number of hours of production time needed per unit of each product might differ between the two plants. These data are given in the table below, along with other relevant information, including marketing estimates of the number of units of each product that could be sold per week if it is produced. The objective is to choose the products, the plant, and the production rates of the chosen products so as to maximize total profit.\n\n<img src=\"images/good_products_table.png\" width=\"600\">","metadata":{"hidden":true},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"235c04","input":"### Problem Description","metadata":{"heading_collapsed":true},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"2d65b7","input":"## *Self-Assessment: Either/Or Constraints*","metadata":{"heading_collapsed":true},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"35a232","input":"Maximize $Z = 5x_1 + 7x_2 + 3x_3$\n\nSubject to:\n\n$\n\\begin{array}{l}\nx_1 \\leq 7 \\\\\nx_2 \\leq 5 \\\\\nx_3 \\leq 9 \\\\\n y_1 + y_2 + y_3 \\leq 2 \\\\\n3x_1 + 4x_2 + 2x_3 \\leq 30 + My_4 \\\\\n4x_1 + 6x_2 + 2x_3 \\leq 40 + M(1-y_4) \\\\\n0 \\leq x_i \\leq My_i, \\text{ for } i=1,2,3 \\\\\nx_i \\geq 0, \\text{ for } i=1, 2, 3  \\\\\ny_i \\text{ binary, for } i=1, 2, 3, 4 \\\\\n\\end{array}\n$\n\nNote that if $y_4 = 0$ we are using Plant 1 and if $y_4 = 1$ we are using Plant 2.\n\nThe complete formulation of this problem is discussed on pages 490-491 of the textbook. ","metadata":{"hidden":true},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"3b95c6","input":"# Mixed Integer Programming\n\nWatch the following video for an introduction to mixed integer programming.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gKahSjuNIAM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Key Concepts\n* some variables are constrained to be integers while other are not\n* very common approach to many problems\n* mixed integer programming often uses one of two BigM approaches to enforce constraints\n    * Either-Or Constraints\n    * Fixed Cost","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"3e195c","input":"To make the abstract formulation we add an extra binary variable, $y_5$, so that we have one for each plant to make the plant constraints have the same format.  The math formulation then replaces:\n\n$\n\\begin{array}{l}\n3x_1 + 4x_2 + 2x_3 \\leq 30 + My_4 \\\\\n4x_1 + 6x_2 + 2x_3 \\leq 40 + M(1-y_4) \\\\\n\\end{array}\n$\n\nwith:\n\n$\n\\begin{array}{l}\n3x_1 + 4x_2 + 2x_3 \\leq 30 + M(1-y_4)\\\\\n4x_1 + 6x_2 + 2x_3 \\leq 40 + M(1-y_5)\\\\\ny_4 + y_5 = 1\n\\end{array}\n$\n\nso if $y_4 = 1$ we are using Plant 1 and if $y_5 = 1$ we are using Plant 2.","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"459ce5","input":"**True or False:** Integer programs are generally more computationally difficult than linear programs with continuous variables. ","metadata":{"hidden":true},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"4cd7b9","input":"<font size=18>Lesson 09: Integer Programming</font>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"59d5b2","input":"## *Self-Assessment: Rounding Solutions to Integers*","metadata":{"heading_collapsed":true},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"6f3484","input":"## *Self-Assessment: Integer Programming*","metadata":{"heading_collapsed":true},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"7e26ff","input":"# General Integer Programming\n\nWatch the following video for a general introduction to integer programming.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yknWGnBN7As\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Key Concepts\n* Decision variables constrained to integer values\n    * Can produce 5 or 6 cars, but not 5.72 cars\n* For pure integer programming (IP) problems, solutions can be obtained simply by changing the domain for the LP from **NonNegativeReals** to **PositiveIntegers** in the Pyomo coding (as seen in textbook problem 3.4-10 as a Self-Assessment back in Lesson 01)\n* Computationally, integer programming can be much more difficult than linear programming (this <a href = https://www.quora.com/What-is-the-difference-between-integer-programming-and-linear-programming > post </a> can help you visualize why this is so)\n","metadata":{"heading_collapsed":true,"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"843176","input":"## Mathematical Formulation","metadata":{"heading_collapsed":true},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"848105","input":"Solving an integer programming problem by rounding off answers obtained by solving it as a linear programming problem, we find that\n\na. The values of the decision variables obtained by rounding are always very close to the optimal values.\n\nb. The true value of the objective function for a maximization problem will likely be less than that found by solving the linear programming problem.\n\nc. The true value of the objective function for a minimization problem will likely be more than that found by solving the linear programming problem.\n\nd. The lower bound reaches zero.\n\ne. None of the above.\n","metadata":{"hidden":true},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"8b83ef","input":"**True or False:**  There are $n^2$ solutions to consider when there are $n$ binary decision variables to be considered in an integer programming problem.","metadata":{"hidden":true},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"9409c7","input":"## *Self Assessment: Solving the California Manufacturing BIP*\nThe textbook presents a prototype Binary Integer Programming Problem - the California Manufacturing Problem. (Chapter 12.1, page 476)\n\nThe mathematical formulation for this problem is:\n\nMaximize $Z=6 x_{1}+5 x_{2}+6 x_{3}+4 x_{4}$ \n\nsubject to\n\n\n$6 x_{1}+3 x_{2}+5 x_{3}+2 x_{4} \\leq 10$\n\n$ x_{3}+x_{4}  \\leq 1$\n\n$-x_{1} + x_{3}  \\leq 0$\n\n$-x_{2} + x_{4}  \\leq 0$\n\n\nand each $x_{i}$ has to be 0 or 1\n\nUse Pyomo in Python to find the solution to the BIP model for the California Manufacturing Company problem.","metadata":{"heading_collapsed":true},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"a4438e","input":"**True or False:** To implement an either/or constraint where one or both of two constraints must be satisfied it is necessary add two binary variables.  ","metadata":{"hidden":true},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"b096b3","input":"The problem \n\nMaximize $Z = 7 x_1 + 3 x_2$\n\nSubject to:\n\n$\n\\begin{array}{ccccc}\n 5 x_1 & +  & 7 x_2   & \\leq & 27 \\\\\n 4 x_1 & +  &   x_2 & \\leq & 14 \\\\\n3x_1 & - & 2x_2 & \\leq & 19\n\\end{array}\n$\n\n$x_1 \\geq 0$, $x_2 \\geq 0$, $x_1$ integer\n\nis an example of a(n)\n\na. nonlinear program.\n\nb. integer program.\n\nc. mixed integer program.\n\nd. none of the above.\n","metadata":{"hidden":true},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"b17e0d","input":"## *Self-Assessment: Number of Solutions in BIP*","metadata":{"heading_collapsed":true},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"b8c16a","input":"## Pyomo Abstract Formulation Solution","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"bd0a64","input":"This is the Good Products example (textbook page 489), similar to the Wyndor problem, in which we have to choose which products to produce and which factories to use.\nThe problem description is reproduced here for convenience. This is an example of a problem that implements the either-or constraint.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"c261b0","input":"## Good Products Example Problem","metadata":{"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"ce738c","input":"# Binary Integer Programming\n\nWatch the following video for an introduction to binary integer programming.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hbNmye6UNYA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Key Concepts \n* contain binary (boolean) variables  \n* *i.e.* 0 for no, 1 for yes\n* effectively turns off or on each decision variable\n* Binary variables are considerably easier to deal with than general integer variables, so they generally can be used to solve substantially larger problems\n    \n\n## Prototype Problem\n\nMaximize $Z=8 x_{1}+4 x_{2}+6 x_{3}+16 x_{4}$ \n\nsubject to\n\n\n$5 x_{1}+3 x_{2}+2 x_{3}+8 x_{4} \\leq 10$\n\n$ x_{2}+x_{3}  \\leq 1$\n\n$-x_{4} + x_{3}  \\leq 0$\n\n$-x_{2} + x_{1}  \\leq 0$\n\n\nand each $x_{i}$ has to be 0 or 1","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"d83fb1","input":"Here we'll just use individual variables $x_1, x_2,$ etc. for maximum transparency.  In the homework you'll need to include abstract formulations, but we include a concrete formulation here to help you understand how binary variables work in Pyomo.  The next section has the abstract formulation.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"dc8159","input":"## Pyomo Concrete Formulation Solution","pos":13,"type":"cell"}
{"id":0,"time":1624998077446,"type":"user"}
{"last_load":1624998078109,"type":"file"}