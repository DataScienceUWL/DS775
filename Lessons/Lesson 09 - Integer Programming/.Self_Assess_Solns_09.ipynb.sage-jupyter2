{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-1336eadc-bcfa-45d6-b4f8-3e152ea4c1d2.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"263.083px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"b26a51","input":"# execute to import notebook styling for tables and width etc.\nfrom IPython.core.display import HTML\nimport urllib.request\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0],"jupyter":{"source_hidden":true}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"4eaf5b","input":"# Unfold for code\nfrom pyomo.environ import *\n\n# Concrete Model\nmodel = ConcreteModel(name = \"CalMan\")\n\n# Decision Variables\nmodel.x = Var( ['factoryLA','factorySF','warehouseLA','warehouseSF'], domain = Boolean)\n\n# Objective \nmodel.obj = Objective( expr = 9*model.x['factoryLA'] + 5*model.x['factorySF'] + \n                      6*model.x['warehouseLA'] + 4*model.x['warehouseSF'], \n                      sense = maximize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = 6*model.x['factoryLA'] + 3*model.x['factorySF'] + \n                      5*model.x['warehouseLA'] + 2*model.x['warehouseSF'] <= 10 )\nmodel.Constraint2 = Constraint( expr = model.x['warehouseLA'] + model.x['warehouseSF'] <= 1 )\nmodel.Constraint3 = Constraint( expr = - model.x['factoryLA'] + model.x['warehouseLA'] <= 0 )\nmodel.Constraint4 = Constraint( expr = - model.x['factorySF'] + model.x['warehouseSF'] <= 0 )\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"The total net present value is ${model.obj():,.2f} million.\")\nprint(f\"Build factory in LA? {['No','Yes'][int(model.x['factoryLA']())]}\" )\nprint(f\"Build factory in SF? {['No','Yes'][int(model.x['factorySF']())]}\" )\nprint(f\"Build warehouse in LA? {['No','Yes'][int(model.x['warehouseLA']())]}\" )\nprint(f\"Build warehouse in SF? {['No','Yes'][int(model.x['warehouseLA']())]}\" )","output":{"0":{"name":"stdout","output_type":"stream","text":"The total net present value is $14.00 million.\nBuild factory in LA? Yes\nBuild factory in SF? Yes\nBuild warehouse in LA? No\nBuild warehouse in SF? No\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"c1c524","input":"# Unfold for code\nfrom pyomo.environ import *\ndecisions = ['factoryLA', 'factorySF', 'warehouseLA', 'warehouseSF']\nnpv = dict(zip(decisions, [9, 5, 6, 4]))\ncap = dict(zip(decisions, [6, 3, 5, 2]))\n\ntotal_capital = 10\n\n#Concrete Model\nmodel = ConcreteModel()\n\n#Decision Variables\nmodel.build = Var(decisions, domain=Boolean)\n\n#Objective\nmodel.npv = Objective(expr=sum(npv[d] * model.build[d]\n                                  for d in decisions),\n                         sense=maximize)\n\ncts = ['ct1','ct2','ct3']\ncoefs = {'ct1':dict(zip(decisions,[ 0,0,1,1])),\n         'ct2':dict(zip(decisions,[-1,0,1,0])),\n         'ct3':dict(zip(decisions,[0,-1,0,1]))}\nrhs = dict(zip(cts,[1,0,0]))\n\nmodel.constraints = ConstraintList()\nmodel.constraints.add(sum(cap[d] * model.build[d] for d in decisions) <= total_capital)\nfor c in cts:\n    model.constraints.add( expr = sum(coefs[c][d]*model.build[d] for d in decisions) <= rhs[c])\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"The total net present value is ${model.npv():,.2f} million.\")\nfor d in decisions:\n    print(f\"Build {d}? {['No','Yes'][int(model.build[d]())]}\" )\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The total net present value is $14.00 million.\nBuild factoryLA? Yes\nBuild factorySF? Yes\nBuild warehouseLA? No\nBuild warehouseSF? No\n"}},"pos":6,"scrolled":true,"type":"cell"}
{"cell_type":"markdown","id":"0f22aa","input":"## *Self-Assessment: Either/Or Constraints - Solution*","metadata":{"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"218331","input":"## *Self-Assessment: Integer Programming - Solution*","metadata":{"heading_collapsed":true,"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"24fc1b","input":"## *Self-Assessment: Type of Programming - Solution*","metadata":{"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"2afe1e","input":"Answer:  True","metadata":{"hidden":true},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"2fc434","input":"Answer: False (only one binary variable is needed)","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"536794","input":"## *Self-Assessment: Rounding Solutions to Integers - Solution*","metadata":{"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"5d454f","input":"#### Abstract Formulation","metadata":{"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"63232c","input":"<font size=18>Lesson 06 - Self-Assessment Solutions</font>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"686817","input":"Answer: False (there are $2^n$ solutions, the number of solutions grows exponentially with the number of variables, see 12.5)","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"705950","input":"## *Self Assessment: Solving the California Manufacturing BIP - Solution*","metadata":{"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"9e5653","input":"## *Self-Assessment: Number of Solutions in BIP - Solution*","metadata":{"toc-hr-collapsed":true,"toc-nb-collapsed":true},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"c343c6","input":"#### Concrete Formulation","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"f9ebd4","input":"Answer:  c","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"ffc322","input":"Answer: e (read section 12.5 again if you missed this)","pos":12,"type":"cell"}
{"id":0,"time":1622901439784,"type":"user"}
{"last_load":1622901439839,"type":"file"}