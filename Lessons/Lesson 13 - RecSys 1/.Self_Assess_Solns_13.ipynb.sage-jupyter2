{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-2b8b4c58-ec44-45e7-a3e8-8ec70d22de0c.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"260.517px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"a00d9a","input":"# EXECUTE FIRST\n\n# computational imports\nimport numpy as np\nimport pandas as pd\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\nimport nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk import word_tokenize    \nnltk.download('averaged_perceptron_tagger')\nfrom sklearn.feature_extraction import text\nfrom nltk.stem import WordNetLemmatizer \nfrom nltk.corpus import wordnet as wn\nimport string\n\n# plotting imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nfrom scipy.spatial import distance\n# for reading files from urls\nimport urllib.request\n# display imports\nfrom IPython.display import display, IFrame\nfrom IPython.core.display import HTML\n\n# import notebook styling for tables and width etc.\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package averaged_perceptron_tagger to\n[nltk_data]     /home/user/nltk_data...\n[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n[nltk_data]       date!\n"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"d3571a","input":"def content_recommender(df, seed, seedCol, sim_matrix,  topN=2): \n    #get the indices based off the seedCol\n    indices = pd.Series(df.index, index=df[seedCol]).drop_duplicates()\n    \n    # Obtain the index of the item that matches our seed\n    idx = indices[seed]\n    \n    # Get the pairwsie similarity scores of all items and convert to tuples\n    sim_scores = list(enumerate(sim_matrix[idx]))\n    \n    #delete the item that was passed in\n    del sim_scores[idx]\n    \n    # Sort the items based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    \n    # Get the scores of the top-n most similar items.\n    sim_scores = sim_scores[:topN]\n    \n    # Get the item indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    # Return the topN most similar items\n    return df.iloc[movie_indices]\n","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"044dc9","input":"#Get recommendations for Tyler Cowen: Be suspicious of simple stories\ncontent_recommender(ted, 'Tyler Cowen: Be suspicious of simple stories', 'name', sim_matrix, 10)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>comments</th>\n      <th>description</th>\n      <th>duration</th>\n      <th>event</th>\n      <th>film_date</th>\n      <th>languages</th>\n      <th>main_speaker</th>\n      <th>name</th>\n      <th>num_speaker</th>\n      <th>published_date</th>\n      <th>ratings</th>\n      <th>related_talks</th>\n      <th>speaker_occupation</th>\n      <th>tags</th>\n      <th>title</th>\n      <th>url</th>\n      <th>views</th>\n      <th>published_year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>107</th>\n      <td>87</td>\n      <td>Marine biologist Tierney Thys asks us to step ...</td>\n      <td>1001</td>\n      <td>TED2003</td>\n      <td>1044144000</td>\n      <td>22</td>\n      <td>Tierney Thys</td>\n      <td>Tierney Thys: Swim with the giant sunfish</td>\n      <td>1</td>\n      <td>2007-05-21 15:59:00</td>\n      <td>[funny, beautiful, longwinded, unconvincing, i...</td>\n      <td>[{'id': 206, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Marine biologist</td>\n      <td>['animals', 'biodiversity', 'climate change', ...</td>\n      <td>Swim with the giant sunfish</td>\n      <td>https://www.ted.com/talks/tierney_thys_swims_w...</td>\n      <td>870412</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1542</th>\n      <td>308</td>\n      <td>Building a skyscraper? Forget about steel and ...</td>\n      <td>742</td>\n      <td>TED2013</td>\n      <td>1361923200</td>\n      <td>31</td>\n      <td>Michael Green</td>\n      <td>Michael Green: Why we should build wooden skys...</td>\n      <td>1</td>\n      <td>2013-07-09 15:01:10</td>\n      <td>[inspiring, ingenious, jaw-dropping, informati...</td>\n      <td>[{'id': 1598, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Architect</td>\n      <td>['architecture', 'design', 'materials']</td>\n      <td>Why we should build wooden skyscrapers</td>\n      <td>https://www.ted.com/talks/michael_green_why_we...</td>\n      <td>1207550</td>\n      <td>2013</td>\n    </tr>\n    <tr>\n      <th>2361</th>\n      <td>31</td>\n      <td>Stories are necessary, but they're not as magi...</td>\n      <td>766</td>\n      <td>TEDWomen 2016</td>\n      <td>1477526400</td>\n      <td>20</td>\n      <td>Sisonke Msimang</td>\n      <td>Sisonke Msimang: If a story moves you, act on it</td>\n      <td>1</td>\n      <td>2017-01-13 16:19:34</td>\n      <td>[ingenious, inspiring, fascinating, informativ...</td>\n      <td>[{'id': 462, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Writer, activist</td>\n      <td>['Africa', 'Internet', 'activism', 'collaborat...</td>\n      <td>If a story moves you, act on it</td>\n      <td>https://www.ted.com/talks/sisonke_msimang_if_a...</td>\n      <td>1147037</td>\n      <td>2017</td>\n    </tr>\n    <tr>\n      <th>1631</th>\n      <td>182</td>\n      <td>There's an irony behind the latest efforts to ...</td>\n      <td>1091</td>\n      <td>TED2013</td>\n      <td>1363219200</td>\n      <td>31</td>\n      <td>Jared Diamond</td>\n      <td>Jared Diamond: How societies can grow old better</td>\n      <td>1</td>\n      <td>2013-11-25 16:16:55</td>\n      <td>[informative, longwinded, unconvincing, obnoxi...</td>\n      <td>[{'id': 1313, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Civilization scholar</td>\n      <td>['aging', 'culture', 'social change']</td>\n      <td>How societies can grow old better</td>\n      <td>https://www.ted.com/talks/jared_diamond_how_so...</td>\n      <td>923663</td>\n      <td>2013</td>\n    </tr>\n    <tr>\n      <th>1856</th>\n      <td>28</td>\n      <td>In this intriguing talk, biologist Ameenah Gur...</td>\n      <td>852</td>\n      <td>TEDGlobal 2014</td>\n      <td>1414368000</td>\n      <td>23</td>\n      <td>Ameenah Gurib-Fakim</td>\n      <td>Ameenah Gurib-Fakim: Humble plants that hide s...</td>\n      <td>1</td>\n      <td>2014-11-04 16:03:07</td>\n      <td>[longwinded, obnoxious, persuasive, ok, inform...</td>\n      <td>[{'id': 83, 'hero': 'https://pe.tedcdn.com/ima...</td>\n      <td>President of Mauritius</td>\n      <td>['biodiversity', 'biology', 'nature', 'plants'...</td>\n      <td>Humble plants that hide surprising secrets</td>\n      <td>https://www.ted.com/talks/ameenah_gurib_fakim_...</td>\n      <td>952385</td>\n      <td>2014</td>\n    </tr>\n    <tr>\n      <th>968</th>\n      <td>235</td>\n      <td>At TED's Full Spectrum Auditions, comedian Jos...</td>\n      <td>351</td>\n      <td>Full Spectrum Auditions</td>\n      <td>1306195200</td>\n      <td>39</td>\n      <td>Joshua Walters</td>\n      <td>Joshua Walters: On being just crazy enough</td>\n      <td>1</td>\n      <td>2011-06-24 15:50:15</td>\n      <td>[unconvincing, longwinded, obnoxious, inspirin...</td>\n      <td>[{'id': 669, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Comedian, activist</td>\n      <td>['brain', 'depression', 'entertainment', 'ment...</td>\n      <td>On being just crazy enough</td>\n      <td>https://www.ted.com/talks/joshua_walters_on_be...</td>\n      <td>1637656</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>2042</th>\n      <td>244</td>\n      <td>At the end of our lives, what do we most wish ...</td>\n      <td>1147</td>\n      <td>TED2015</td>\n      <td>1426809600</td>\n      <td>31</td>\n      <td>BJ Miller</td>\n      <td>BJ Miller: What really matters at the end of life</td>\n      <td>1</td>\n      <td>2015-09-10 14:59:01</td>\n      <td>[beautiful, informative, inspiring, confusing,...</td>\n      <td>[{'id': 1847, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Palliative care physician</td>\n      <td>['death', 'global issues', 'health', 'health c...</td>\n      <td>What really matters at the end of life</td>\n      <td>https://www.ted.com/talks/bj_miller_what_reall...</td>\n      <td>6214152</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>1537</th>\n      <td>1640</td>\n      <td>It's a standard assumption in the West: As a s...</td>\n      <td>1237</td>\n      <td>TEDGlobal 2013</td>\n      <td>1370995200</td>\n      <td>30</td>\n      <td>Eric X. Li</td>\n      <td>Eric X. Li: A tale of two political systems</td>\n      <td>1</td>\n      <td>2013-07-01 15:36:10</td>\n      <td>[fascinating, informative, courageous, persuas...</td>\n      <td>[{'id': 1554, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Investor and political scientist</td>\n      <td>['Asia', 'business', 'china', 'democracy', 'gl...</td>\n      <td>A tale of two political systems</td>\n      <td>https://www.ted.com/talks/eric_x_li_a_tale_of_...</td>\n      <td>2449736</td>\n      <td>2013</td>\n    </tr>\n    <tr>\n      <th>1275</th>\n      <td>254</td>\n      <td>\"Is it okay if I totally trash your office?\" I...</td>\n      <td>892</td>\n      <td>TEDGlobal 2012</td>\n      <td>1340755200</td>\n      <td>29</td>\n      <td>Elyn Saks</td>\n      <td>Elyn Saks: A tale of mental illness -- from th...</td>\n      <td>1</td>\n      <td>2012-06-29 13:36:36</td>\n      <td>[courageous, inspiring, jaw-dropping, persuasi...</td>\n      <td>[{'id': 189, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Mental health law scholar</td>\n      <td>['brain', 'depression', 'health care', 'mental...</td>\n      <td>A tale of mental illness -- from the inside</td>\n      <td>https://www.ted.com/talks/elyn_saks_seeing_men...</td>\n      <td>3247799</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>2001</th>\n      <td>165</td>\n      <td>When writer Roxane Gay dubbed herself a \"bad f...</td>\n      <td>688</td>\n      <td>TEDWomen 2015</td>\n      <td>1432771200</td>\n      <td>29</td>\n      <td>Roxane Gay</td>\n      <td>Roxane Gay: Confessions of a bad feminist</td>\n      <td>1</td>\n      <td>2015-06-22 15:22:48</td>\n      <td>[informative, inspiring, fascinating, beautifu...</td>\n      <td>[{'id': 1089, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Writer</td>\n      <td>['Gender equality', 'feminism', 'identity', 'w...</td>\n      <td>Confessions of a bad feminist</td>\n      <td>https://www.ted.com/talks/roxane_gay_confessio...</td>\n      <td>1453205</td>\n      <td>2015</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      comments                                        description  duration  \\\n107         87  Marine biologist Tierney Thys asks us to step ...      1001   \n1542       308  Building a skyscraper? Forget about steel and ...       742   \n2361        31  Stories are necessary, but they're not as magi...       766   \n1631       182  There's an irony behind the latest efforts to ...      1091   \n1856        28  In this intriguing talk, biologist Ameenah Gur...       852   \n968        235  At TED's Full Spectrum Auditions, comedian Jos...       351   \n2042       244  At the end of our lives, what do we most wish ...      1147   \n1537      1640  It's a standard assumption in the West: As a s...      1237   \n1275       254  \"Is it okay if I totally trash your office?\" I...       892   \n2001       165  When writer Roxane Gay dubbed herself a \"bad f...       688   \n\n                        event   film_date  languages         main_speaker  \\\n107                   TED2003  1044144000         22         Tierney Thys   \n1542                  TED2013  1361923200         31        Michael Green   \n2361            TEDWomen 2016  1477526400         20      Sisonke Msimang   \n1631                  TED2013  1363219200         31        Jared Diamond   \n1856           TEDGlobal 2014  1414368000         23  Ameenah Gurib-Fakim   \n968   Full Spectrum Auditions  1306195200         39       Joshua Walters   \n2042                  TED2015  1426809600         31            BJ Miller   \n1537           TEDGlobal 2013  1370995200         30           Eric X. Li   \n1275           TEDGlobal 2012  1340755200         29            Elyn Saks   \n2001            TEDWomen 2015  1432771200         29           Roxane Gay   \n\n                                                   name  num_speaker  \\\n107           Tierney Thys: Swim with the giant sunfish            1   \n1542  Michael Green: Why we should build wooden skys...            1   \n2361   Sisonke Msimang: If a story moves you, act on it            1   \n1631   Jared Diamond: How societies can grow old better            1   \n1856  Ameenah Gurib-Fakim: Humble plants that hide s...            1   \n968          Joshua Walters: On being just crazy enough            1   \n2042  BJ Miller: What really matters at the end of life            1   \n1537        Eric X. Li: A tale of two political systems            1   \n1275  Elyn Saks: A tale of mental illness -- from th...            1   \n2001          Roxane Gay: Confessions of a bad feminist            1   \n\n           published_date                                            ratings  \\\n107   2007-05-21 15:59:00  [funny, beautiful, longwinded, unconvincing, i...   \n1542  2013-07-09 15:01:10  [inspiring, ingenious, jaw-dropping, informati...   \n2361  2017-01-13 16:19:34  [ingenious, inspiring, fascinating, informativ...   \n1631  2013-11-25 16:16:55  [informative, longwinded, unconvincing, obnoxi...   \n1856  2014-11-04 16:03:07  [longwinded, obnoxious, persuasive, ok, inform...   \n968   2011-06-24 15:50:15  [unconvincing, longwinded, obnoxious, inspirin...   \n2042  2015-09-10 14:59:01  [beautiful, informative, inspiring, confusing,...   \n1537  2013-07-01 15:36:10  [fascinating, informative, courageous, persuas...   \n1275  2012-06-29 13:36:36  [courageous, inspiring, jaw-dropping, persuasi...   \n2001  2015-06-22 15:22:48  [informative, inspiring, fascinating, beautifu...   \n\n                                          related_talks  \\\n107   [{'id': 206, 'hero': 'https://pe.tedcdn.com/im...   \n1542  [{'id': 1598, 'hero': 'https://pe.tedcdn.com/i...   \n2361  [{'id': 462, 'hero': 'https://pe.tedcdn.com/im...   \n1631  [{'id': 1313, 'hero': 'https://pe.tedcdn.com/i...   \n1856  [{'id': 83, 'hero': 'https://pe.tedcdn.com/ima...   \n968   [{'id': 669, 'hero': 'https://pe.tedcdn.com/im...   \n2042  [{'id': 1847, 'hero': 'https://pe.tedcdn.com/i...   \n1537  [{'id': 1554, 'hero': 'https://pe.tedcdn.com/i...   \n1275  [{'id': 189, 'hero': 'https://pe.tedcdn.com/im...   \n2001  [{'id': 1089, 'hero': 'https://pe.tedcdn.com/i...   \n\n                    speaker_occupation  \\\n107                   Marine biologist   \n1542                         Architect   \n2361                  Writer, activist   \n1631              Civilization scholar   \n1856            President of Mauritius   \n968                 Comedian, activist   \n2042         Palliative care physician   \n1537  Investor and political scientist   \n1275         Mental health law scholar   \n2001                            Writer   \n\n                                                   tags  \\\n107   ['animals', 'biodiversity', 'climate change', ...   \n1542            ['architecture', 'design', 'materials']   \n2361  ['Africa', 'Internet', 'activism', 'collaborat...   \n1631              ['aging', 'culture', 'social change']   \n1856  ['biodiversity', 'biology', 'nature', 'plants'...   \n968   ['brain', 'depression', 'entertainment', 'ment...   \n2042  ['death', 'global issues', 'health', 'health c...   \n1537  ['Asia', 'business', 'china', 'democracy', 'gl...   \n1275  ['brain', 'depression', 'health care', 'mental...   \n2001  ['Gender equality', 'feminism', 'identity', 'w...   \n\n                                            title  \\\n107                   Swim with the giant sunfish   \n1542       Why we should build wooden skyscrapers   \n2361              If a story moves you, act on it   \n1631            How societies can grow old better   \n1856   Humble plants that hide surprising secrets   \n968                    On being just crazy enough   \n2042       What really matters at the end of life   \n1537              A tale of two political systems   \n1275  A tale of mental illness -- from the inside   \n2001                Confessions of a bad feminist   \n\n                                                    url    views  \\\n107   https://www.ted.com/talks/tierney_thys_swims_w...   870412   \n1542  https://www.ted.com/talks/michael_green_why_we...  1207550   \n2361  https://www.ted.com/talks/sisonke_msimang_if_a...  1147037   \n1631  https://www.ted.com/talks/jared_diamond_how_so...   923663   \n1856  https://www.ted.com/talks/ameenah_gurib_fakim_...   952385   \n968   https://www.ted.com/talks/joshua_walters_on_be...  1637656   \n2042  https://www.ted.com/talks/bj_miller_what_reall...  6214152   \n1537  https://www.ted.com/talks/eric_x_li_a_tale_of_...  2449736   \n1275  https://www.ted.com/talks/elyn_saks_seeing_men...  3247799   \n2001  https://www.ted.com/talks/roxane_gay_confessio...  1453205   \n\n      published_year  \n107             2007  \n1542            2013  \n2361            2017  \n1631            2013  \n1856            2014  \n968             2011  \n2042            2015  \n1537            2013  \n1275            2012  \n2001            2015  "},"exec_count":13,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"74afd2","input":"# Function to sanitize data to prevent ambiguity. It removes spaces and converts to lowercase\ndef sanitize(x):\n    if isinstance(x, list):\n        #Strip spaces and convert to lowercase\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''\n\nted = pd.read_csv('./data/ted_clean.csv')\n\n#literal_eval and sanitize both columns\nted['ratings'] = ted['ratings'].apply(literal_eval).apply(sanitize)\nted['tags'] = ted['tags'].apply(literal_eval).apply(sanitize)\n\n#Function that creates a soup out of the desired metadata\ndef create_soup(x):\n    return ' '.join(x['ratings']) + ' ' + ' '.join(x['tags'])\n\n#create a column with the soup in it    \nted['soup'] = ted.apply(create_soup, axis=1)   \n\n\nprint(f'The soup for {ted[\"title\"][0]} is: \\n{ted[\"soup\"][0]}')\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The soup for Do schools kill creativity? is: \nfunny beautiful ingenious courageous longwinded confusing informative fascinating unconvincing persuasive jaw-dropping ok obnoxious inspiring children creativity culture dance education parenting teaching\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"7a36d8","input":"count = CountVectorizer(stop_words='english', lowercase=True)\ncount_matrix = count.fit_transform(ted['soup'])\n\n#Compute the cosine similarity score \ncosine_sim = cosine_similarity(count_matrix, count_matrix)\n\n#call our same function, using the same movie. \ncontent_recommender(ted, 'Humble plants that hide surprising secrets', 'title', cosine_sim, topN=5)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>comments</th>\n      <th>description</th>\n      <th>duration</th>\n      <th>event</th>\n      <th>film_date</th>\n      <th>languages</th>\n      <th>main_speaker</th>\n      <th>name</th>\n      <th>num_speaker</th>\n      <th>published_date</th>\n      <th>ratings</th>\n      <th>related_talks</th>\n      <th>speaker_occupation</th>\n      <th>tags</th>\n      <th>title</th>\n      <th>url</th>\n      <th>views</th>\n      <th>published_year</th>\n      <th>soup</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>786</th>\n      <td>954</td>\n      <td>Plants behave in some oddly intelligent ways: ...</td>\n      <td>830</td>\n      <td>TEDGlobal 2010</td>\n      <td>1279152000</td>\n      <td>30</td>\n      <td>Stefano Mancuso</td>\n      <td>Stefano Mancuso: The roots of plant intelligence</td>\n      <td>1</td>\n      <td>2010-10-11 08:55:00</td>\n      <td>[persuasive, inspiring, informative, fascinati...</td>\n      <td>[{'id': 509, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Plant neurobiologist</td>\n      <td>[biology, botany, collaboration, plants, science]</td>\n      <td>The roots of plant intelligence</td>\n      <td>https://www.ted.com/talks/stefano_mancuso_the_...</td>\n      <td>1075196</td>\n      <td>2010</td>\n      <td>persuasive inspiring informative fascinating l...</td>\n    </tr>\n    <tr>\n      <th>575</th>\n      <td>56</td>\n      <td>While living and working as a marine biologist...</td>\n      <td>998</td>\n      <td>TEDIndia 2009</td>\n      <td>1257379200</td>\n      <td>25</td>\n      <td>Charles Anderson</td>\n      <td>Charles Anderson: Dragonflies that fly across ...</td>\n      <td>1</td>\n      <td>2009-12-17 09:06:00</td>\n      <td>[courageous, fascinating, informative, ingenio...</td>\n      <td>[{'id': 416, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Marine biologist</td>\n      <td>[biodiversity, biology, birds, ecology, insect...</td>\n      <td>Dragonflies that fly across oceans</td>\n      <td>https://www.ted.com/talks/charles_anderson_dis...</td>\n      <td>553253</td>\n      <td>2009</td>\n      <td>courageous fascinating informative ingenious b...</td>\n    </tr>\n    <tr>\n      <th>584</th>\n      <td>58</td>\n      <td>Nick Veasey shows outsized X-ray images that r...</td>\n      <td>798</td>\n      <td>TEDGlobal 2009</td>\n      <td>1248393600</td>\n      <td>20</td>\n      <td>Nick Veasey</td>\n      <td>Nick Veasey: Exposing the invisible</td>\n      <td>1</td>\n      <td>2010-01-05 09:13:00</td>\n      <td>[fascinating, beautiful, funny, jaw-dropping, ...</td>\n      <td>[{'id': 643, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>X-ray visionary</td>\n      <td>[art, nature, photography, science]</td>\n      <td>Exposing the invisible</td>\n      <td>https://www.ted.com/talks/nick_veasey_exposing...</td>\n      <td>1780196</td>\n      <td>2010</td>\n      <td>fascinating beautiful funny jaw-dropping confu...</td>\n    </tr>\n    <tr>\n      <th>793</th>\n      <td>266</td>\n      <td>Did you know you have functioning neurons in y...</td>\n      <td>914</td>\n      <td>TEDGlobal 2010</td>\n      <td>1279238400</td>\n      <td>29</td>\n      <td>Heribert Watzke</td>\n      <td>Heribert Watzke: The brain in your gut</td>\n      <td>1</td>\n      <td>2010-10-19 08:09:00</td>\n      <td>[inspiring, informative, fascinating, unconvin...</td>\n      <td>[{'id': 976, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Food scientist</td>\n      <td>[biology, food, science, technology]</td>\n      <td>The brain in your gut</td>\n      <td>https://www.ted.com/talks/heribert_watzke_the_...</td>\n      <td>1342475</td>\n      <td>2010</td>\n      <td>inspiring informative fascinating unconvincing...</td>\n    </tr>\n    <tr>\n      <th>805</th>\n      <td>124</td>\n      <td>In the quest to map the brain, many scientists...</td>\n      <td>1054</td>\n      <td>TEDGlobal 2010</td>\n      <td>1279238400</td>\n      <td>28</td>\n      <td>Gero Miesenboeck</td>\n      <td>Gero Miesenboeck: Re-engineering the brain</td>\n      <td>1</td>\n      <td>2010-11-03 22:44:00</td>\n      <td>[informative, jaw-dropping, fascinating, ingen...</td>\n      <td>[{'id': 967, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Optogeneticist</td>\n      <td>[biology, brain, neuroscience, science]</td>\n      <td>Re-engineering the brain</td>\n      <td>https://www.ted.com/talks/gero_miesenboeck\\n</td>\n      <td>611081</td>\n      <td>2010</td>\n      <td>informative jaw-dropping fascinating ingenious...</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     comments                                        description  duration  \\\n786       954  Plants behave in some oddly intelligent ways: ...       830   \n575        56  While living and working as a marine biologist...       998   \n584        58  Nick Veasey shows outsized X-ray images that r...       798   \n793       266  Did you know you have functioning neurons in y...       914   \n805       124  In the quest to map the brain, many scientists...      1054   \n\n              event   film_date  languages      main_speaker  \\\n786  TEDGlobal 2010  1279152000         30   Stefano Mancuso   \n575   TEDIndia 2009  1257379200         25  Charles Anderson   \n584  TEDGlobal 2009  1248393600         20       Nick Veasey   \n793  TEDGlobal 2010  1279238400         29   Heribert Watzke   \n805  TEDGlobal 2010  1279238400         28  Gero Miesenboeck   \n\n                                                  name  num_speaker  \\\n786   Stefano Mancuso: The roots of plant intelligence            1   \n575  Charles Anderson: Dragonflies that fly across ...            1   \n584                Nick Veasey: Exposing the invisible            1   \n793             Heribert Watzke: The brain in your gut            1   \n805         Gero Miesenboeck: Re-engineering the brain            1   \n\n          published_date                                            ratings  \\\n786  2010-10-11 08:55:00  [persuasive, inspiring, informative, fascinati...   \n575  2009-12-17 09:06:00  [courageous, fascinating, informative, ingenio...   \n584  2010-01-05 09:13:00  [fascinating, beautiful, funny, jaw-dropping, ...   \n793  2010-10-19 08:09:00  [inspiring, informative, fascinating, unconvin...   \n805  2010-11-03 22:44:00  [informative, jaw-dropping, fascinating, ingen...   \n\n                                         related_talks    speaker_occupation  \\\n786  [{'id': 509, 'hero': 'https://pe.tedcdn.com/im...  Plant neurobiologist   \n575  [{'id': 416, 'hero': 'https://pe.tedcdn.com/im...      Marine biologist   \n584  [{'id': 643, 'hero': 'https://pe.tedcdn.com/im...       X-ray visionary   \n793  [{'id': 976, 'hero': 'https://pe.tedcdn.com/im...        Food scientist   \n805  [{'id': 967, 'hero': 'https://pe.tedcdn.com/im...        Optogeneticist   \n\n                                                  tags  \\\n786  [biology, botany, collaboration, plants, science]   \n575  [biodiversity, biology, birds, ecology, insect...   \n584                [art, nature, photography, science]   \n793               [biology, food, science, technology]   \n805            [biology, brain, neuroscience, science]   \n\n                                  title  \\\n786     The roots of plant intelligence   \n575  Dragonflies that fly across oceans   \n584              Exposing the invisible   \n793               The brain in your gut   \n805            Re-engineering the brain   \n\n                                                   url    views  \\\n786  https://www.ted.com/talks/stefano_mancuso_the_...  1075196   \n575  https://www.ted.com/talks/charles_anderson_dis...   553253   \n584  https://www.ted.com/talks/nick_veasey_exposing...  1780196   \n793  https://www.ted.com/talks/heribert_watzke_the_...  1342475   \n805       https://www.ted.com/talks/gero_miesenboeck\\n   611081   \n\n     published_year                                               soup  \n786            2010  persuasive inspiring informative fascinating l...  \n575            2009  courageous fascinating informative ingenious b...  \n584            2010  fascinating beautiful funny jaw-dropping confu...  \n793            2010  inspiring informative fascinating unconvincing...  \n805            2010  informative jaw-dropping fascinating ingenious...  "},"exec_count":17,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"8d94e7","input":"def build_chart(gen_ted, percentile=0.1):\n   \n    #Ask for preferred word rating\n    print(\"Select a descriptive word from the list above for the 'word rating'\")\n    rating = input()\n    \n    #Ask for lower limit of film year\n    print(\"Input earliest year published (2006 to 2017)\")\n    low_year = int(input())\n    \n    #Ask for upper limit of film year\n    print(\"Input latest year published(2006 to 2017)\")\n    high_year = int(input())\n    \n    \n    #Define a new talks variable to store the preferred talks. \n    #Copy the contents of gen_ted to talks\n    talks = gen_ted.copy()\n    \n    #Filter based on the condition\n    talks = talks[(talks['ratings'].apply(lambda x: rating in x)) & \n                    (talks['published_year'] >= low_year) & \n                    (talks['published_year'] <= high_year)]\n    \n    #Calculate the number of views for the  percentile \n    m = talks['views'].quantile(percentile)\n\n    #Only consider movies that have higher than m votes. Save this in a new dataframe q_movies (note using .loc here prevents a warning)\n    q_talks = talks.copy().loc[talks['views'] >= m]\n    \n    #create the metric of the comments to views ratio\n    q_talks['comments_per_1000views']=1000*q_talks['comments']/q_talks['views']\n\n    #Sort talks in descending order of the ratio of views to comments\n    q_talks = q_talks.sort_values('comments_per_1000views', ascending=False)\n    \n    return q_talks","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"cd1bc5","input":"#First we'll print a list of possible ratings\nr = getUniqueListFromColumn(ted, 'ratings', 'string', True)\nprint(f'Please select a rating from the following: {r}')\n\n#Generate the chart for top talks for these user preferences and display top 5.\n#Show the results for the word rating \"obnoxious\" and published years between 2009 and 2014.\ngen_ted_final = build_chart(ted).head(5)\n\ngen_ted_final[['main_speaker','name','published_year','comments_per_1000views']]","metadata":{"cocalc":{"outputs":{"1":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"obnoxious"},"2":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream"},"3":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"2009"},"5":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"2014"}}}},"output":{"0":{"name":"stdout","output_type":"stream","text":"Please select a rating from the following: beautiful, confusing, courageous, fascinating, funny, informative, ingenious, inspiring, jaw-dropping, longwinded, obnoxious, ok, persuasive, unconvincing\nSelect a descriptive word from the list above for the 'word rating'\n"},"1":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"obnoxious"},"2":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream"},"3":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"2009"},"4":{"name":"stdout","output_type":"stream","text":"Input latest year published(2006 to 2017)\n"},"5":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"2014"},"6":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>main_speaker</th>\n      <th>name</th>\n      <th>published_year</th>\n      <th>comments_per_1000views</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>803</th>\n      <td>David Bismark</td>\n      <td>David Bismark: E-voting without fraud</td>\n      <td>2010</td>\n      <td>1.534355</td>\n    </tr>\n    <tr>\n      <th>694</th>\n      <td>Sharmeen Obaid-Chinoy</td>\n      <td>Sharmeen Obaid-Chinoy: Inside a school for sui...</td>\n      <td>2010</td>\n      <td>1.420683</td>\n    </tr>\n    <tr>\n      <th>954</th>\n      <td>Janet Echelman</td>\n      <td>Janet Echelman: Taking imagination seriously</td>\n      <td>2011</td>\n      <td>1.359572</td>\n    </tr>\n    <tr>\n      <th>840</th>\n      <td>Lesley Hazleton</td>\n      <td>Lesley Hazleton: On reading the Koran</td>\n      <td>2011</td>\n      <td>1.285149</td>\n    </tr>\n    <tr>\n      <th>1787</th>\n      <td>David Chalmers</td>\n      <td>David Chalmers: How do you explain consciousness?</td>\n      <td>2014</td>\n      <td>1.235918</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               main_speaker  \\\n803           David Bismark   \n694   Sharmeen Obaid-Chinoy   \n954          Janet Echelman   \n840         Lesley Hazleton   \n1787         David Chalmers   \n\n                                                   name  published_year  \\\n803               David Bismark: E-voting without fraud            2010   \n694   Sharmeen Obaid-Chinoy: Inside a school for sui...            2010   \n954        Janet Echelman: Taking imagination seriously            2011   \n840               Lesley Hazleton: On reading the Koran            2011   \n1787  David Chalmers: How do you explain consciousness?            2014   \n\n      comments_per_1000views  \n803                 1.534355  \n694                 1.420683  \n954                 1.359572  \n840                 1.285149  \n1787                1.235918  "},"exec_count":28,"output_type":"execute_result"}},"pos":17,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"9b1114","input":"\n#this is a test dataframe to use\nsa1_df = pd.DataFrame({\n        'Food': ['Cake', 'Pie', 'Ice Cream'],\n        'Flavors': [['Chocolate','Vanilla', 'Marble'], ['Apple', 'Chocolate', 'Cherry'], ['Vanilla', 'Cherry', 'Mint']]\n    })\ndisplay(sa1_df)\n\ndef getUniqueListFromColumn(df, col, returntype = 'string', sort=True):\n      \n    #stack everything and get the unique values\n    stacked = df.apply(lambda x:pd.Series(x[col], dtype='object'),axis=1).stack().unique()\n    \n    #if the user wants it sorted, sort it\n    if sort:\n        stacked = np.sort(stacked)\n    \n    #if the user wants a string back, join to give a string\n    if returntype == 'string':\n         stacked = ', '.join(stacked)\n    \n    return stacked\n\nprint(f\"The sorted string list is: {getUniqueListFromColumn(sa1_df, 'Flavors', 'string', True)}\")\nprint(f\"The unsorted array is: {getUniqueListFromColumn(sa1_df, 'Flavors', 'array', False)}\")\n","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Food</th>\n      <th>Flavors</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Cake</td>\n      <td>[Chocolate, Vanilla, Marble]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Pie</td>\n      <td>[Apple, Chocolate, Cherry]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Ice Cream</td>\n      <td>[Vanilla, Cherry, Mint]</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Food                       Flavors\n0       Cake  [Chocolate, Vanilla, Marble]\n1        Pie    [Apple, Chocolate, Cherry]\n2  Ice Cream       [Vanilla, Cherry, Mint]"},"exec_count":3,"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"The sorted string list is: Apple, Cherry, Chocolate, Marble, Mint, Vanilla\nThe unsorted array is: ['Chocolate' 'Vanilla' 'Marble' 'Apple' 'Cherry' 'Mint']\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"3da267","input":"#Calculate the number of views for the 10th percentile - calculated from the whole dataframe\nm = ted['views'].quantile(0.10)\n\n#Only consider talks of at least 5 minutes\nq_talks = ted[(ted['duration'] >= 300)]\n\n#Only consider talks with one speaker\nq_talks = q_talks[q_talks['num_speaker']==1]\n\n#Only consider talks in the top 90%\nq_talks = q_talks[q_talks['views'] >= m]\n\n#Inspect the number of talks that made the cut\nq_talks.shape[0]","output":{"0":{"data":{"text/plain":"2107"},"exec_count":4,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"845ee5","input":"import pandas as pd\nimport numpy as np\nfrom ast import literal_eval\n\nted = pd.read_csv('./data/ted_clean.csv')\n#we need ratings to be literally evaluated before using it\nted['ratings'] = ted['ratings'].apply(literal_eval)\nted.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>comments</th>\n      <th>description</th>\n      <th>duration</th>\n      <th>event</th>\n      <th>film_date</th>\n      <th>languages</th>\n      <th>main_speaker</th>\n      <th>name</th>\n      <th>num_speaker</th>\n      <th>published_date</th>\n      <th>ratings</th>\n      <th>related_talks</th>\n      <th>speaker_occupation</th>\n      <th>tags</th>\n      <th>title</th>\n      <th>url</th>\n      <th>views</th>\n      <th>published_year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4553</td>\n      <td>Sir Ken Robinson makes an entertaining and pro...</td>\n      <td>1164</td>\n      <td>TED2006</td>\n      <td>1140825600</td>\n      <td>60</td>\n      <td>Ken Robinson</td>\n      <td>Ken Robinson: Do schools kill creativity?</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[funny, beautiful, ingenious, courageous, long...</td>\n      <td>[{'id': 865, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Author/educator</td>\n      <td>['children', 'creativity', 'culture', 'dance',...</td>\n      <td>Do schools kill creativity?</td>\n      <td>https://www.ted.com/talks/ken_robinson_says_sc...</td>\n      <td>47227110</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>265</td>\n      <td>With the same humor and humanity he exuded in ...</td>\n      <td>977</td>\n      <td>TED2006</td>\n      <td>1140825600</td>\n      <td>43</td>\n      <td>Al Gore</td>\n      <td>Al Gore: Averting the climate crisis</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[funny, courageous, confusing, beautiful, unco...</td>\n      <td>[{'id': 243, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Climate advocate</td>\n      <td>['alternative energy', 'cars', 'climate change...</td>\n      <td>Averting the climate crisis</td>\n      <td>https://www.ted.com/talks/al_gore_on_averting_...</td>\n      <td>3200520</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>124</td>\n      <td>New York Times columnist David Pogue takes aim...</td>\n      <td>1286</td>\n      <td>TED2006</td>\n      <td>1140739200</td>\n      <td>26</td>\n      <td>David Pogue</td>\n      <td>David Pogue: Simplicity sells</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[funny, courageous, ingenious, beautiful, unco...</td>\n      <td>[{'id': 1725, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Technology columnist</td>\n      <td>['computers', 'entertainment', 'interface desi...</td>\n      <td>Simplicity sells</td>\n      <td>https://www.ted.com/talks/david_pogue_says_sim...</td>\n      <td>1636292</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>200</td>\n      <td>In an emotionally charged talk, MacArthur-winn...</td>\n      <td>1116</td>\n      <td>TED2006</td>\n      <td>1140912000</td>\n      <td>35</td>\n      <td>Majora Carter</td>\n      <td>Majora Carter: Greening the ghetto</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[courageous, beautiful, confusing, funny, inge...</td>\n      <td>[{'id': 1041, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Activist for environmental justice</td>\n      <td>['MacArthur grant', 'activism', 'business', 'c...</td>\n      <td>Greening the ghetto</td>\n      <td>https://www.ted.com/talks/majora_carter_s_tale...</td>\n      <td>1697550</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>593</td>\n      <td>You've never seen data presented like this. Wi...</td>\n      <td>1190</td>\n      <td>TED2006</td>\n      <td>1140566400</td>\n      <td>48</td>\n      <td>Hans Rosling</td>\n      <td>Hans Rosling: The best stats you've ever seen</td>\n      <td>1</td>\n      <td>2006-06-27 20:38:00</td>\n      <td>[ingenious, funny, beautiful, courageous, long...</td>\n      <td>[{'id': 2056, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Global health expert; data visionary</td>\n      <td>['Africa', 'Asia', 'Google', 'demo', 'economic...</td>\n      <td>The best stats you've ever seen</td>\n      <td>https://www.ted.com/talks/hans_rosling_shows_t...</td>\n      <td>12005869</td>\n      <td>2006</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   comments                                        description  duration  \\\n0      4553  Sir Ken Robinson makes an entertaining and pro...      1164   \n1       265  With the same humor and humanity he exuded in ...       977   \n2       124  New York Times columnist David Pogue takes aim...      1286   \n3       200  In an emotionally charged talk, MacArthur-winn...      1116   \n4       593  You've never seen data presented like this. Wi...      1190   \n\n     event   film_date  languages   main_speaker  \\\n0  TED2006  1140825600         60   Ken Robinson   \n1  TED2006  1140825600         43        Al Gore   \n2  TED2006  1140739200         26    David Pogue   \n3  TED2006  1140912000         35  Majora Carter   \n4  TED2006  1140566400         48   Hans Rosling   \n\n                                            name  num_speaker  \\\n0      Ken Robinson: Do schools kill creativity?            1   \n1           Al Gore: Averting the climate crisis            1   \n2                  David Pogue: Simplicity sells            1   \n3             Majora Carter: Greening the ghetto            1   \n4  Hans Rosling: The best stats you've ever seen            1   \n\n        published_date                                            ratings  \\\n0  2006-06-27 00:11:00  [funny, beautiful, ingenious, courageous, long...   \n1  2006-06-27 00:11:00  [funny, courageous, confusing, beautiful, unco...   \n2  2006-06-27 00:11:00  [funny, courageous, ingenious, beautiful, unco...   \n3  2006-06-27 00:11:00  [courageous, beautiful, confusing, funny, inge...   \n4  2006-06-27 20:38:00  [ingenious, funny, beautiful, courageous, long...   \n\n                                       related_talks  \\\n0  [{'id': 865, 'hero': 'https://pe.tedcdn.com/im...   \n1  [{'id': 243, 'hero': 'https://pe.tedcdn.com/im...   \n2  [{'id': 1725, 'hero': 'https://pe.tedcdn.com/i...   \n3  [{'id': 1041, 'hero': 'https://pe.tedcdn.com/i...   \n4  [{'id': 2056, 'hero': 'https://pe.tedcdn.com/i...   \n\n                     speaker_occupation  \\\n0                       Author/educator   \n1                      Climate advocate   \n2                  Technology columnist   \n3    Activist for environmental justice   \n4  Global health expert; data visionary   \n\n                                                tags  \\\n0  ['children', 'creativity', 'culture', 'dance',...   \n1  ['alternative energy', 'cars', 'climate change...   \n2  ['computers', 'entertainment', 'interface desi...   \n3  ['MacArthur grant', 'activism', 'business', 'c...   \n4  ['Africa', 'Asia', 'Google', 'demo', 'economic...   \n\n                             title  \\\n0      Do schools kill creativity?   \n1      Averting the climate crisis   \n2                 Simplicity sells   \n3              Greening the ghetto   \n4  The best stats you've ever seen   \n\n                                                 url     views  published_year  \n0  https://www.ted.com/talks/ken_robinson_says_sc...  47227110            2006  \n1  https://www.ted.com/talks/al_gore_on_averting_...   3200520            2006  \n2  https://www.ted.com/talks/david_pogue_says_sim...   1636292            2006  \n3  https://www.ted.com/talks/majora_carter_s_tale...   1697550            2006  \n4  https://www.ted.com/talks/hans_rosling_shows_t...  12005869            2006  "},"exec_count":4,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"c8bb86","input":"ted.shape","output":{"0":{"data":{"text/plain":"(2550, 18)"},"exec_count":4,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"7904c7","input":"#Define a TF-IDF Vectorizer Object. Remove all english stopwords\ntfidf = TfidfVectorizer(stop_words='english', lowercase=True, ngram_range=(2,2))\n\n#Replace NaN with an empty string\nted['description'] = ted['description'].fillna('')\n\n#Construct the required TF-IDF matrix by applying the fit_transform method on the description feature\ntfidf_matrix = tfidf.fit_transform(ted['description'])\n\n#Output the shape of tfidf_matrix (rows first, then columns)\ntfidf_matrix.shape","output":{"0":{"data":{"text/plain":"(2550, 63416)"},"exec_count":5,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"b78644","input":"#Only consider talks of at least 5 minutes\nq_talks2 = ted[(ted['duration'] >= 300)]\n\n#Only consider talks with one speaker\nq_talks2 = q_talks2[q_talks2['num_speaker']==1]\n\n#Calculate the number of views for the 10th percentile - calculated from the whole dataframe\nm2 = q_talks2['views'].quantile(0.10)\n\n#Only consider talks in the top 90%\nq_talks2 = q_talks2[q_talks2['views'] >= m2]\n\n#Inspect the number of talks that made the cut\nq_talks2.shape[0]","output":{"0":{"data":{"text/plain":"2093"},"exec_count":5,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"2eb518","input":"#bonus - take a look some of the individual words in the description\nfeature_names = tfidf.get_feature_names()\nfeature_names[500:510]","output":{"0":{"data":{"text/plain":"['40 video',\n '40 years',\n '400 metric',\n '400 pounds',\n '400 years',\n '4000 year',\n '404 page',\n '404 pages',\n '413 billion',\n '45 story']"},"exec_count":6,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"7e87de","input":"#create the metric of the comments to views ratio\nq_talks['comments_per_1000views']=1000*q_talks['comments']/q_talks['views']\n\n#Sort talks in descending order of the ratio of views to comments\nq_talks = q_talks.sort_values('comments_per_1000views', ascending=False)\n\n#Print the top 10 talks\nq_talks[['description', 'main_speaker', 'comments_per_1000views']].head(10)\n","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>description</th>\n      <th>main_speaker</th>\n      <th>comments_per_1000views</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>803</th>\n      <td>David Bismark demos a new system for voting th...</td>\n      <td>David Bismark</td>\n      <td>1.534355</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>Richard Dawkins urges all atheists to openly s...</td>\n      <td>Richard Dawkins</td>\n      <td>1.463841</td>\n    </tr>\n    <tr>\n      <th>694</th>\n      <td>Filmmaker Sharmeen Obaid-Chinoy takes on a ter...</td>\n      <td>Sharmeen Obaid-Chinoy</td>\n      <td>1.420683</td>\n    </tr>\n    <tr>\n      <th>954</th>\n      <td>Janet Echelman found her true voice as an arti...</td>\n      <td>Janet Echelman</td>\n      <td>1.359572</td>\n    </tr>\n    <tr>\n      <th>840</th>\n      <td>Lesley Hazleton sat down one day to read the K...</td>\n      <td>Lesley Hazleton</td>\n      <td>1.285149</td>\n    </tr>\n    <tr>\n      <th>1787</th>\n      <td>Our consciousness is a fundamental aspect of o...</td>\n      <td>David Chalmers</td>\n      <td>1.235918</td>\n    </tr>\n    <tr>\n      <th>661</th>\n      <td>Vaccine-autism claims, \"Frankenfood\" bans, the...</td>\n      <td>Michael Specter</td>\n      <td>1.235704</td>\n    </tr>\n    <tr>\n      <th>443</th>\n      <td>At TED2009, Al Gore presents updated slides fr...</td>\n      <td>Al Gore</td>\n      <td>1.091008</td>\n    </tr>\n    <tr>\n      <th>732</th>\n      <td>In \"THE 99,\" Naif Al-Mutawa's new generation o...</td>\n      <td>Naif Al-Mutawa</td>\n      <td>0.981252</td>\n    </tr>\n    <tr>\n      <th>1148</th>\n      <td>What does environmental devastation actually l...</td>\n      <td>Garth Lenz</td>\n      <td>0.977574</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                                            description  \\\n803   David Bismark demos a new system for voting th...   \n96    Richard Dawkins urges all atheists to openly s...   \n694   Filmmaker Sharmeen Obaid-Chinoy takes on a ter...   \n954   Janet Echelman found her true voice as an arti...   \n840   Lesley Hazleton sat down one day to read the K...   \n1787  Our consciousness is a fundamental aspect of o...   \n661   Vaccine-autism claims, \"Frankenfood\" bans, the...   \n443   At TED2009, Al Gore presents updated slides fr...   \n732   In \"THE 99,\" Naif Al-Mutawa's new generation o...   \n1148  What does environmental devastation actually l...   \n\n               main_speaker  comments_per_1000views  \n803           David Bismark                1.534355  \n96          Richard Dawkins                1.463841  \n694   Sharmeen Obaid-Chinoy                1.420683  \n954          Janet Echelman                1.359572  \n840         Lesley Hazleton                1.285149  \n1787         David Chalmers                1.235918  \n661         Michael Specter                1.235704  \n443                 Al Gore                1.091008  \n732          Naif Al-Mutawa                0.981252  \n1148             Garth Lenz                0.977574  "},"exec_count":6,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c201d5","input":"#bonus - this is saying that for the first document, none of the 500th to 510th words shown above show up in that document\ntfidf_list = tfidf_matrix.toarray()\ntfidf_list[0, 500:510]","output":{"0":{"data":{"text/plain":"array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"},"exec_count":7,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"3750eb","input":"# Compute the dot product similarity matrix\nsim_matrix = linear_kernel(tfidf_matrix, tfidf_matrix)\n\n","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"210b39","input":"<font size=18>Lesson 13 - Self-Assessment Solutions</font>\n\n# *Self-Assessment: Modularize Fetching Unique Items*","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"235221","input":"There are 2550 TED talks in this data frame.","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"2aa26f","input":"# *Self-Assessment: Load and Display - Solution*\n\nThere's nothing too new here. You've done this kind of work before. What's more important here than the code is making sure you take a minute or two to understand the data you're pulling in. What columns do you have available to you? Which columns contain simple values and which columns contain lists. Think about how you could or couldn't use this data to make recommendations.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"42279d","input":"# *Self-Assessment: Compute a Metric, Sort and Print - Solution*\n\nNote that here we are computing our metric on our narrowed data set. We could have created the metric on the entire dataset. But, if we know that we're only interested in a portion of the talks, we should narrow our dataset before computing the metric.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"60fd89","input":"# *Self-Assessment: Pandas - Solution*\nRemember that shape gives you the number of rows first, followed by the number of columns.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"684a8e","input":"# *Self-Assessment: Create the Knowledge-Based Recommender - Solution*\n\nWe're creating this as a function that takes in the dataframe and the percentile of views that we want to return. \nWe'll first generate our list of unique words to present to users. We'll also stringify our list of ratings so we can use str.contains to filter.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"a1b487","input":"Let's compare that with calculating the quantile after we subset.","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"be49cc","input":"There is no universally \"right\" answer as to whether you should calculate the quantile before or after you've narrowed the initial dataset. It depends on what you're trying to accomplish. If you want the most viewed talks *that meet your criteria* you'd calculate it after you've subsetted. If you want the most viewed talks *overall* you'd calculate it before you've subsetted.\n\nFor our homework, we'll either tell you when to subset a dataframe or ask you to make the decision and give a justification for your decision.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"cae9af","input":"# *Self-Assessment: Create the Content-Based Recommender Based on Dot Product - Solution*\nThis is also straight from the book. We don't expect you to understand everything to do with linear kernels. But if you're interested, the documentation is here:\nhttps://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.linear_kernel.html\n\n","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"d2e606","input":"# *Self-Assessment: TF-IDF Vectors - Solution*\nThis is all straight from the book. More information about the TfidfVectorizer is available online here: https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"db6b5e","input":"# *Self-Assessment: Prerequisites - Solution*\n\nRemember that when you're calculating the quantile for some piece of data, you'll get different results if you calculate it before or after you do your other subsetting. First, let's calculate the views quantile before we figure the rest of our prerequisites.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"de5dda","input":"## *Self-Assessment: Metadata Recommender*\n\nReminder: You are using the ratings and the tags. Sanitize both first. Use all the words from each to make the soup.","pos":26,"type":"cell"}
{"id":0,"time":1620994513589,"type":"user"}
{"last_load":1621024597008,"type":"file"}