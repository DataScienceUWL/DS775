{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-30228066-818d-47d7-90e2-8e4e30840314.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"4e289d","input":"import pandas as pd\nimport numpy as np\nfrom ast import literal_eval","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"6b630e","input":"#read in the data\ndf = pd.read_csv('../data/movies_metadata.csv')\n\n#print the shape of the dataframe\nprint(f\"The shape is {df.shape}\")\n\n#get the column info\ndf.info()\n\n#####################\n# Helper Functions\n#####################\n#converts ints & string representations of numbers to floats\ndef to_float(x):\n    try:\n        x = float(x)\n    except:\n        x = np.nan\n    return x\n\n#Helper function to convert NaT to 0 and all other years to integers.\ndef convert_int(x):\n    try:\n        return int(x)\n    except:\n        return 0\n\n#we can run both apply and astype in one line by chaining them\ndf['budget'] = df['budget'].apply(to_float).astype('float')\n\n#Convert release_date into pandas datetime format\ndf['release_date'] = pd.to_datetime(df['release_date'],errors='coerce')\n\n#Extract year from the datetime and convert to integer. (Again, we're chaining functions)\ndf['year'] = df['release_date'].apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan).apply(convert_int)\n\n#convert vote_count to integer\ndf['vote_count'] = df['vote_count'].apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan).apply(convert_int)\n\n#Convert all NaN into stringified empty lists and apply literal eval and convert to list by chaining functions\ndf['genres'] = df['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\n\n#filter to just the relevant columns\ndf = df[['id','title','budget', 'genres', 'overview', 'revenue', 'runtime', 'vote_average', 'vote_count', 'year']]\ndf.head()\ndf.to_csv('movies_metadata_clean.csv', index=False)","output":{"0":{"name":"stdout","output_type":"stream","text":"The shape is (5000, 24)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 24 columns):\n #   Column                 Non-Null Count  Dtype  \n---  ------                 --------------  -----  \n 0   adult                  5000 non-null   bool   \n 1   belongs_to_collection  825 non-null    object \n 2   budget                 5000 non-null   int64  \n 3   genres                 5000 non-null   object \n 4   homepage               311 non-null    object \n 5   id                     5000 non-null   int64  \n 6   imdb_id                5000 non-null   object \n 7   original_language      5000 non-null   object \n 8   original_title         5000 non-null   object \n 9   overview               4979 non-null   object \n 10  popularity             5000 non-null   float64\n 11  poster_path            4979 non-null   object \n 12  production_companies   5000 non-null   object \n 13  production_countries   5000 non-null   object \n 14  release_date           4996 non-null   object \n 15  revenue                5000 non-null   int64  \n 16  runtime                4994 non-null   float64\n 17  spoken_languages       5000 non-null   object \n 18  status                 4994 non-null   object \n 19  tagline                3749 non-null   object \n 20  title                  5000 non-null   object \n 21  video                  5000 non-null   bool   \n 22  vote_average           5000 non-null   float64\n 23  vote_count             5000 non-null   int64  \ndtypes: bool(2), float64(3), int64(4), object(15)\nmemory usage: 869.3+ KB\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"bbf09e","input":"import pandas as pd\nimport numpy as np\n\nted = pd.read_csv('../data/ted-talks/ted_main.csv')\n#Convert release_date into pandas datetime format\nted['published_date'] = pd.to_datetime(ted['published_date'],\n                                       errors='coerce', unit='s')\n\n#see what the new date looks like\nprint(\"This is what the datetime string looks like:\")\ndisplay(ted['published_date'].head())\n\n\n#Extract year from the datetime\nted['published_year'] = ted['published_date'].apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)\n\n#Helper function to convert NaT to 0 and all other years to integers.\ndef convert_int(x):\n    try:\n        return int(x)\n    except:\n        return 0\n\n#Apply convert_int to the year feature\nted['published_year'] = ted['published_year'].apply(convert_int)\n\n\nted.head()","output":{"0":{"name":"stdout","output_type":"stream","text":"This is what the datetime string looks like:\n"},"1":{"data":{"text/plain":"0   2006-06-27 00:11:00\n1   2006-06-27 00:11:00\n2   2006-06-27 00:11:00\n3   2006-06-27 00:11:00\n4   2006-06-27 20:38:00\nName: published_date, dtype: datetime64[ns]"},"exec_count":5,"output_type":"execute_result"},"2":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>comments</th>\n      <th>description</th>\n      <th>duration</th>\n      <th>event</th>\n      <th>film_date</th>\n      <th>languages</th>\n      <th>main_speaker</th>\n      <th>name</th>\n      <th>num_speaker</th>\n      <th>published_date</th>\n      <th>ratings</th>\n      <th>related_talks</th>\n      <th>speaker_occupation</th>\n      <th>tags</th>\n      <th>title</th>\n      <th>url</th>\n      <th>views</th>\n      <th>published_year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4553</td>\n      <td>Sir Ken Robinson makes an entertaining and pro...</td>\n      <td>1164</td>\n      <td>TED2006</td>\n      <td>1140825600</td>\n      <td>60</td>\n      <td>Ken Robinson</td>\n      <td>Ken Robinson: Do schools kill creativity?</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[{'id': 7, 'name': 'Funny', 'count': 19645}, {...</td>\n      <td>[{'id': 865, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Author/educator</td>\n      <td>['children', 'creativity', 'culture', 'dance',...</td>\n      <td>Do schools kill creativity?</td>\n      <td>https://www.ted.com/talks/ken_robinson_says_sc...</td>\n      <td>47227110</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>265</td>\n      <td>With the same humor and humanity he exuded in ...</td>\n      <td>977</td>\n      <td>TED2006</td>\n      <td>1140825600</td>\n      <td>43</td>\n      <td>Al Gore</td>\n      <td>Al Gore: Averting the climate crisis</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[{'id': 7, 'name': 'Funny', 'count': 544}, {'i...</td>\n      <td>[{'id': 243, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Climate advocate</td>\n      <td>['alternative energy', 'cars', 'climate change...</td>\n      <td>Averting the climate crisis</td>\n      <td>https://www.ted.com/talks/al_gore_on_averting_...</td>\n      <td>3200520</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>124</td>\n      <td>New York Times columnist David Pogue takes aim...</td>\n      <td>1286</td>\n      <td>TED2006</td>\n      <td>1140739200</td>\n      <td>26</td>\n      <td>David Pogue</td>\n      <td>David Pogue: Simplicity sells</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[{'id': 7, 'name': 'Funny', 'count': 964}, {'i...</td>\n      <td>[{'id': 1725, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Technology columnist</td>\n      <td>['computers', 'entertainment', 'interface desi...</td>\n      <td>Simplicity sells</td>\n      <td>https://www.ted.com/talks/david_pogue_says_sim...</td>\n      <td>1636292</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>200</td>\n      <td>In an emotionally charged talk, MacArthur-winn...</td>\n      <td>1116</td>\n      <td>TED2006</td>\n      <td>1140912000</td>\n      <td>35</td>\n      <td>Majora Carter</td>\n      <td>Majora Carter: Greening the ghetto</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[{'id': 3, 'name': 'Courageous', 'count': 760}...</td>\n      <td>[{'id': 1041, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Activist for environmental justice</td>\n      <td>['MacArthur grant', 'activism', 'business', 'c...</td>\n      <td>Greening the ghetto</td>\n      <td>https://www.ted.com/talks/majora_carter_s_tale...</td>\n      <td>1697550</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>593</td>\n      <td>You've never seen data presented like this. Wi...</td>\n      <td>1190</td>\n      <td>TED2006</td>\n      <td>1140566400</td>\n      <td>48</td>\n      <td>Hans Rosling</td>\n      <td>Hans Rosling: The best stats you've ever seen</td>\n      <td>1</td>\n      <td>2006-06-27 20:38:00</td>\n      <td>[{'id': 9, 'name': 'Ingenious', 'count': 3202}...</td>\n      <td>[{'id': 2056, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Global health expert; data visionary</td>\n      <td>['Africa', 'Asia', 'Google', 'demo', 'economic...</td>\n      <td>The best stats you've ever seen</td>\n      <td>https://www.ted.com/talks/hans_rosling_shows_t...</td>\n      <td>12005869</td>\n      <td>2006</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   comments                                        description  duration  \\\n0      4553  Sir Ken Robinson makes an entertaining and pro...      1164   \n1       265  With the same humor and humanity he exuded in ...       977   \n2       124  New York Times columnist David Pogue takes aim...      1286   \n3       200  In an emotionally charged talk, MacArthur-winn...      1116   \n4       593  You've never seen data presented like this. Wi...      1190   \n\n     event   film_date  languages   main_speaker  \\\n0  TED2006  1140825600         60   Ken Robinson   \n1  TED2006  1140825600         43        Al Gore   \n2  TED2006  1140739200         26    David Pogue   \n3  TED2006  1140912000         35  Majora Carter   \n4  TED2006  1140566400         48   Hans Rosling   \n\n                                            name  num_speaker  \\\n0      Ken Robinson: Do schools kill creativity?            1   \n1           Al Gore: Averting the climate crisis            1   \n2                  David Pogue: Simplicity sells            1   \n3             Majora Carter: Greening the ghetto            1   \n4  Hans Rosling: The best stats you've ever seen            1   \n\n       published_date                                            ratings  \\\n0 2006-06-27 00:11:00  [{'id': 7, 'name': 'Funny', 'count': 19645}, {...   \n1 2006-06-27 00:11:00  [{'id': 7, 'name': 'Funny', 'count': 544}, {'i...   \n2 2006-06-27 00:11:00  [{'id': 7, 'name': 'Funny', 'count': 964}, {'i...   \n3 2006-06-27 00:11:00  [{'id': 3, 'name': 'Courageous', 'count': 760}...   \n4 2006-06-27 20:38:00  [{'id': 9, 'name': 'Ingenious', 'count': 3202}...   \n\n                                       related_talks  \\\n0  [{'id': 865, 'hero': 'https://pe.tedcdn.com/im...   \n1  [{'id': 243, 'hero': 'https://pe.tedcdn.com/im...   \n2  [{'id': 1725, 'hero': 'https://pe.tedcdn.com/i...   \n3  [{'id': 1041, 'hero': 'https://pe.tedcdn.com/i...   \n4  [{'id': 2056, 'hero': 'https://pe.tedcdn.com/i...   \n\n                     speaker_occupation  \\\n0                       Author/educator   \n1                      Climate advocate   \n2                  Technology columnist   \n3    Activist for environmental justice   \n4  Global health expert; data visionary   \n\n                                                tags  \\\n0  ['children', 'creativity', 'culture', 'dance',...   \n1  ['alternative energy', 'cars', 'climate change...   \n2  ['computers', 'entertainment', 'interface desi...   \n3  ['MacArthur grant', 'activism', 'business', 'c...   \n4  ['Africa', 'Asia', 'Google', 'demo', 'economic...   \n\n                             title  \\\n0      Do schools kill creativity?   \n1      Averting the climate crisis   \n2                 Simplicity sells   \n3              Greening the ghetto   \n4  The best stats you've ever seen   \n\n                                                 url     views  published_year  \n0  https://www.ted.com/talks/ken_robinson_says_sc...  47227110            2006  \n1  https://www.ted.com/talks/al_gore_on_averting_...   3200520            2006  \n2  https://www.ted.com/talks/david_pogue_says_sim...   1636292            2006  \n3  https://www.ted.com/talks/majora_carter_s_tale...   1697550            2006  \n4  https://www.ted.com/talks/hans_rosling_shows_t...  12005869            2006  "},"exec_count":5,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"08b960","input":"#Import the literal_eval function from ast\nfrom ast import literal_eval\n\n#Convert all NaN into stringified empty lists\nted['ratings'] = ted['ratings'].fillna('[]')\n\n#Apply literal_eval to convert stringified empty lists to the list object\nted['ratings'] = ted['ratings'].apply(literal_eval)\n\n\n#Convert list of dictionaries to a list of strings\nted['ratings'] = ted['ratings'].apply(lambda x: [i['name'].lower() for i in x] if isinstance(x, list) else [])\n\nted.to_csv('ted_clean.csv', index=False)\n#See how 'ratings' has changed?\nted.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>comments</th>\n      <th>description</th>\n      <th>duration</th>\n      <th>event</th>\n      <th>film_date</th>\n      <th>languages</th>\n      <th>main_speaker</th>\n      <th>name</th>\n      <th>num_speaker</th>\n      <th>published_date</th>\n      <th>ratings</th>\n      <th>related_talks</th>\n      <th>speaker_occupation</th>\n      <th>tags</th>\n      <th>title</th>\n      <th>url</th>\n      <th>views</th>\n      <th>published_year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4553</td>\n      <td>Sir Ken Robinson makes an entertaining and pro...</td>\n      <td>1164</td>\n      <td>TED2006</td>\n      <td>1140825600</td>\n      <td>60</td>\n      <td>Ken Robinson</td>\n      <td>Ken Robinson: Do schools kill creativity?</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[funny, beautiful, ingenious, courageous, long...</td>\n      <td>[{'id': 865, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Author/educator</td>\n      <td>['children', 'creativity', 'culture', 'dance',...</td>\n      <td>Do schools kill creativity?</td>\n      <td>https://www.ted.com/talks/ken_robinson_says_sc...</td>\n      <td>47227110</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>265</td>\n      <td>With the same humor and humanity he exuded in ...</td>\n      <td>977</td>\n      <td>TED2006</td>\n      <td>1140825600</td>\n      <td>43</td>\n      <td>Al Gore</td>\n      <td>Al Gore: Averting the climate crisis</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[funny, courageous, confusing, beautiful, unco...</td>\n      <td>[{'id': 243, 'hero': 'https://pe.tedcdn.com/im...</td>\n      <td>Climate advocate</td>\n      <td>['alternative energy', 'cars', 'climate change...</td>\n      <td>Averting the climate crisis</td>\n      <td>https://www.ted.com/talks/al_gore_on_averting_...</td>\n      <td>3200520</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>124</td>\n      <td>New York Times columnist David Pogue takes aim...</td>\n      <td>1286</td>\n      <td>TED2006</td>\n      <td>1140739200</td>\n      <td>26</td>\n      <td>David Pogue</td>\n      <td>David Pogue: Simplicity sells</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[funny, courageous, ingenious, beautiful, unco...</td>\n      <td>[{'id': 1725, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Technology columnist</td>\n      <td>['computers', 'entertainment', 'interface desi...</td>\n      <td>Simplicity sells</td>\n      <td>https://www.ted.com/talks/david_pogue_says_sim...</td>\n      <td>1636292</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>200</td>\n      <td>In an emotionally charged talk, MacArthur-winn...</td>\n      <td>1116</td>\n      <td>TED2006</td>\n      <td>1140912000</td>\n      <td>35</td>\n      <td>Majora Carter</td>\n      <td>Majora Carter: Greening the ghetto</td>\n      <td>1</td>\n      <td>2006-06-27 00:11:00</td>\n      <td>[courageous, beautiful, confusing, funny, inge...</td>\n      <td>[{'id': 1041, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Activist for environmental justice</td>\n      <td>['MacArthur grant', 'activism', 'business', 'c...</td>\n      <td>Greening the ghetto</td>\n      <td>https://www.ted.com/talks/majora_carter_s_tale...</td>\n      <td>1697550</td>\n      <td>2006</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>593</td>\n      <td>You've never seen data presented like this. Wi...</td>\n      <td>1190</td>\n      <td>TED2006</td>\n      <td>1140566400</td>\n      <td>48</td>\n      <td>Hans Rosling</td>\n      <td>Hans Rosling: The best stats you've ever seen</td>\n      <td>1</td>\n      <td>2006-06-27 20:38:00</td>\n      <td>[ingenious, funny, beautiful, courageous, long...</td>\n      <td>[{'id': 2056, 'hero': 'https://pe.tedcdn.com/i...</td>\n      <td>Global health expert; data visionary</td>\n      <td>['Africa', 'Asia', 'Google', 'demo', 'economic...</td>\n      <td>The best stats you've ever seen</td>\n      <td>https://www.ted.com/talks/hans_rosling_shows_t...</td>\n      <td>12005869</td>\n      <td>2006</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   comments                                        description  duration  \\\n0      4553  Sir Ken Robinson makes an entertaining and pro...      1164   \n1       265  With the same humor and humanity he exuded in ...       977   \n2       124  New York Times columnist David Pogue takes aim...      1286   \n3       200  In an emotionally charged talk, MacArthur-winn...      1116   \n4       593  You've never seen data presented like this. Wi...      1190   \n\n     event   film_date  languages   main_speaker  \\\n0  TED2006  1140825600         60   Ken Robinson   \n1  TED2006  1140825600         43        Al Gore   \n2  TED2006  1140739200         26    David Pogue   \n3  TED2006  1140912000         35  Majora Carter   \n4  TED2006  1140566400         48   Hans Rosling   \n\n                                            name  num_speaker  \\\n0      Ken Robinson: Do schools kill creativity?            1   \n1           Al Gore: Averting the climate crisis            1   \n2                  David Pogue: Simplicity sells            1   \n3             Majora Carter: Greening the ghetto            1   \n4  Hans Rosling: The best stats you've ever seen            1   \n\n       published_date                                            ratings  \\\n0 2006-06-27 00:11:00  [funny, beautiful, ingenious, courageous, long...   \n1 2006-06-27 00:11:00  [funny, courageous, confusing, beautiful, unco...   \n2 2006-06-27 00:11:00  [funny, courageous, ingenious, beautiful, unco...   \n3 2006-06-27 00:11:00  [courageous, beautiful, confusing, funny, inge...   \n4 2006-06-27 20:38:00  [ingenious, funny, beautiful, courageous, long...   \n\n                                       related_talks  \\\n0  [{'id': 865, 'hero': 'https://pe.tedcdn.com/im...   \n1  [{'id': 243, 'hero': 'https://pe.tedcdn.com/im...   \n2  [{'id': 1725, 'hero': 'https://pe.tedcdn.com/i...   \n3  [{'id': 1041, 'hero': 'https://pe.tedcdn.com/i...   \n4  [{'id': 2056, 'hero': 'https://pe.tedcdn.com/i...   \n\n                     speaker_occupation  \\\n0                       Author/educator   \n1                      Climate advocate   \n2                  Technology columnist   \n3    Activist for environmental justice   \n4  Global health expert; data visionary   \n\n                                                tags  \\\n0  ['children', 'creativity', 'culture', 'dance',...   \n1  ['alternative energy', 'cars', 'climate change...   \n2  ['computers', 'entertainment', 'interface desi...   \n3  ['MacArthur grant', 'activism', 'business', 'c...   \n4  ['Africa', 'Asia', 'Google', 'demo', 'economic...   \n\n                             title  \\\n0      Do schools kill creativity?   \n1      Averting the climate crisis   \n2                 Simplicity sells   \n3              Greening the ghetto   \n4  The best stats you've ever seen   \n\n                                                 url     views  published_year  \n0  https://www.ted.com/talks/ken_robinson_says_sc...  47227110            2006  \n1  https://www.ted.com/talks/al_gore_on_averting_...   3200520            2006  \n2  https://www.ted.com/talks/david_pogue_says_sim...   1636292            2006  \n3  https://www.ted.com/talks/majora_carter_s_tale...   1697550            2006  \n4  https://www.ted.com/talks/hans_rosling_shows_t...  12005869            2006  "},"exec_count":6,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"05e85e","input":"# Cleaning the Movies_Metadata csv\n\nIf you follow along with the comments while we cleaned data, you will note that we made some minor changes, primarily in chaining some of the functions that Banik uses. While it's not necessary to chain functions, it does simplify our code, so we included this method as another option. It's one of the nifty features of Pandas.","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"6d1a4f","input":"This is also straight from the book. When we use the literal_eval function on the ratings column, we get a dictionary that we can manipulate. The \"name\" key holds the part of the ratings that we care about. We want to convert these words to lower case and create a list of the words. We create an empty list if there were no ratings.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"ddf151","input":"# Cleaning the Ted Talks\n\nThis is straight out of the book. Apply is a handy function available in pandas that lets you run a function for each row or column of your data. You're seeing examples here of using a lambda (inline) function as well as using a separately created function (convert_int). \n\nThe lambda function is just grabbing the year from the published date. It's doing that by splitting the string on the '-' character. This creates an array. We grab the first item in the array, which, if we had a valid date, should be the year. If we didn't have a valid date, then we drop in the np.nan.","pos":3,"type":"cell"}
{"id":0,"time":1622380524993,"type":"user"}
{"last_load":1622380529319,"type":"file"}