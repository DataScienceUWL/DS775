{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false}},"type":"settings"}
{"cell_type":"code","exec_count":11,"id":"cc483c","input":"#Create a smaller dataframe with a subset of all features\nsmall_df = df[['title', 'release_date', 'budget', 'revenue', 'runtime', 'genres']]\n\n#Output only the first 5 rows of small_df\nsmall_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_date</th>\n      <th>budget</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Toy Story</td>\n      <td>10/30/95</td>\n      <td>30000000</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>[{'id': 16, 'name': 'Animation'}, {'id': 35, '...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jumanji</td>\n      <td>12/15/95</td>\n      <td>65000000</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Grumpier Old Men</td>\n      <td>12/22/95</td>\n      <td>0</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>[{'id': 10749, 'name': 'Romance'}, {'id': 35, ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Waiting to Exhale</td>\n      <td>12/22/95</td>\n      <td>16000000</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>[{'id': 35, 'name': 'Comedy'}, {'id': 18, 'nam...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Father of the Bride Part II</td>\n      <td>2/10/95</td>\n      <td>0</td>\n      <td>76578911</td>\n      <td>106.0</td>\n      <td>[{'id': 35, 'name': 'Comedy'}]</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                         title release_date    budget    revenue  runtime  \\\n0                    Toy Story     10/30/95  30000000  373554033     81.0   \n1                      Jumanji     12/15/95  65000000  262797249    104.0   \n2             Grumpier Old Men     12/22/95         0          0    101.0   \n3            Waiting to Exhale     12/22/95  16000000   81452156    127.0   \n4  Father of the Bride Part II      2/10/95         0   76578911    106.0   \n\n                                              genres  \n0  [{'id': 16, 'name': 'Animation'}, {'id': 35, '...  \n1  [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...  \n2  [{'id': 10749, 'name': 'Romance'}, {'id': 35, ...  \n3  [{'id': 35, 'name': 'Comedy'}, {'id': 18, 'nam...  \n4                     [{'id': 35, 'name': 'Comedy'}]  "},"execution_count":11,"metadata":{},"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"94a138","input":"#Get information of the data types of each feature\nsmall_df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 6 columns):\ntitle           5000 non-null object\nrelease_date    4996 non-null object\nbudget          5000 non-null int64\nrevenue         5000 non-null int64\nruntime         4994 non-null float64\ngenres          5000 non-null object\ndtypes: float64(1), int64(2), object(3)\nmemory usage: 234.5+ KB\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"c2f8c9","input":"#Import the numpy library \nimport numpy as np\n\n#Function to convert to float manually\ndef to_float(x):\n    try:\n        x = float(x)\n    except: \n        x = np.nan\n    return x\n\n#Apply the to_float function to all values in the budget column\nsmall_df['budget'] = small_df['budget'].apply(to_float)\n\n#Try converting to float using pandas astype\nsmall_df['budget'] = small_df['budget'].astype('float')\n\n#Get the data types for all features\nsmall_df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 6 columns):\ntitle           5000 non-null object\nrelease_date    4996 non-null object\nbudget          5000 non-null float64\nrevenue         5000 non-null int64\nruntime         4994 non-null float64\ngenres          5000 non-null object\ndtypes: float64(2), int64(1), object(3)\nmemory usage: 234.5+ KB\n"},"1":{"name":"stderr","output_type":"stream","text":"/Users/jbaggett/anaconda3/envs/ds775/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  del sys.path[0]\n/Users/jbaggett/anaconda3/envs/ds775/lib/python3.7/site-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  app.launch_new_instance()\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"6cee6f","input":"#Convert release_date into pandas datetime format\nsmall_df['release_date'] = pd.to_datetime(small_df['release_date'], errors='coerce')\n\n#Extract year from the datetime\nsmall_df['year'] = small_df['release_date'].apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)","output":{"0":{"name":"stderr","output_type":"stream","text":"/Users/jbaggett/anaconda3/envs/ds775/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \n/Users/jbaggett/anaconda3/envs/ds775/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \"\"\"\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"0cda83","input":"#Sort DataFrame based on release year\nsmall_df = small_df.sort_values('year')\n\nsmall_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_date</th>\n      <th>budget</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>genres</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2895</th>\n      <td>They Shoot Horses, Don't They?</td>\n      <td>1969-12-10</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>129.0</td>\n      <td>[{'id': 18, 'name': 'Drama'}]</td>\n      <td>1969</td>\n    </tr>\n    <tr>\n      <th>4870</th>\n      <td>Medium Cool</td>\n      <td>1969-08-27</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>111.0</td>\n      <td>[{'id': 18, 'name': 'Drama'}]</td>\n      <td>1969</td>\n    </tr>\n    <tr>\n      <th>3253</th>\n      <td>The Bridge at Remagen</td>\n      <td>1969-06-25</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>117.0</td>\n      <td>[{'id': 28, 'name': 'Action'}, {'id': 36, 'nam...</td>\n      <td>1969</td>\n    </tr>\n    <tr>\n      <th>592</th>\n      <td>The Wild Bunch</td>\n      <td>1969-06-17</td>\n      <td>6244087.0</td>\n      <td>638641</td>\n      <td>145.0</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 37, '...</td>\n      <td>1969</td>\n    </tr>\n    <tr>\n      <th>2070</th>\n      <td>Topaz</td>\n      <td>1969-12-18</td>\n      <td>4000000.0</td>\n      <td>6000000</td>\n      <td>143.0</td>\n      <td>[{'id': 28, 'name': 'Action'}, {'id': 18, 'nam...</td>\n      <td>1969</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                               title release_date     budget  revenue  \\\n2895  They Shoot Horses, Don't They?   1969-12-10        0.0        0   \n4870                     Medium Cool   1969-08-27        0.0        0   \n3253           The Bridge at Remagen   1969-06-25        0.0        0   \n592                   The Wild Bunch   1969-06-17  6244087.0   638641   \n2070                           Topaz   1969-12-18  4000000.0  6000000   \n\n      runtime                                             genres  year  \n2895    129.0                      [{'id': 18, 'name': 'Drama'}]  1969  \n4870    111.0                      [{'id': 18, 'name': 'Drama'}]  1969  \n3253    117.0  [{'id': 28, 'name': 'Action'}, {'id': 36, 'nam...  1969  \n592     145.0  [{'id': 12, 'name': 'Adventure'}, {'id': 37, '...  1969  \n2070    143.0  [{'id': 28, 'name': 'Action'}, {'id': 18, 'nam...  1969  "},"execution_count":15,"metadata":{},"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"c7a8fc","input":"#Sort Movies based on revenue (in descending order)\nsmall_df = small_df.sort_values('revenue', ascending=False)\n\nsmall_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_date</th>\n      <th>budget</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>genres</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1639</th>\n      <td>Titanic</td>\n      <td>1997-11-18</td>\n      <td>200000000.0</td>\n      <td>1845034188</td>\n      <td>194.0</td>\n      <td>[{'id': 18, 'name': 'Drama'}, {'id': 10749, 'n...</td>\n      <td>1997</td>\n    </tr>\n    <tr>\n      <th>4766</th>\n      <td>Harry Potter and the Philosopher's Stone</td>\n      <td>2001-11-16</td>\n      <td>125000000.0</td>\n      <td>976475550</td>\n      <td>152.0</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n      <td>2001</td>\n    </tr>\n    <tr>\n      <th>2514</th>\n      <td>Star Wars: Episode I - The Phantom Menace</td>\n      <td>1999-05-19</td>\n      <td>115000000.0</td>\n      <td>924317558</td>\n      <td>136.0</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 28, '...</td>\n      <td>1999</td>\n    </tr>\n    <tr>\n      <th>475</th>\n      <td>Jurassic Park</td>\n      <td>1993-06-11</td>\n      <td>63000000.0</td>\n      <td>920100000</td>\n      <td>127.0</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 878, ...</td>\n      <td>1993</td>\n    </tr>\n    <tr>\n      <th>4863</th>\n      <td>The Lord of the Rings: The Fellowship of the Ring</td>\n      <td>2001-12-18</td>\n      <td>93000000.0</td>\n      <td>871368364</td>\n      <td>178.0</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n      <td>2001</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                                                  title release_date  \\\n1639                                            Titanic   1997-11-18   \n4766           Harry Potter and the Philosopher's Stone   2001-11-16   \n2514          Star Wars: Episode I - The Phantom Menace   1999-05-19   \n475                                       Jurassic Park   1993-06-11   \n4863  The Lord of the Rings: The Fellowship of the Ring   2001-12-18   \n\n           budget     revenue  runtime  \\\n1639  200000000.0  1845034188    194.0   \n4766  125000000.0   976475550    152.0   \n2514  115000000.0   924317558    136.0   \n475    63000000.0   920100000    127.0   \n4863   93000000.0   871368364    178.0   \n\n                                                 genres  year  \n1639  [{'id': 18, 'name': 'Drama'}, {'id': 10749, 'n...  1997  \n4766  [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...  2001  \n2514  [{'id': 12, 'name': 'Adventure'}, {'id': 28, '...  1999  \n475   [{'id': 12, 'name': 'Adventure'}, {'id': 878, ...  1993  \n4863  [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...  2001  "},"execution_count":16,"metadata":{},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"5b447e","input":"#Select only those movies which earned more than 1 billion\nnew = small_df[small_df['revenue'] > 1e9]\n\nnew","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_date</th>\n      <th>budget</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>genres</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1639</th>\n      <td>Titanic</td>\n      <td>1997-11-18</td>\n      <td>200000000.0</td>\n      <td>1845034188</td>\n      <td>194.0</td>\n      <td>[{'id': 18, 'name': 'Drama'}, {'id': 10749, 'n...</td>\n      <td>1997</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        title release_date       budget     revenue  runtime  \\\n1639  Titanic   1997-11-18  200000000.0  1845034188    194.0   \n\n                                                 genres  year  \n1639  [{'id': 18, 'name': 'Drama'}, {'id': 10749, 'n...  1997  "},"execution_count":17,"metadata":{},"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"519219","input":"type(small_df['year'])","output":{"0":{"data":{"text/plain":"pandas.core.series.Series"},"execution_count":18,"metadata":{},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"30855d","input":"#Get the runtime Series object\nruntime = small_df['runtime']\n\n#Print the longest runtime of any movie\nprint(runtime.max())\n\n#Print the shortest runtime of any movie\nprint(runtime.min())","output":{"0":{"name":"stdout","output_type":"stream","text":"298.0\n0.0\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"d7cdb4","input":"import pandas as pd\npd.__version__","output":{"0":{"data":{"text/plain":"'0.25.0'"},"execution_count":2,"metadata":{},"output_type":"execute_result"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"46eeaf","input":"#Get the budget Series object\nbudget = small_df['budget']\n\n#Print the mean budget of the movies\nprint(budget.mean())\n\n#Print the median budget of the movies\nprint(budget.median())","output":{"0":{"name":"stdout","output_type":"stream","text":"10050354.6348\n0.0\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"7c4216","input":"#Get the revenue Series object\nrevenue = small_df['revenue']\n\n#Revenue generated by the 90th percentile movie\nrevenue.quantile(0.90)","output":{"0":{"data":{"text/plain":"85013183.00000004"},"execution_count":21,"metadata":{},"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"f1b78e","input":"#Get number of movies released each year\nsmall_df['year'].value_counts()","output":{"0":{"data":{"text/plain":"1996    358\n1998    336\n1995    332\n1997    318\n2000    309\n       ... \n2020      1\n2021      1\n2018      1\n2010      1\n2024      1\nName: year, Length: 90, dtype: int64"},"execution_count":22,"metadata":{},"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"f4d444","input":"#Read the CSV File into df\n# Note we have truncated the dataset to 5000 rows for illustration, the actual data has over 40000 rows\n# the full dataset is available on Kaggle here\n# https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/the-movies-dataset.zip/7\n# the recommenders work better with more data of course\n\ndf = pd.read_csv('../data/movies_metadata.csv', low_memory=False)\n\n#We will find out what the following code does a little later!\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>adult</th>\n      <th>belongs_to_collection</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>homepage</th>\n      <th>id</th>\n      <th>imdb_id</th>\n      <th>original_language</th>\n      <th>original_title</th>\n      <th>overview</th>\n      <th>...</th>\n      <th>release_date</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>spoken_languages</th>\n      <th>status</th>\n      <th>tagline</th>\n      <th>title</th>\n      <th>video</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>{'id': 10194, 'name': 'Toy Story Collection', ...</td>\n      <td>30000000</td>\n      <td>[{'id': 16, 'name': 'Animation'}, {'id': 35, '...</td>\n      <td>http://toystory.disney.com/toy-story</td>\n      <td>862</td>\n      <td>tt0114709</td>\n      <td>en</td>\n      <td>Toy Story</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>...</td>\n      <td>10/30/95</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n      <td>Released</td>\n      <td>NaN</td>\n      <td>Toy Story</td>\n      <td>False</td>\n      <td>7.7</td>\n      <td>5415</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>NaN</td>\n      <td>65000000</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n      <td>NaN</td>\n      <td>8844</td>\n      <td>tt0113497</td>\n      <td>en</td>\n      <td>Jumanji</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>...</td>\n      <td>12/15/95</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>[{'iso_639_1': 'en', 'name': 'English'}, {'iso...</td>\n      <td>Released</td>\n      <td>Roll the dice and unleash the excitement!</td>\n      <td>Jumanji</td>\n      <td>False</td>\n      <td>6.9</td>\n      <td>2413</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>{'id': 119050, 'name': 'Grumpy Old Men Collect...</td>\n      <td>0</td>\n      <td>[{'id': 10749, 'name': 'Romance'}, {'id': 35, ...</td>\n      <td>NaN</td>\n      <td>15602</td>\n      <td>tt0113228</td>\n      <td>en</td>\n      <td>Grumpier Old Men</td>\n      <td>A family wedding reignites the ancient feud be...</td>\n      <td>...</td>\n      <td>12/22/95</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n      <td>Released</td>\n      <td>Still Yelling. Still Fighting. Still Ready for...</td>\n      <td>Grumpier Old Men</td>\n      <td>False</td>\n      <td>6.5</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>NaN</td>\n      <td>16000000</td>\n      <td>[{'id': 35, 'name': 'Comedy'}, {'id': 18, 'nam...</td>\n      <td>NaN</td>\n      <td>31357</td>\n      <td>tt0114885</td>\n      <td>en</td>\n      <td>Waiting to Exhale</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>...</td>\n      <td>12/22/95</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n      <td>Released</td>\n      <td>Friends are the people who let you be yourself...</td>\n      <td>Waiting to Exhale</td>\n      <td>False</td>\n      <td>6.1</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>{'id': 96871, 'name': 'Father of the Bride Col...</td>\n      <td>0</td>\n      <td>[{'id': 35, 'name': 'Comedy'}]</td>\n      <td>NaN</td>\n      <td>11862</td>\n      <td>tt0113041</td>\n      <td>en</td>\n      <td>Father of the Bride Part II</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>...</td>\n      <td>2/10/95</td>\n      <td>76578911</td>\n      <td>106.0</td>\n      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n      <td>Released</td>\n      <td>Just When His World Is Back To Normal... He's ...</td>\n      <td>Father of the Bride Part II</td>\n      <td>False</td>\n      <td>5.7</td>\n      <td>173</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 24 columns</p>\n</div>","text/plain":"   adult                              belongs_to_collection    budget  \\\n0  False  {'id': 10194, 'name': 'Toy Story Collection', ...  30000000   \n1  False                                                NaN  65000000   \n2  False  {'id': 119050, 'name': 'Grumpy Old Men Collect...         0   \n3  False                                                NaN  16000000   \n4  False  {'id': 96871, 'name': 'Father of the Bride Col...         0   \n\n                                              genres  \\\n0  [{'id': 16, 'name': 'Animation'}, {'id': 35, '...   \n1  [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...   \n2  [{'id': 10749, 'name': 'Romance'}, {'id': 35, ...   \n3  [{'id': 35, 'name': 'Comedy'}, {'id': 18, 'nam...   \n4                     [{'id': 35, 'name': 'Comedy'}]   \n\n                               homepage     id    imdb_id original_language  \\\n0  http://toystory.disney.com/toy-story    862  tt0114709                en   \n1                                   NaN   8844  tt0113497                en   \n2                                   NaN  15602  tt0113228                en   \n3                                   NaN  31357  tt0114885                en   \n4                                   NaN  11862  tt0113041                en   \n\n                original_title  \\\n0                    Toy Story   \n1                      Jumanji   \n2             Grumpier Old Men   \n3            Waiting to Exhale   \n4  Father of the Bride Part II   \n\n                                            overview  ...  release_date  \\\n0  Led by Woody, Andy's toys live happily in his ...  ...      10/30/95   \n1  When siblings Judy and Peter discover an encha...  ...      12/15/95   \n2  A family wedding reignites the ancient feud be...  ...      12/22/95   \n3  Cheated on, mistreated and stepped on, the wom...  ...      12/22/95   \n4  Just when George Banks has recovered from his ...  ...       2/10/95   \n\n     revenue runtime                                   spoken_languages  \\\n0  373554033    81.0           [{'iso_639_1': 'en', 'name': 'English'}]   \n1  262797249   104.0  [{'iso_639_1': 'en', 'name': 'English'}, {'iso...   \n2          0   101.0           [{'iso_639_1': 'en', 'name': 'English'}]   \n3   81452156   127.0           [{'iso_639_1': 'en', 'name': 'English'}]   \n4   76578911   106.0           [{'iso_639_1': 'en', 'name': 'English'}]   \n\n     status                                            tagline  \\\n0  Released                                                NaN   \n1  Released          Roll the dice and unleash the excitement!   \n2  Released  Still Yelling. Still Fighting. Still Ready for...   \n3  Released  Friends are the people who let you be yourself...   \n4  Released  Just When His World Is Back To Normal... He's ...   \n\n                         title  video vote_average vote_count  \n0                    Toy Story  False          7.7       5415  \n1                      Jumanji  False          6.9       2413  \n2             Grumpier Old Men  False          6.5         92  \n3            Waiting to Exhale  False          6.1         34  \n4  Father of the Bride Part II  False          5.7        173  \n\n[5 rows x 24 columns]"},"execution_count":3,"metadata":{},"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"992d66","input":"#Output the type of df\ntype(df)","output":{"0":{"data":{"text/plain":"pandas.core.frame.DataFrame"},"execution_count":4,"metadata":{},"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"0e2871","input":"#Output the shape of df\ndf.shape","output":{"0":{"data":{"text/plain":"(5000, 24)"},"execution_count":5,"metadata":{},"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"816ae2","input":"#Output the columns of df\ndf.columns","output":{"0":{"data":{"text/plain":"Index(['adult', 'belongs_to_collection', 'budget', 'genres', 'homepage', 'id',\n       'imdb_id', 'original_language', 'original_title', 'overview',\n       'popularity', 'poster_path', 'production_companies',\n       'production_countries', 'release_date', 'revenue', 'runtime',\n       'spoken_languages', 'status', 'tagline', 'title', 'video',\n       'vote_average', 'vote_count'],\n      dtype='object')"},"execution_count":6,"metadata":{},"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"6475bb","input":"#Select the second movie in df\nsecond = df.iloc[1]\nsecond","output":{"0":{"data":{"text/plain":"adult                                                                False\nbelongs_to_collection                                                  NaN\nbudget                                                            65000000\ngenres                   [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...\nhomepage                                                               NaN\nid                                                                    8844\nimdb_id                                                          tt0113497\noriginal_language                                                       en\noriginal_title                                                     Jumanji\noverview                 When siblings Judy and Peter discover an encha...\npopularity                                                         17.0155\nposter_path                               /vzmL6fP7aPKNKPRTFnZmiUfciyV.jpg\nproduction_companies     [{'name': 'TriStar Pictures', 'id': 559}, {'na...\nproduction_countries     [{'iso_3166_1': 'US', 'name': 'United States o...\nrelease_date                                                      12/15/95\nrevenue                                                          262797249\nruntime                                                                104\nspoken_languages         [{'iso_639_1': 'en', 'name': 'English'}, {'iso...\nstatus                                                            Released\ntagline                          Roll the dice and unleash the excitement!\ntitle                                                              Jumanji\nvideo                                                                False\nvote_average                                                           6.9\nvote_count                                                            2413\nName: 1, dtype: object"},"execution_count":7,"metadata":{},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"e1a791","input":"#Change the index to the title\ndf = df.set_index('title')\n\n#Access the movie with title 'Jumanji'\njum = df.loc['Jumanji']\njum","output":{"0":{"data":{"text/plain":"adult                                                                False\nbelongs_to_collection                                                  NaN\nbudget                                                            65000000\ngenres                   [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...\nhomepage                                                               NaN\nid                                                                    8844\nimdb_id                                                          tt0113497\noriginal_language                                                       en\noriginal_title                                                     Jumanji\noverview                 When siblings Judy and Peter discover an encha...\npopularity                                                         17.0155\nposter_path                               /vzmL6fP7aPKNKPRTFnZmiUfciyV.jpg\nproduction_companies     [{'name': 'TriStar Pictures', 'id': 559}, {'na...\nproduction_countries     [{'iso_3166_1': 'US', 'name': 'United States o...\nrelease_date                                                      12/15/95\nrevenue                                                          262797249\nruntime                                                                104\nspoken_languages         [{'iso_639_1': 'en', 'name': 'English'}, {'iso...\nstatus                                                            Released\ntagline                          Roll the dice and unleash the excitement!\nvideo                                                                False\nvote_average                                                           6.9\nvote_count                                                            2413\nName: Jumanji, dtype: object"},"execution_count":8,"metadata":{},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"90b09c","input":"df = df.reset_index()","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":96,"id":"452de2","input":"#Select only those movies which earned more than 1 billion and spent less than 150 million\nnew2 = small_df[(small_df['revenue'] > 1e9) & (small_df['budget'] < 1.5e8)]\nnew2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_date</th>\n      <th>budget</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>genres</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>17437</th>\n      <td>Harry Potter and the Deathly Hallows: Part 2</td>\n      <td>2011-07-07</td>\n      <td>125000000.0</td>\n      <td>1342000000</td>\n      <td>130.0</td>\n      <td>[{'id': 10751, 'name': 'Family'}, {'id': 14, '...</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>30696</th>\n      <td>Minions</td>\n      <td>2015-06-17</td>\n      <td>74000000.0</td>\n      <td>1156730962</td>\n      <td>91.0</td>\n      <td>[{'id': 10751, 'name': 'Family'}, {'id': 16, '...</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>7000</th>\n      <td>The Lord of the Rings: The Return of the King</td>\n      <td>2003-12-01</td>\n      <td>94000000.0</td>\n      <td>1118888979</td>\n      <td>201.0</td>\n      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n      <td>2003</td>\n    </tr>\n    <tr>\n      <th>44003</th>\n      <td>Despicable Me 3</td>\n      <td>2017-06-15</td>\n      <td>80000000.0</td>\n      <td>1020063384</td>\n      <td>96.0</td>\n      <td>[{'id': 28, 'name': 'Action'}, {'id': 16, 'nam...</td>\n      <td>2017</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                                               title release_date  \\\n17437   Harry Potter and the Deathly Hallows: Part 2   2011-07-07   \n30696                                        Minions   2015-06-17   \n7000   The Lord of the Rings: The Return of the King   2003-12-01   \n44003                                Despicable Me 3   2017-06-15   \n\n            budget     revenue  runtime  \\\n17437  125000000.0  1342000000    130.0   \n30696   74000000.0  1156730962     91.0   \n7000    94000000.0  1118888979    201.0   \n44003   80000000.0  1020063384     96.0   \n\n                                                  genres  year  \n17437  [{'id': 10751, 'name': 'Family'}, {'id': 14, '...  2011  \n30696  [{'id': 10751, 'name': 'Family'}, {'id': 16, '...  2015  \n7000   [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...  2003  \n44003  [{'id': 28, 'name': 'Action'}, {'id': 16, 'nam...  2017  "},"execution_count":96,"metadata":{},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"id":0,"time":1673925935478,"type":"user"}
{"last_load":1673925935571,"type":"file"}