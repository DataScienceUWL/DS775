{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"29077a","input":"import pandas as pd\nimport numpy as np\n\n#Read the CSV File into df\n# Note we have truncated the dataset to 5000 rows for illustration, the actual data has over 40000 rows\n# the full dataset is available on Kaggle here\n# https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/the-movies-dataset.zip/7\n# the recommenders work better with more data of course\n\n#Import data from the clean file (created in the Knowledge Recommender.ipynb file)\ndf = pd.read_csv('./data/metadata_clean.csv')\n\n#Print the head of the cleaned DataFrame\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>genres</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Toy Story</td>\n      <td>['animation', 'comedy', 'family']</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jumanji</td>\n      <td>['adventure', 'fantasy', 'family']</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Grumpier Old Men</td>\n      <td>['romance', 'comedy']</td>\n      <td>101.0</td>\n      <td>6.5</td>\n      <td>92</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Waiting to Exhale</td>\n      <td>['comedy', 'drama', 'romance']</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Father of the Bride Part II</td>\n      <td>['comedy']</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                         title                              genres  runtime  \\\n0                    Toy Story   ['animation', 'comedy', 'family']     81.0   \n1                      Jumanji  ['adventure', 'fantasy', 'family']    104.0   \n2             Grumpier Old Men               ['romance', 'comedy']    101.0   \n3            Waiting to Exhale      ['comedy', 'drama', 'romance']    127.0   \n4  Father of the Bride Part II                          ['comedy']    106.0   \n\n   vote_average  vote_count  year  \n0           7.7        5415  1995  \n1           6.9        2413  1995  \n2           6.5          92  1995  \n3           6.1          34  1995  \n4           5.7         173  1995  "},"exec_count":1,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"0bb4f6","input":"#Convert the IDs of df into int (yes, this may throw an error, we'll do something different below)\ndf['id'] = df['id'].astype('int')","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"837c03","input":"# Function to convert all non-integer IDs to NaN\ndef clean_ids(x):\n    try:\n        return int(x)\n    except:\n        return np.nan","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"e264ba","input":"#Clean the ids of df\ndf['id'] = df['id'].apply(clean_ids)\n\n#Filter all rows that have a null ID\ndf = df[df['id'].notnull()]","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"09109d","input":"# Convert IDs into integer\ndf.loc['id'] = df['id'].astype('int')\nkey_df['id'] = key_df['id'].astype('int')\ncred_df['id'] = cred_df['id'].astype('int')\n\n# Merge keywords and credits into your main metadata dataframe\ndf = df.merge(cred_df, on='id')\ndf = df.merge(key_df, on='id')\n\n#Display the head of df\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>genres</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n      <th>overview</th>\n      <th>id</th>\n      <th>cast</th>\n      <th>crew</th>\n      <th>keywords</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Toy Story</td>\n      <td>['animation', 'comedy', 'family']</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415.0</td>\n      <td>1995.0</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>862.0</td>\n      <td>[{'cast_id': 14, 'character': 'Woody (voice)',...</td>\n      <td>[{'credit_id': '52fe4284c3a36847f8024f49', 'de...</td>\n      <td>[{'id': 931, 'name': 'jealousy'}, {'id': 4290,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jumanji</td>\n      <td>['adventure', 'fantasy', 'family']</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413.0</td>\n      <td>1995.0</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>8844.0</td>\n      <td>[{'cast_id': 1, 'character': 'Alan Parrish', '...</td>\n      <td>[{'credit_id': '52fe44bfc3a36847f80a7cd1', 'de...</td>\n      <td>[{'id': 10090, 'name': 'board game'}, {'id': 1...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Grumpier Old Men</td>\n      <td>['romance', 'comedy']</td>\n      <td>101.0</td>\n      <td>6.5</td>\n      <td>92.0</td>\n      <td>1995.0</td>\n      <td>A family wedding reignites the ancient feud be...</td>\n      <td>15602.0</td>\n      <td>[{'cast_id': 2, 'character': 'Max Goldman', 'c...</td>\n      <td>[{'credit_id': '52fe466a9251416c75077a89', 'de...</td>\n      <td>[{'id': 1495, 'name': 'fishing'}, {'id': 12392...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Waiting to Exhale</td>\n      <td>['comedy', 'drama', 'romance']</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34.0</td>\n      <td>1995.0</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>31357.0</td>\n      <td>[{'cast_id': 1, 'character': \"Savannah 'Vannah...</td>\n      <td>[{'credit_id': '52fe44779251416c91011acb', 'de...</td>\n      <td>[{'id': 818, 'name': 'based on novel'}, {'id':...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Father of the Bride Part II</td>\n      <td>['comedy']</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173.0</td>\n      <td>1995.0</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>11862.0</td>\n      <td>[{'cast_id': 1, 'character': 'George Banks', '...</td>\n      <td>[{'credit_id': '52fe44959251416c75039ed7', 'de...</td>\n      <td>[{'id': 1009, 'name': 'baby'}, {'id': 1599, 'n...</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                         title                              genres  runtime  \\\n0                    Toy Story   ['animation', 'comedy', 'family']     81.0   \n1                      Jumanji  ['adventure', 'fantasy', 'family']    104.0   \n2             Grumpier Old Men               ['romance', 'comedy']    101.0   \n3            Waiting to Exhale      ['comedy', 'drama', 'romance']    127.0   \n4  Father of the Bride Part II                          ['comedy']    106.0   \n\n   vote_average  vote_count    year  \\\n0           7.7      5415.0  1995.0   \n1           6.9      2413.0  1995.0   \n2           6.5        92.0  1995.0   \n3           6.1        34.0  1995.0   \n4           5.7       173.0  1995.0   \n\n                                            overview       id  \\\n0  Led by Woody, Andy's toys live happily in his ...    862.0   \n1  When siblings Judy and Peter discover an encha...   8844.0   \n2  A family wedding reignites the ancient feud be...  15602.0   \n3  Cheated on, mistreated and stepped on, the wom...  31357.0   \n4  Just when George Banks has recovered from his ...  11862.0   \n\n                                                cast  \\\n0  [{'cast_id': 14, 'character': 'Woody (voice)',...   \n1  [{'cast_id': 1, 'character': 'Alan Parrish', '...   \n2  [{'cast_id': 2, 'character': 'Max Goldman', 'c...   \n3  [{'cast_id': 1, 'character': \"Savannah 'Vannah...   \n4  [{'cast_id': 1, 'character': 'George Banks', '...   \n\n                                                crew  \\\n0  [{'credit_id': '52fe4284c3a36847f8024f49', 'de...   \n1  [{'credit_id': '52fe44bfc3a36847f80a7cd1', 'de...   \n2  [{'credit_id': '52fe466a9251416c75077a89', 'de...   \n3  [{'credit_id': '52fe44779251416c91011acb', 'de...   \n4  [{'credit_id': '52fe44959251416c75039ed7', 'de...   \n\n                                            keywords  \n0  [{'id': 931, 'name': 'jealousy'}, {'id': 4290,...  \n1  [{'id': 10090, 'name': 'board game'}, {'id': 1...  \n2  [{'id': 1495, 'name': 'fishing'}, {'id': 12392...  \n3  [{'id': 818, 'name': 'based on novel'}, {'id':...  \n4  [{'id': 1009, 'name': 'baby'}, {'id': 1599, 'n...  "},"exec_count":13,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"7a9d35","input":"# Convert the stringified objects into the native python objects\nfrom ast import literal_eval\n\nfeatures = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    df[feature] = df[feature].apply(literal_eval)","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"f98f4e","input":"#Print the first cast member of the first movie in df\ndf.iloc[0]['crew'][0]","output":{"0":{"data":{"text/plain":"{'credit_id': '52fe4284c3a36847f8024f49',\n 'department': 'Directing',\n 'gender': 2,\n 'id': 7879,\n 'job': 'Director',\n 'name': 'John Lasseter',\n 'profile_path': '/7EdqiNbr4FRjIhKHyPPdFfEEEFG.jpg'}"},"exec_count":16,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"04b8a0","input":"# Extract the director's name. If director is not listed, return NaN\ndef get_director(x):\n    for crew_member in x:\n        if crew_member['job'] == 'Director':\n            return crew_member['name']\n    return np.nan","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6172c3","input":"#Define the new director feature\ndf['director'] = df['crew'].apply(get_director)\n\n#Print the directors of the first five movies\ndf['director'].head()","output":{"0":{"data":{"text/plain":"0      John Lasseter\n1       Joe Johnston\n2      Howard Deutch\n3    Forest Whitaker\n4      Charles Shyer\nName: director, dtype: object"},"exec_count":18,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"365516","input":"# Returns the list top 3 elements or entire list; whichever is more.\ndef generate_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.\n        if len(names) > 3:\n            names = names[:3]\n        return names\n\n    #Return empty list in case of missing/malformed data\n    return []","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ab480b","input":"#Import the original file\norig_df = pd.read_csv('./data/movies_metadata.csv', low_memory=False)\n\n#Add the useful features into the cleaned dataframe\ndf['overview'], df['id'] = orig_df['overview'], orig_df['id']\n\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>genres</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n      <th>overview</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Toy Story</td>\n      <td>['animation', 'comedy', 'family']</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>862</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jumanji</td>\n      <td>['adventure', 'fantasy', 'family']</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>8844</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Grumpier Old Men</td>\n      <td>['romance', 'comedy']</td>\n      <td>101.0</td>\n      <td>6.5</td>\n      <td>92</td>\n      <td>1995</td>\n      <td>A family wedding reignites the ancient feud be...</td>\n      <td>15602</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Waiting to Exhale</td>\n      <td>['comedy', 'drama', 'romance']</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>31357</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Father of the Bride Part II</td>\n      <td>['comedy']</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173</td>\n      <td>1995</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>11862</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                         title                              genres  runtime  \\\n0                    Toy Story   ['animation', 'comedy', 'family']     81.0   \n1                      Jumanji  ['adventure', 'fantasy', 'family']    104.0   \n2             Grumpier Old Men               ['romance', 'comedy']    101.0   \n3            Waiting to Exhale      ['comedy', 'drama', 'romance']    127.0   \n4  Father of the Bride Part II                          ['comedy']    106.0   \n\n   vote_average  vote_count  year  \\\n0           7.7        5415  1995   \n1           6.9        2413  1995   \n2           6.5          92  1995   \n3           6.1          34  1995   \n4           5.7         173  1995   \n\n                                            overview     id  \n0  Led by Woody, Andy's toys live happily in his ...    862  \n1  When siblings Judy and Peter discover an encha...   8844  \n2  A family wedding reignites the ancient feud be...  15602  \n3  Cheated on, mistreated and stepped on, the wom...  31357  \n4  Just when George Banks has recovered from his ...  11862  "},"exec_count":2,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"ac38fe","input":"#Apply the generate_list function to cast and keywords\ndf['cast'] = df['cast'].apply(generate_list)\ndf['keywords'] = df['keywords'].apply(generate_list)","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"328622","input":"#Only consider a maximum of 3 genres\ndf['genres'] = df['genres'].apply(lambda x: x[:3])","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"b40180","input":"# Print the new features of the first 5 movies along with title\ndf[['title', 'cast', 'director', 'keywords', 'genres']].head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>cast</th>\n      <th>director</th>\n      <th>keywords</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Toy Story</td>\n      <td>[Tom Hanks, Tim Allen, Don Rickles]</td>\n      <td>John Lasseter</td>\n      <td>[jealousy, toy, boy]</td>\n      <td>[animation, comedy, family]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jumanji</td>\n      <td>[Robin Williams, Jonathan Hyde, Kirsten Dunst]</td>\n      <td>Joe Johnston</td>\n      <td>[board game, disappearance, based on children'...</td>\n      <td>[adventure, fantasy, family]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Grumpier Old Men</td>\n      <td>[Walter Matthau, Jack Lemmon, Ann-Margret]</td>\n      <td>Howard Deutch</td>\n      <td>[fishing, best friend, duringcreditsstinger]</td>\n      <td>[romance, comedy]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Waiting to Exhale</td>\n      <td>[Whitney Houston, Angela Bassett, Loretta Devine]</td>\n      <td>Forest Whitaker</td>\n      <td>[based on novel, interracial relationship, sin...</td>\n      <td>[comedy, drama, romance]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Father of the Bride Part II</td>\n      <td>[Steve Martin, Diane Keaton, Martin Short]</td>\n      <td>Charles Shyer</td>\n      <td>[baby, midlife crisis, confidence]</td>\n      <td>[comedy]</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                         title  \\\n0                    Toy Story   \n1                      Jumanji   \n2             Grumpier Old Men   \n3            Waiting to Exhale   \n4  Father of the Bride Part II   \n\n                                                cast         director  \\\n0                [Tom Hanks, Tim Allen, Don Rickles]    John Lasseter   \n1     [Robin Williams, Jonathan Hyde, Kirsten Dunst]     Joe Johnston   \n2         [Walter Matthau, Jack Lemmon, Ann-Margret]    Howard Deutch   \n3  [Whitney Houston, Angela Bassett, Loretta Devine]  Forest Whitaker   \n4         [Steve Martin, Diane Keaton, Martin Short]    Charles Shyer   \n\n                                            keywords  \\\n0                               [jealousy, toy, boy]   \n1  [board game, disappearance, based on children'...   \n2       [fishing, best friend, duringcreditsstinger]   \n3  [based on novel, interracial relationship, sin...   \n4                 [baby, midlife crisis, confidence]   \n\n                         genres  \n0   [animation, comedy, family]  \n1  [adventure, fantasy, family]  \n2             [romance, comedy]  \n3      [comedy, drama, romance]  \n4                      [comedy]  "},"exec_count":22,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"81c0b8","input":"# Function to sanitize data to prevent ambiguity. It removes spaces and converts to lowercase\ndef sanitize(x):\n    if isinstance(x, list):\n        #Strip spaces and convert to lowercase\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"efe778","input":"#Apply the generate_list function to cast, keywords, director and genres\nfor feature in ['cast', 'director', 'genres', 'keywords']:\n    df[feature] = df[feature].apply(sanitize)","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"a9bbe5","input":"#Function that creates a soup out of the desired metadata\ndef create_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])","pos":25,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"a3fbbd","input":"# Create the new soup feature\ndf['soup'] = df.apply(create_soup, axis=1)","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"62b2a4","input":"#Display the soup of the first movie\ndf.iloc[0]['soup']","output":{"0":{"data":{"text/plain":"'jealousy toy boy tomhanks timallen donrickles johnlasseter animation comedy family'"},"exec_count":27,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"ff846f","input":"# Import CountVectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n#Define a new CountVectorizer object and create vectors for the soup\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(df['soup'])","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"08fb28","input":"#Import cosine_similarity function\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n#Compute the cosine similarity score (equivalent to dot product for tf-idf vectors)\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"a54410","input":"#Import TfIdfVectorizer from the scikit-learn library\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stopwords\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\ndf['overview'] = df['overview'].fillna('')\n\n#Construct the required TF-IDF matrix by applying the fit_transform method on the overview feature\ntfidf_matrix = tfidf.fit_transform(df['overview'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","output":{"0":{"data":{"text/plain":"(5000, 22304)"},"exec_count":3,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"56a61b","input":"# Reset index of your df and construct reverse mapping again\ndf = df.reset_index()\nindices2 = pd.Series(df.index, index=df['title'])","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"819c64","input":"content_recommender('The Lion King', cosine_sim2, df, indices2)","output":{"0":{"data":{"text/plain":"3315                Creature Comforts\n3476                     Time Masters\n3703    Thomas and the Magic Railroad\n1004              So Dear to My Heart\n2766                       Thumbelina\n4914            The Flight of Dragons\n1634                 Ill Gotten Gains\n3466       Jails, Hospitals & Hip-Hop\n651         James and the Giant Peach\n770       The Hunchback of Notre Dame\nName: title, dtype: object"},"exec_count":31,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"848fec","input":"# Import linear_kernel to compute the dot product\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"84bee4","input":"#Construct a reverse mapping of indices and movie titles, and drop duplicate titles, if any\nindices = pd.Series(df.index, index=df['title']).drop_duplicates()","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"10beb9","input":"###############################\n# This is Banik's Approach. Don't use this approach. Use the approach from the lesson\n###############################\n\n# Function that takes in movie title as input and gives recommendations \ndef content_recommender(title, cosine_sim=cosine_sim, df=df, indices=indices):\n    # Obtain the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    # And convert it into a list of tuples as described above\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the cosine similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies. Ignore the first movie.\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"6b760d","input":"#Get recommendations for The Lion King\n\n# some of these will seem inappropriate with our smaller dataset, grab the full data from kaggle for better results\ncontent_recommender('The Lion King')","output":{"0":{"data":{"text/plain":"3203         The Waiting Game\n2779    Napoleon and Samantha\n892          The Wizard of Oz\n3293                 The Bear\n1741           Prince Valiant\n2094        Shadow of a Doubt\n3695              Pot o' Gold\n2960                    42 Up\n2253                King Kong\n1783         A Perfect Murder\nName: title, dtype: object"},"exec_count":7,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"3e4066","input":"# Load the keywords and credits files\ncred_df = pd.read_csv('./data/credits.csv',low_memory=False,usecols=[0,1,2]) \nkey_df = pd.read_csv('./data/keywords.csv')\n\n#Print the head of the credit dataframe\ncred_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cast</th>\n      <th>crew</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>[{'cast_id': 14, 'character': 'Woody (voice)',...</td>\n      <td>[{'credit_id': '52fe4284c3a36847f8024f49', 'de...</td>\n      <td>862</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>[{'cast_id': 1, 'character': 'Alan Parrish', '...</td>\n      <td>[{'credit_id': '52fe44bfc3a36847f80a7cd1', 'de...</td>\n      <td>8844</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>[{'cast_id': 2, 'character': 'Max Goldman', 'c...</td>\n      <td>[{'credit_id': '52fe466a9251416c75077a89', 'de...</td>\n      <td>15602</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>[{'cast_id': 1, 'character': \"Savannah 'Vannah...</td>\n      <td>[{'credit_id': '52fe44779251416c91011acb', 'de...</td>\n      <td>31357</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>[{'cast_id': 1, 'character': 'George Banks', '...</td>\n      <td>[{'credit_id': '52fe44959251416c75039ed7', 'de...</td>\n      <td>11862</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                                                cast  \\\n0  [{'cast_id': 14, 'character': 'Woody (voice)',...   \n1  [{'cast_id': 1, 'character': 'Alan Parrish', '...   \n2  [{'cast_id': 2, 'character': 'Max Goldman', 'c...   \n3  [{'cast_id': 1, 'character': \"Savannah 'Vannah...   \n4  [{'cast_id': 1, 'character': 'George Banks', '...   \n\n                                                crew     id  \n0  [{'credit_id': '52fe4284c3a36847f8024f49', 'de...    862  \n1  [{'credit_id': '52fe44bfc3a36847f80a7cd1', 'de...   8844  \n2  [{'credit_id': '52fe466a9251416c75077a89', 'de...  15602  \n3  [{'credit_id': '52fe44779251416c91011acb', 'de...  31357  \n4  [{'credit_id': '52fe44959251416c75039ed7', 'de...  11862  "},"exec_count":8,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"49be16","input":"#Print the head of the keywords dataframe\nkey_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keywords</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>[{'id': 931, 'name': 'jealousy'}, {'id': 4290,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>[{'id': 10090, 'name': 'board game'}, {'id': 1...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15602</td>\n      <td>[{'id': 1495, 'name': 'fishing'}, {'id': 12392...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>31357</td>\n      <td>[{'id': 818, 'name': 'based on novel'}, {'id':...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11862</td>\n      <td>[{'id': 1009, 'name': 'baby'}, {'id': 1599, 'n...</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id                                           keywords\n0    862  [{'id': 931, 'name': 'jealousy'}, {'id': 4290,...\n1   8844  [{'id': 10090, 'name': 'board game'}, {'id': 1...\n2  15602  [{'id': 1495, 'name': 'fishing'}, {'id': 12392...\n3  31357  [{'id': 818, 'name': 'based on novel'}, {'id':...\n4  11862  [{'id': 1009, 'name': 'baby'}, {'id': 1599, 'n..."},"exec_count":9,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"09c496","input":"# Plot Description Based Recommender","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"5daa6d","input":"# Metadata Based Recommender","pos":8,"type":"cell"}
{"id":0,"time":1620927252571,"type":"user"}
{"last_load":1620927248989,"type":"file"}