{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"type":"settings"}
{"cell_type":"code","exec_count":2,"id":"a024f6","input":"# unfold to see Pyomo solution with a vector of decision variables\nfrom pyomo.environ import *\nimport babel.numbers as numbers  # needed to display as currency\n\n############################\n# NEW: we're defining a function that takes 1 parameter - the constraint value\n############################\ndef wyndor(c):\n    # Concrete Model - all of this is exactly the same as whatyou did before, except using the parameter in the constraint\n    model = ConcreteModel(name=\"Wyndor\")\n\n    products = ['drs', 'wdw']\n\n    bounds_dict = {'drs': (0, 4), 'wdw': (0, 6)}\n    def bounds_rule(model, product):\n        return (bounds_dict[product])\n    model.x = Var(products, domain=Reals, bounds=bounds_rule)\n\n    # Objective\n    model.profit = Objective(expr=3.0 * model.x['drs'] + 5.0 * model.x['wdw'],\n                             sense=maximize)\n\n    # Constraints\n    ######################################\n    #NEW: Here's where we use the parameter\n    ######################################\n    model.Constraint3 = Constraint(\n        expr=3.0 * model.x['drs'] + 2.0 * model.x['wdw'] <= c) \n\n    # Solve\n    solver = SolverFactory('glpk')\n    solver.solve(model)\n    return model\n\n##########################################\n# NEW: We'll loop over the 3 values we want to model and call our function for each one\n##########################################\nfor c in [18,20,22]:\n    model = wyndor(c)\n    # display solution\n    \n    print(\"Using Constraint\", c)\n    print(\"Profit = \",\n          numbers.format_currency(1000 * model.profit(), 'USD', locale='en_US'))\n    print(\"Batches of Doors = \", model.x['drs']())\n    print(\"Batches of Windows = \", model.x['wdw']())\n    print(\"-------------------------------------------------\")","output":{"0":{"name":"stdout","output_type":"stream","text":"Using Constraint 18\nProfit =  $36,000.00\nBatches of Doors =  2.0\nBatches of Windows =  6.0\n-------------------------------------------------\nUsing Constraint 20\nProfit =  $38,000.00\nBatches of Doors =  2.66666666666667\nBatches of Windows =  6.0\n-------------------------------------------------\nUsing Constraint 22\nProfit =  $40,000.00\nBatches of Doors =  3.33333333333333\nBatches of Windows =  6.0\n-------------------------------------------------\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"28bf64","input":" # Concrete Model - Not wrapped in a function\nmodel = ConcreteModel(name=\"Wyndor\")\n\nproducts = ['drs', 'wdw']\n############################################\n# NEW: This is our mutable parameter\nmodel.c = Param(default=18, mutable=True)\n############################################\nbounds_dict = {'drs': (0, 4), 'wdw': (0, 6)}\ndef bounds_rule(model, product):\n    return (bounds_dict[product])\nmodel.x = Var(products, domain=Reals, bounds=bounds_rule)\n\n# Objective\nmodel.profit = Objective(expr=3.0 * model.x['drs'] + 5.0 * model.x['wdw'],\n                         sense=maximize)\n\n# Constraints\n######################################\n#NEW: Here's where we use the parameter\n######################################\nmodel.Constraint3 = Constraint(\n    expr=3.0 * model.x['drs'] + 2.0 * model.x['wdw'] <= model.c) \n\n# Solve\nsolver = SolverFactory('glpk')\n    \n##################################\n#NEW: Loop over our constraints\n##################################\n\nfor c in [18,20,22]:\n    model.c = c\n    solver.solve(model)\n    print(\"Using Constraint\", c)\n    print(\"Profit = \",\n          numbers.format_currency(1000 * model.profit(), 'USD', locale='en_US'))\n    print(\"Batches of Doors = \", model.x['drs']())\n    print(\"Batches of Windows = \", model.x['wdw']())\n    print(\"-------------------------------------------------\")\n    ","output":{"0":{"name":"stdout","output_type":"stream","text":"Using Constraint 18\nProfit =  $36,000.00\nBatches of Doors =  2.0\nBatches of Windows =  6.0\n-------------------------------------------------\nUsing Constraint 20\nProfit =  $38,000.00\nBatches of Doors =  2.66666666666667\nBatches of Windows =  6.0\n-------------------------------------------------\nUsing Constraint 22\nProfit =  $40,000.00\nBatches of Doors =  3.33333333333333\nBatches of Windows =  6.0\n-------------------------------------------------\n"}},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"255ad3","input":"## Mutable Parameter\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"292b08","input":"# Pyomo Mutable Parameters\n\nSometimes when you are coding a model, you want to be able to run it multiple times with some slight changes. For example, you might want to vary a constraint. Lesson 4 homework has a problem that requires this. There are two ways to do that:\n\n1. Wrap the model in a function, using the bit you want to change as a parameter to the function, and re-instantiate the entire model for each value you want to test.\n2. Use a mutable parameter.\n\nMutable just means that it's a paramter value that can change, instead of being a fixed constant. Let's see a quick example of each. We'll use our old standby - the Wyndor model. We'll vary the constant in the constraint, so that instead of just using 18, we'll try the model with 18, 20, and 22.\n\n## Wrapping in a function","pos":0,"type":"cell"}
{"id":0,"time":1677102477334,"type":"user"}
{"last_load":1677102477356,"type":"file"}