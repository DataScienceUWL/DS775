{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-816c1443-b6da-4adf-ab85-6290bd5fbc00.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":true}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1661537233773,"exec_count":1,"id":"414e4d","input":"# Solution 1 with a dummy customer\n\nfrom pyomo.environ import *\nimport pandas as pd\n\n### PROBLEM DATA\n\n# Load Data\nfactories = ['factory1', 'factory2']\ncustomers = ['cust1', 'cust2', 'cust3','dummy']\nusc = [[600, 800, 700, 0], [400, 900, 600, 0]]\nsup = [400, 500]\ndem = [300, 200, 300, 100] # dummy customer gets 100 for balance\n\n# Parse into Dictionaries\nsupply = dict(zip(factories, sup))\ndemand = dict(zip(customers, dem))\nunit_ship_cost = { f:{ c:usc[i][j] for j,c in enumerate(customers)} for i,f in enumerate(factories)}\n\n### MODEL CONSTRUCTION ###\n\n# Declaration\nmodel = ConcreteModel()\n\n# Decision Variables\nmodel.transp = Var(factories, customers, domain=NonNegativeReals)\n\n# Objective\nmodel.total_cost = Objective(expr=sum(unit_ship_cost[f][c] * model.transp[f, c]\n                                      for f in factories for c in customers),\n                             sense=minimize)\n\n# Constraints\nmodel.supply_ct = ConstraintList()\nfor f in factories:\n    model.supply_ct.add(\n        sum(model.transp[f, c] for c in customers) == supply[f])\n\nmodel.demand_ct = ConstraintList()\nfor c in customers:\n    model.demand_ct.add(\n        sum(model.transp[f, c] for f in factories) == demand[c])\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\n# dataframes are displayed nicely in Jupyter\ndvars = pd.DataFrame([[model.transp[f, c]() for c in customers]\n                      for f in factories],\n                     index=factories,\n                     columns=customers)\nprint(\"Number to ship from each factory to each customer:\")\ndvars","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"Minimum Total Cost = $470,000.00\nNumber to ship from each factory to each customer:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cust1</th>\n      <th>cust2</th>\n      <th>cust3</th>\n      <th>dummy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>factory1</th>\n      <td>0.0</td>\n      <td>200.0</td>\n      <td>100.0</td>\n      <td>100.0</td>\n    </tr>\n    <tr>\n      <th>factory2</th>\n      <td>300.0</td>\n      <td>0.0</td>\n      <td>200.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          cust1  cust2  cust3  dummy\nfactory1    0.0  200.0  100.0  100.0\nfactory2  300.0    0.0  200.0    0.0"},"exec_count":1}},"pos":1,"start":1661537231302,"state":"done","type":"cell"}
{"cell_type":"code","end":1661537233887,"exec_count":2,"id":"fc4363","input":"# Solution 2 with no dummy center, adjust the supply constraint instead\n\nfrom pyomo.environ import *\nimport pandas as pd\n\n### PROBLEM DATA\n\n# Load Data\nfactories = ['factory1', 'factory2']\ncustomers = ['cust1', 'cust2', 'cust3']\nusc = [[600, 800, 700], [400, 900, 600]]\nsup = [400, 500]\ndem = [300, 200, 300]\n\n# Parse into Dictionaries\nsupply = dict(zip(factories, sup))\ndemand = dict(zip(customers, dem))\nunit_ship_cost = { f:{ c:usc[i][j] for j,c in enumerate(customers)} for i,f in enumerate(factories)}\n\n### MODEL CONSTRUCTION ###\n\n# Declaration\nmodel = ConcreteModel()\n\n# Decision Variables\nmodel.transp = Var(factories, customers, domain=NonNegativeReals)\n\n# Objective\nmodel.total_cost = Objective(expr=sum(unit_ship_cost[f][c] * model.transp[f, c]\n                                      for f in factories for c in customers),\n                             sense=minimize)\n\n# Constraints\nmodel.supply_ct = ConstraintList()\nfor f in factories:\n    model.supply_ct.add(\n        sum(model.transp[f, c] for c in customers) <= supply[f])\n\nmodel.demand_ct = ConstraintList()\nfor c in customers:\n    model.demand_ct.add(\n        sum(model.transp[f, c] for f in factories) == demand[c])\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\n# dataframes are displayed nicely in Jupyter\ndvars = pd.DataFrame([[model.transp[f, c]() for c in customers]\n                      for f in factories],\n                     index=factories,\n                     columns=customers)\nprint(\"Number to ship from each factory to each customer:\")\ndvars","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"Minimum Total Cost = $470,000.00\nNumber to ship from each factory to each customer:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cust1</th>\n      <th>cust2</th>\n      <th>cust3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>factory1</th>\n      <td>0.0</td>\n      <td>200.0</td>\n      <td>100.0</td>\n    </tr>\n    <tr>\n      <th>factory2</th>\n      <td>300.0</td>\n      <td>0.0</td>\n      <td>200.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          cust1  cust2  cust3\nfactory1    0.0  200.0  100.0\nfactory2  300.0    0.0  200.0"},"exec_count":2}},"pos":2,"scrolled":true,"start":1661537233790,"state":"done","type":"cell"}
{"cell_type":"code","end":1661537233962,"exec_count":3,"id":"e1d378","input":"# self-assessment big M method solution\n\nfrom pyomo.environ import*\n\n### PROBLEM DATA ###\n\n# load data\ncanneries = ['can1', 'can2','can3']\nwarehouses = ['ware1','ware2','ware3','ware4']\nsupply = [75, 125, 100]\ndemand = [80, 65, 70, 85]\nbigM = 10000\nunit_ship_cost = [[464, bigM, 654, 867], [bigM, 416, 690, 791],\n       [995, 682, bigM, 685] ]\n\n# parse dictionaries\nsupply_dict = dict( zip( canneries, supply) )\ndemand_dict = dict( zip( warehouses, demand))\nunit_ship_cost_dict = { c: {w: unit_ship_cost[i][j] for j,w in enumerate(warehouses) } for i,c in enumerate(canneries)}\n\n### MODEL CONSTRUCTION ###\n\n# declaration\nmodel = ConcreteModel()\n\n# decision variables\nmodel.transp = Var(canneries, warehouses, domain=NonNegativeReals)\n\n# objective\nmodel.total_cost = Objective(expr=sum(unit_ship_cost_dict[c][w] * model.transp[c, w]\n                                      for c in canneries for w in warehouses),\n                             sense=minimize)\n\n# constraints\nmodel.supply_ct = ConstraintList()\nfor c in canneries:\n    model.supply_ct.add(\n        sum(model.transp[c, w] for w in warehouses) == supply_dict[c])\n\nmodel.demand_ct = ConstraintList()\nfor w in warehouses:\n    model.demand_ct.add(\n        sum(model.transp[c, w] for c in canneries) == demand_dict[w])\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\n# put amounts in dataframe for nicer display\nimport pandas as pd\ndvars = pd.DataFrame([[model.transp[c, w]() for w in warehouses]\n                      for c in canneries],\n                     index=canneries,\n                     columns=warehouses)\nprint(\"Number of truckloads to ship from each cannery to each warehouse:\")\ndvars","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"Minimum Total Cost = $176,000.00\nNumber of truckloads to ship from each cannery to each warehouse:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ware1</th>\n      <th>ware2</th>\n      <th>ware3</th>\n      <th>ware4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>can1</th>\n      <td>75.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>can2</th>\n      <td>0.0</td>\n      <td>55.0</td>\n      <td>70.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>can3</th>\n      <td>5.0</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>85.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      ware1  ware2  ware3  ware4\ncan1   75.0    0.0    0.0    0.0\ncan2    0.0   55.0   70.0    0.0\ncan3    5.0   10.0    0.0   85.0"},"exec_count":3}},"pos":4,"scrolled":true,"start":1661537233896,"state":"done","type":"cell"}
{"cell_type":"code","end":1661537234037,"exec_count":4,"id":"c3830d","input":"from pyomo.environ import*\nimport pandas as pd\n\n### PROBLEM DATA ###\n\n# load data\nmachines = ['mac1', 'mac2', 'mac3']\nsupply = [1 for m in machines] # gives [1,1,1]\nlocations = ['loc1', 'loc2', 'loc3', 'loc4']\ndemand = [1 for l in locations] # gives [1,1,1,1]\nbigM = 1000\ncost = [[13,16,12,11],[15,bigM,13,20],[5,7,10,6]]\n\n# parse into dictionaries\nsupply_dict = dict( zip( machines, supply) )\ndemand_dict = dict( zip( locations, demand))\ncost_dict = {m: {l: cost[i][j] for j,l in enumerate(locations)} for i,m in enumerate(machines)}\n\n### MODEL CONSTRUCTION ###\n\n# declaration\nmodel = ConcreteModel()\n\n# decision variables\nmodel.assign = Var(machines, locations, domain=NonNegativeReals)\n\n# objective\nmodel.total_cost = Objective(expr=sum(cost_dict[m][l] * model.assign[m, l]\n                                      for m in machines for l in locations),\n                             sense=minimize)\n\n# constraints\nmodel.supply_ct = ConstraintList()\nfor m in machines:\n    model.supply_ct.add(\n        sum(model.assign[m, l] for l in locations) == supply_dict[m])\n\nmodel.demand_ct = ConstraintList()\nfor l in locations:\n    model.demand_ct.add(\n        sum(model.assign[m, l\n                        ] for m in machines) <= demand_dict[l])  # note we are using <= for larger set\n\n### SOLUTION ###\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n### OUTPUT ###\nprint(f\"Minimum Cost per hour = ${model.total_cost():,.2f}\")\n\n# put amounts in dataframe for nicer display\ndvars = pd.DataFrame([[model.assign[m, l]() for l in locations]\n                      for m in machines],\n                     index = machines,\n                     columns=locations)\nprint(\"Machine assignments to locations:\")\ndvars","kernel":"python3","metadata":{"hidden":true},"no_halt":true,"output":{"0":{"name":"stdout","text":"Minimum Cost per hour = $29.00\nMachine assignments to locations:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>loc1</th>\n      <th>loc2</th>\n      <th>loc3</th>\n      <th>loc4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mac1</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>mac2</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>mac3</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      loc1  loc2  loc3  loc4\nmac1   0.0   0.0   0.0   1.0\nmac2   0.0   0.0   1.0   0.0\nmac3   1.0   0.0   0.0   0.0"},"exec_count":4}},"pos":6,"start":1661537233972,"state":"done","type":"cell"}
{"cell_type":"code","id":"e9a4d6","input":"","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"69f9fc","input":"# Self-Assessment Solutions for Lesson 3\n\n## *Self-Assessment: Unbalanced Transportation Problem*","metadata":{"heading_collapsed":true},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"754b86","input":"### *Self-Assessment: Unbalanced assignment problem without dummies*\n\nSolve the prototypical assignment problem above without introducing any dummy machines or locations.  You'll need to slightly adjust one or more constraints.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"fcb14a","input":"### *Self-Assessment: Big M Method*\n\nConsider the example above where three of the routes are rendered infeasible as shown in the table below:\n\n<img src=\"images/prototype_infeasible_table.png\" width=\"600\">\n\nStart with the code above that is labeled \"basic transportation code\".  Set the costs along the infeasible routes to be $M = 10000$ and solve the linear program.  Does your solution have zero amounts along the infeasible routes?  The minimum cost should now be higher than before.  Why does that make sense?","pos":3,"type":"cell"}
{"id":0,"time":1661537215504,"type":"user"}
{"last_load":1661537215509,"type":"file"}