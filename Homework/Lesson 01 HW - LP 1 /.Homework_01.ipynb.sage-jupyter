{"kernelspec":{"display_name":"Python 3 (system-wide)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"270.66px"},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}}
{"cell_type":"code","execution_count":1,"metadata":{"code_folding":[0],"trusted":true},"outputs":[],"source":"# execute to import notebook styling for tables and width etc.\nfrom IPython.core.display import HTML"}
{"cell_type":"markdown","metadata":{},"source":"<font size=18>Lesson 01 Homework</font>\n\n### When asking questions about homework in Piazza please use a tag in the subject line like HW1.3 to refer to Homework 1, Question 3.  So the subject line might be **HW1.3 question**."}
{"cell_type":"markdown","metadata":{},"source":"## Question 1 <font color=\"magenta\">(2 points, auto)</font>\n\nA solution for which all constraints are satisfied is\n\n* **a feasible solution**\n\n* an objective function\n\n* standard form\n\n* sensitivity analysis\n\n* the certainty assumption\n\nSolution text:  This is the definitiion of a feasible solution."}
{"cell_type":"markdown","metadata":{},"source":"## Question 2 <font color=\"magenta\">(2 points, auto)</font>\n\nWhich of the following is NOT an assumption of linear programming?\n\n* Proportionality assumption\n\n* **Independence assumption**\n\n* Additivity assumption\n\n* Divisibility assumption\n\n* Certainty assumption\n\nSolution text:  Independence is something we discuss in probability (independent events) or in data collection (independent measurements), but doesn't apply to linear programming."}
{"cell_type":"markdown","metadata":{},"source":"## Question 3 <font color=\"magenta\">(2 points, auto)</font>\n\nA feasible solution that has the most favorable value of the objective function is called\n\na. the proportionality assumption\n\nb. a functional constraint\n\nc. the feasible region\n\nd. **an optimal solution**\n\ne. sensitivity analysis\n\nSolution text:  This is the definition of an optimal solution!"}
{"cell_type":"markdown","metadata":{},"source":"## Question 4 <font color=\"magenta\">(2 points, auto)</font>\n\nMinimize $Z = 3x_1 + 0.3x_2,$\n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n5 x_1 & + &  3 x_2 & \\geq & 9 \\\\\n12 x_1 & * & x_2 & \\geq & 15\n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0,$\n\n$5 \\leq b_2 \\leq 10.$\n\nSelect all of the linear programming assumptions that are **not** met here:\n\n* Proportionality assumption\n\n* **Additivity assumption**\n\n* Divisibility assumption\n\n* **Certainty assumption**\n\nSolution text: **Additivity** is violated by the term $x_1 x_2$ in constraint 3 and the **certainty** assumption is violated because the exact value of $b_2$ is not known."}
{"cell_type":"markdown","metadata":{},"source":"## Question 5 <font color=\"magenta\">(2 points, auto)</font>\n\nMaximize $Z = (x_1 + 2x_2)^2,$\n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n &  &  k x_2 & \\leq & 70 \\\\\n x_1 & + &  & \\leq & 80 \\\\\n x_1 & + & x_2 & \\leq & 100\n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0$\n\n$k \\geq 0$\n\n\nSelect all of the linear programming assumptions that are **not** met here:\n\n* **Proportionality assumption**\n\n* **Additivity assumption**\n\n* Divisibility assumption\n\n* **Certainty assumption**\n\nHint:  it may be easier to think about if you multiply out the terms in the objective function.\n\nSolution text: The $(x_1 + 2x_2)^2$ in the objective function violates both the **proportionality** and **additivity** assumptions and the unknown $k$ in the first constraint violates the **certainty** assumption."}
{"cell_type":"markdown","metadata":{},"source":"## Question 6 <font color=\"magenta\">(2 points, auto)</font>\n\nMaximize $Z = 25 x + 30 y - 10$\n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n0.02 x & + & 0.01 y & \\leq & 1 \\\\\n0.5 x & + & 0.5 y & \\leq & 4 \\\\\n0.01 x & + & 0.02 y & \\leq & 1.5\n\\end{array}\n$\n\n$x = 1,2,3, \\ldots $\n\n$y \\geq 0$ \n\nSelect all of the linear programming assumptions that are **not** met here:\n\n* **Proportionality assumption**\n\n* Additivity assumption\n\n* Divisibility assumption\n\n* **Certainty assumption**\n\n**Solution text:** The $-10$ in the objective function violates the **proportionality** assumption and the **divisibility** assumption is violated because $x$ can only take on positive integers.\n"}
{"cell_type":"markdown","metadata":{},"source":"## Question 7 <font color=\"magenta\">(2 points, manual)</font>\n\nWeenies and Buns is a food processing plant which manufactures hot dogs and hot dog buns. They grind their own flour for the hot dog buns at a maximum rate of 200 pounds per week. Each hot dog bun requires 0.1 pound of flour. They currently have a contract with Pigland, Inc., which specifies that a delivery of 800 pounds of pork product is delivered every Monday. Each hot dog requires 0.25 pound of pork product. All the other ingredients in the hot dogs and hot dog buns are in plentiful supply. Finally, the labor force at Weenies and Buns consists of 5 employees working full time (40 hours per week each). Each hot dog requires 3 minutes of labor, and each hot dog bun requires 2 minutes of labor. Each hot dog yields a profit of \\$0.88, and each bun yields a profit of \\$0.33. Weenies and Buns would like to know how many hot dogs and how many hot dog buns they should produce each week so as to achieve the highest possible profit.\n\nFormulate a complete linear program to answer this question including the objective function and all constraints.  You can type out your answer (you can even use LaTeX in Canvas) or include a nicely cropped picture of your model in the Rich Text Editor in Canvas.\n\n\n**Solution text**:\n\nMaximize $P = 0.88 H + 0.33 B$\n\nsubject to \n\n$\n\\begin{array}{rcrcr}\n & & 0.1 B & \\leq & 200 \\\\\n0.25 H & &  & \\leq & 800 \\\\\n 3 H & + & 2B & \\leq & 12000\n\\end{array}\n$\n\n$H,B \\geq 0$"}
{"cell_type":"markdown","metadata":{},"source":"## Question 8 <font color=\"magenta\">(2 points, manual)</font>\n\nSolve the linear program using Desmos.  In the text cell below type out the coordinates and value of the optimal solution and include a picture of your graphical solution (can be inserted with the rich text editor).\n\n**Hint:**  Set the slider for the objective function to go from 0 to 4000 with step 73.\n\n**Solution text:**\n\nOptimal solution $(B^*,H^*) = (3200,1200)$ and $P^* = 3212$.\n\n\n<img src=\"images/solution_11.png\" width=\"800\">"}
{"cell_type":"markdown","metadata":{},"source":"## Question 9 <font color=\"magenta\">(2 point, auto)</font>\n\n<img src=\"images/screen-problem4.png\" alt=\"Problem\" width=\"440\">\n\nFor the objective function $Z = a x + y$ to have a maximum at (3,3) we need $a > -1/3$.  We also need $a$ to be smaller than what number?\n\n**Answer**: 0 +/- 0.01\n\n**Hint**:  if $a$ is allowed to get too large then the max occurs at (6,3).\n\n**Solution text:**  The value of $Z$ at (3,3) is 3a + 3 and this must be larger than the value of $Z$ at (0,2) with is 2.  Solving $3a + 3 > 2$ we get $a > -1/3.$  Similarly the value of $Z$ at (6,3) is $6 a + 3$ and we need $3a + 3 > 6 a + 3$ which solves to $a < 0$ so $b = 0$."}
{"cell_type":"markdown","metadata":{},"source":"## Question 10 <font color=\"magenta\">(2 points, auto)</font>\n\n<img src=\"images/screen-problem4.png\" alt=\"Problem\" width=\"440\">\n\nFor the objective function $Z = a x + y$ to have infinitely many maxima on the edge between (0,2) and (3,3) what is the value of $a$ (to three decimal places)?\n\n**Answer**: $a$ should be -1/3 so lets accept answers between -.334 and -.332\n\n**Hint**:  If there are infinitely many maxima along that edge then what is the relationship between the values of $Z$ at the two endpoints?\n\n**Solution**:  The values at the endpoints must be the same.  Plugging in (0,2) we get $Z = 0 a + 2 = 2$.  Plugging in (3,3) we get $Z = 3 a + 3.$  Setting these equal gives $3a+3 = 2.$  Finally, solving for $a$ gives $a = -1/3.$"}
{"cell_type":"markdown","metadata":{},"source":"## Question 11 <font color=\"magenta\">(2 points, auto)</font>\n\n<img src=\"images/screen-problem4.png\" alt=\"Problem\" width=\"440\">\n\nFor the objective function $Z = a x + y$ to have a unique maximum at (0,0) we require:\n\n* $a > 0, b > 0$\n* $a > 0, b < 0$\n* $a < 0, b > 0$\n* $a < 0, b < 0$ (THIS IS CORRECT)\n\n**Solution**:  The value at (0,0) has to be larger than the value at (0,2) and at (6,0).  Plugging these points into $Z$ gives two inequalities that show $a < 0$ and $b <0$."}
{"cell_type":"markdown","metadata":{},"source":"## Question 12 <font color=\"magenta\">(3 points, manual)</font>\n\nSuppose that the following constraints have been provided for a linear\nprogramming model.\n\n$\n\\begin{array}{rcrcr}\n-x_1 & + &  3 x_2 & \\leq & 30 \\\\\n-3 x_1 & + &   x_2 & \\leq & 30 \n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0.$\n\nIf the objective is to maximize $Z =-x_1+x_2,$ does the model\n  have an optimal solution? If so, find it. If not, explain why not.\n\n**Make this an essay question**\n\n**Solution:**:  Yes.  Optimal solution: $(x_1^*,x_2^*) = (0,10)$ and $Z^*=10$."}
{"cell_type":"markdown","metadata":{},"source":"## Question 13 <font color=\"magenta\">(3 points, manual)</font>\n\nSuppose that the following constraints have been provided for a linear\nprogramming model.\n\n$\n\\begin{array}{rcrcr}\n-x_1 & + &  3 x_2 & \\leq & 30 \\\\\n-3 x_1 & + &   x_2 & \\leq & 30 \n\\end{array}\n$\n\nand $x_1 \\geq 0, x_2 \\geq 0.$\n\nIf the objective is to maximize $Z =x_1-x_2,$ does the model\n  have an optimal solution? If so, find it. If not, explain why not.\n\n**Make this an essay question**\n\n**Solution:**:  No.  The objective function value rises as the objective line is\n  slid to the right and since this can be done forever, there is no\n    optimal solution.\n\n<img src=\"images/screen-solution7c.png\" width=\"240\">"}
{"cell_type":"markdown","metadata":{},"source":"## Question 14 <font color=\"magenta\">(4 points, manual)</font>\n\nEd Butler is the production manager for the Bilco Corporation, which\nproduces three types of spare parts for automobiles. The manufacture\nof each part requires processing on each of two machines, with the\nfollowing processing times (in hours): \n\n<img src=\"images/screen-problem6a.png\" width=\"440\">\n\nEach machine is available 40 hours per month. Each part manufactured\nwill yield a unit profit as follows:\n\n<img src=\"images/screen-problem6b.png\" width=\"440\">\n\nEd wants to determine the mix of spare parts to produce in order to\nmaximize total profit.\n\nFormulate a complete linear program to answer this question including the objective function and all constraints.  You can type out your answer (you can even use LaTeX in Canvas) or include a nicely cropped picture of your model in the Rich Text Editor in Canvas.  \n\n**Hint:**  there should three decision variables not six."}
{"cell_type":"markdown","metadata":{},"source":"## Question 15 <font color=\"magenta\">(4 points, manual)</font>\n\nInclude complete python / Pyomo code to solve this problem.  Include all necessary code and imports so that if the cell were executed it would display a nicely formatted optimal solution.  Use real decision variables so that fractional parts are allowed.\n\nNote: for all code submissions, to get full credit the code must be available in CoCalc, run without error, and include output on CoCalc (no unexecuted code).  Code that doesn't run or if output isn't included then your solution will earn at most half credit."}
{"cell_type":"code","execution_count":2,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Total Profit = $61,818.18\nNumber of parts for A: 363.64\nNumber of parts for B: 1090.91\nNumber of parts for C: 0.00\n"}],"source":"# solution\n\nfrom pyomo.environ import *\n\n# Concrete Model\nmodel = ConcreteModel(name=\"Bilco\")\n\n# Decision Variables\nmodel.x = Var(['A', 'B', 'C'], domain=NonNegativeReals)\n\n# Objective\nmodel.obj = Objective(expr=50 * model.x['A'] + 40 * model.x['B'] +\n                      30 * model.x['C'],\n                      sense=maximize)\n\n# Constraints\nmodel.Constraint1 = Constraint(\n    expr=0.02 * model.x['A'] + 0.03 * model.x['B'] + 0.05 * model.x['C'] <= 40)\nmodel.Constraint2 = Constraint(\n    expr=0.05 * model.x['A'] + 0.02 * model.x['B'] + 0.04 * model.x['C'] <= 40)\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f\"Total Profit = ${model.obj():,.2f}\")\nprint(f\"Number of parts for A: {model.x['A']():.2f}\")\nprint(f\"Number of parts for B: {model.x['B']():.2f}\")\nprint(f\"Number of parts for C: {model.x['C']():.2f}\")"}
{"cell_type":"markdown","metadata":{},"source":"## Question 16 <font color=\"magenta\">(1 points, auto)</font>\n\nWhat is the maximum profit in dollars?  Your answer should be accurate to two decimal places.\n\n**Solution:**  61818.18 +/- 0.005 "}
{"cell_type":"markdown","metadata":{},"source":"## Question 17 <font color=\"magenta\">(1 points, auto)</font>\n\nHow many of part B should be produced?  Round your answer to the nearest integer value.\n\n**Solution:**  1091"}
{"cell_type":"markdown","metadata":{},"source":"## Question 18 <font color=\"magenta\"> (10 points, manual)</font>\n\nOxbridge University maintains a powerful mainframe computer\n  for research use by its faculty, Ph.D. students, and research\n  associates. During all working hours, an operator must be available\n  to operate and maintain the computer, as well as to perform some\n  programming services. Beryl Ingram, the director of the computer\n  facility, oversees the operation.  \n\n  It is now the beginning of the\n  fall semester, and Beryl is confronted with the problem of assigning\n  different working hours to her operators. Because all the operators\n  are currently enrolled in the university, they are available to work\n  only a limited number of hours\n  each day, as shown in the following table: \n  \n  <img src=\"images/operator_availability.png\" width=\"800\">\n  \n  There are six operators (four undergraduate students and two\n  graduate students). They all have different wage rates because of\n  differences in their experience with computers and in their pro-\n  gramming ability. The above table shows their wage rates, along with\n  the maximum number of hours that each can work each day.  \n\n  Each\n  operator is guaranteed a certain minimum number of hours per week\n  that will maintain an adequate knowledge of the operation. This\n  level is set arbitrarily at 8 hours per week for the undergraduate\n  students (K. C., D. H., H. B., and S. C.) and 7 hours per week for\n  the graduate students (K. S. and N. K.).\n\n  The computer facility is to be open for operation from 8 A.M. to 10\n  P.M. Monday through Friday with exactly one operator on duty during\n  these hours. On Saturdays and Sundays, the computer is to be\n  operated by other staff.  Because of a tight budget, Beryl has to\n  minimize cost. She wishes to determine the number of hours she\n  should assign to each operator on each day.\n\n  Because of a tight budget, Beryl has to minimize cost. She wishes to\n  determine the number of hours she should assign to each operator on\n  each day.\n  \n  Use Pyomo to solve this problem. Your solution should include all necessary code and inputs and it should produce formatted output. Note: be sure to use real variables but your answers will work out to be integers."}
{"cell_type":"code","execution_count":3,"metadata":{"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Total Cost = $1,812.00\nKCmon: 6 hours\nKCwed: 6 hours\nKCfri: 6 hours\nDHtue: 5 hours\nDHth: 5 hours\nHBmon: 4 hours\nHBtue: 8 hours\nHBwed: 4 hours\nHBfri: 4 hours\nSCmon: 1 hours\nSCtue: 1 hours\nSCwed: 3 hours\nSCfri: 3 hours\nKSmon: 3 hours\nKSwed: 1 hours\nKSth: 3 hours\nNKth: 6 hours\nNKfri: 1 hours\n"}],"source":"# Pyomo solution for HW1.4(Problem 3.4-15)\n\nfrom pyomo.environ import *\n\nmodel = ConcreteModel(name = \"Operators\")\n\n# Decision Variables\nworker_days = ['KCmon','KCwed','KCfri','DHtue','DHth','HBmon','HBtue',\n               'HBwed','HBfri','SCmon','SCtue','SCwed','SCfri', 'KSmon',\n               'KSwed','KSth','NKth','NKfri']\n\nmodel.x = Var( worker_days, domain = NonNegativeReals)\n\n# Objective \nmodel.obj = Objective( expr = 25 * (model.x['KCmon'] + model.x['KCwed'] + model.x['KCfri']) +\n                      26 * (model.x['DHtue'] + model.x['DHth']) + \n                      24 * (model.x['HBmon'] + model.x['HBtue'] + model.x['HBwed'] + model.x['HBfri']) +\n                      27 * (model.x['SCmon'] + model.x['SCtue'] + model.x['SCwed'] + model.x['SCfri']) +\n                      28 * (model.x['KSmon'] + model.x['KSwed'] + model.x['KSth']) +\n                      30 * (model.x['NKth'] + model.x['NKfri']), sense = minimize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = model.x['KCmon'] <= 6 )\nmodel.Constraint2 = Constraint( expr = model.x['KCwed'] <= 6 )\nmodel.Constraint3 = Constraint( expr = model.x['KCfri'] <= 6 )\nmodel.Constraint4 = Constraint( expr = model.x['DHtue'] <= 6 )\nmodel.Constraint5 = Constraint( expr = model.x['DHth'] <= 5 )\nmodel.Constraint6 = Constraint( expr = model.x['HBmon'] <= 4 )\nmodel.Constraint7 = Constraint( expr = model.x['HBtue'] <= 8 )\nmodel.Constraint8 = Constraint( expr = model.x['HBwed'] <= 4 )\nmodel.Constraint9 = Constraint( expr = model.x['HBfri'] <= 4 )\nmodel.Constraint10 = Constraint( expr = model.x['SCmon'] <= 5 )\nmodel.Constraint11 = Constraint( expr = model.x['SCtue'] <= 5 )\nmodel.Constraint12 = Constraint( expr = model.x['SCwed'] <= 5 )\nmodel.Constraint13 = Constraint( expr = model.x['SCfri'] <= 5 )\nmodel.Constraint14 = Constraint( expr = model.x['KSmon'] <= 3 )\nmodel.Constraint15 = Constraint( expr = model.x['KSwed'] <= 3 )\nmodel.Constraint16 = Constraint( expr = model.x['KSth'] <= 8 )\nmodel.Constraint17 = Constraint( expr = model.x['NKth'] <= 6 )\nmodel.Constraint18 = Constraint( expr = model.x['NKfri'] <= 2 )\nmodel.Constraint19 = Constraint( expr = model.x['KCmon'] + model.x['KCwed'] +\n                                model.x['KCfri'] >= 8 )\nmodel.Constraint20 = Constraint( expr = model.x['DHtue'] + model.x['DHth'] >= 8 ) \nmodel.Constraint21 = Constraint( expr = model.x['HBmon'] + model.x['HBtue'] + \n                                model.x['HBwed'] + model.x['HBfri'] >= 8 )\nmodel.Constraint22 = Constraint( expr = model.x['SCmon'] + model.x['SCtue'] + \n                                model.x['SCwed'] + model.x['SCfri'] >= 8 )\nmodel.Constraint23 = Constraint( expr = model.x['KSmon'] + model.x['KSwed'] + \n                                model.x['KSth'] >= 7 )\nmodel.Constraint24 = Constraint( expr = model.x['NKth'] + model.x['NKfri'] >= 7 )\nmodel.Constraint25 = Constraint( expr = model.x['KCmon'] + model.x['HBmon'] +\n                                model.x['SCmon'] + model.x['KSmon'] == 14 )\nmodel.Constraint26 = Constraint( expr = model.x['DHtue'] + model.x['HBtue'] + \n                                model.x['SCtue']  == 14 ) \nmodel.Constraint27 = Constraint( expr = model.x['KCwed'] + model.x['HBwed'] + \n                                model.x['SCwed'] + model.x['KSwed'] == 14 )\nmodel.Constraint28 = Constraint( expr = model.x['DHth'] + model.x['KSth'] + \n                                model.x['NKth'] == 14 )\nmodel.Constraint29 = Constraint( expr = model.x['KCfri'] + model.x['HBfri'] + \n                                model.x['SCfri'] + model.x['NKfri'] == 14 )\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f'Total Cost = ${model.obj():,.2f}')\nfor wd in worker_days:    \n    print(f'{wd:s}: {model.x[wd]():.0f} hours')"}
{"cell_type":"markdown","metadata":{},"source":"## Question 19 <font color=\"magenta\"> (1 points, auto)</font>\nWhat is the minimum total cost of labor?  Enter your answer as an integer.\n\n**Answer:** 1812\n\n## Question 20 <font color=\"magenta\"> (1 points, auto)</font>\nTo achieve the minimum total cost how many hours should DH be assigned on Tuesday?\n\n**Answer:** 5"}
{"cell_type":"code","execution_count":0,"metadata":{"trusted":true},"outputs":[],"source":""}