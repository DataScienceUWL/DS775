{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-4f97a334-cd75-4be0-922e-b7f9db7cd51f.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"09a534","input":"","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1cdbab","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"20744f","input":"","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"303e6c","input":"","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"354de5","input":"","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"410037","input":"","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"740da6","input":"\n","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8233d8","input":"","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"019104","input":"# generate random weights and values for a knapsack problem\n# DO NOT CHANGE ANYTHING in this cell\nimport numpy as np\nnum_items = 20\nnp.random.seed(seed=123) \nvalues = np.random.randint(low=5, high=50, size=num_items)\nweights = np.random.randint(low=1, high=10, size=num_items)\nmax_weight = 50\n\nnp.random.seed(seed=125)\nsample_x = np.random.choice([False,True], size=num_items)\nnp.random.seed() # use system clock to reset the seed so future random numbers will appear random","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"b35648","input":"# imports, add to this as needed\n\n# change to matplotlib notebook for classic view\nimport GAUtilities as ga\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nfrom scipy.optimize import minimize\nimport json\nfrom simanneal import Annealer","metadata":{"code_folding":[]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"2bc41b","input":"","output":{"0":{"data":{"text/plain":"array([0, 0, 0, 0, 0, 0])"},"exec_count":2,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"e58593","input":"with open(\"data/Caps48.json\", \"r\") as tsp_data:\n    tsp = json.load(tsp_data)\ndistance_matrix = tsp[\"DistanceMatrix\"]\noptimal_tour = tsp[\"OptTour\"]\nopt_dist = tsp[\"OptDistance\"]/1000 # converted to kilometers\nxy = np.array(tsp[\"Coordinates\"])\n\ndef plot_tour(best_tour, xy_meters, best_dist, height, width):\n\n    meters_to_pxl = 0.0004374627441064968\n    intercept_x = 2.464\n    intercept_y = 1342.546\n    xy_pixels = np.zeros(xy_meters.shape)\n    xy_pixels[:,0] = meters_to_pxl * xy_meters[:,0] + intercept_x\n    xy_pixels[:,1] = -meters_to_pxl * xy_meters[:,1] + intercept_y\n\n    fig, ax = plt.subplots(1, 1, figsize=(height, width))\n    im = plt.imread('images/caps48.png')\n    implot = ax.imshow(im)\n    plt.setp(ax.get_xticklabels(), visible=False)\n    plt.setp(ax.get_yticklabels(), visible=False)\n    ax.tick_params(axis='both', which='both', length=0)\n\n    loop_tour = np.append(best_tour, best_tour[0])\n    ax.plot(xy_pixels[loop_tour, 0],\n            xy_pixels[loop_tour, 1],\n            c='b',\n            linewidth=1,\n            linestyle='-')\n    plt.title('Best Distance {:d} km'.format(int(best_dist)))\n\n# this is an example of how to plot a tour\nplot_tour(optimal_tour, xy, opt_dist, 9, 6)","output":{"0":{"data":{"image/png":"b326eb90e8dbb6f450a25c388e30359842c8e347","text/plain":"<Figure size 648x432 with 1 Axes>"},"exec_count":2,"metadata":{"image/png":{"height":352,"width":516}},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"294ef0","input":"# rastrigin definition\ndef obj_rastrigin(x):\n    global func_count\n    func_count += 1\n    x = np.array(x) # force a numpy arrray here so that the math below works\n    # pass a single vector of length n (=dim) to evaluate Rastrigin\n    return sum(x**2 + 10 - 10 * np.cos(2 * np.pi * x))","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"0eaad8","input":"```python\n### DO NOT CHANGE ANYTHING in this block of code\n\nimport numpy as np\npop_size = 200 # should be even due to the way we'll implement crossover\nind_size = 20 # determines number of input variables for Rastrigin and each individual\ntourn_size = 3 # tournament size for selection\ncx_prob = 0.8 # probability a pair of parents crossover to produce two children\nmut_prob = 0.2 # probability an individual mutates\nind_prob = 0.1 # probability each variable in an individual mutates\nnum_iter = 100 # number of genetic algorithm mutations\nupdate_iter = 10 # how often to display output\n\nnp.random.seed(seed=123)\nnum_items = 20\nvalues = np.random.randint(low=5, high=50, size=num_items)\nweights = np.random.randint(low=1, high=10, size=num_items)\nmax_weight = 50\nnp.random.seed() # use system clock to reset the seed so future random numbers will appear random\n###\n\n################\n#Your code Starts here\n################\n```\n\n### Solution:","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"1030b1","input":"## Question 18 (Manually Graded) <font color=\"magenta\">(4 points)</font>\n\nBriefly discuss what you did in terms of tuning the hyperparameters for the 10-dimensional Rastrigin function. Explain why you made the choices you did and what the relationship of the hyperparameters are to exploration and exploitation.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"19ff04","input":"## Question 16 (Manually Graded) <font color=\"magenta\">(6 points)</font>\n\nGiven the following set up, run the genetic algorithm **without elitism** to solve the knapsack problem.\n\nUse the following:\n* One Point Crossover for mating\n* Bit flipping for mutation\n\n## Provided Code","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"229b95","input":"# Boundary Mutation\nIn the lesson we described several mutation algorithms that are used with real or integer variables and include bounds. Here's an example of the code for one of them, the uniform integer mutation. Study this code to understand how mutation is happening.\n\n```python\ndef uniformIntMutation(pop, mut_prob, ind_prob, bounds, debug=False):\n    mut_pop = pop.copy()\n    pop_size, ind_size = pop.shape[0], pop.shape[1]\n    for j in range(pop_size):\n        if np.random.uniform()<mut_prob:\n            new_assign = mut_pop[j].copy()\n            for i in range(ind_size):\n                if np.random.uniform() < ind_prob:\n                    if debug:\n                        print('Gene', i, 'in Individual', j, 'mutated.')\n                    while new_assign[i] == mut_pop[j][i]: # loops until new and old are different\n                        new_assign[i] = np.random.randint(bounds[0], bounds[1])                     \n            mut_pop[j] = new_assign\n    return mut_pop.astype(int)\n```\n\nAnother simple mutation algorithm is the **Boundary mutation**. In the boundary mutation, if both the mut_prob and ind_prob is met, the gene is replaced with either the upper or lower bound, chosen randomly. There are several coding approaches you could take to randomly select between lower and upper. We'd like you to use **numpy's random choice function**. \n\nUse the starter code we've provided to finish this function. Make sure to loop until the new and old are different.\n\n### **Question 4** <font color=\"magenta\">(2 points)</font>\nHow many genes mutated?\n\n### **Question 5** <font color=\"magenta\">(2 points)</font>\nHow many individuals mutated?\n\n### **Question 6** <font color=\"magenta\">(2 points)</font>\nThe objective function for this problem is to minimize the sum of the genes in each individual.\n    \nHow many mutations resulted in an improvement in the gene?","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"2922e8","input":"### Provided Code","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"2b9840","input":"# HW7 - Genetic Algorithms\n\n### When asking questions about homework in Piazza please use a tag in the subject line like HW1.3 to refer to Homework 1, Question 3.  So the subject line might be **HW1.3 question**.  Note there are no spaces in \"HW1.3\".  This really helps keep Piazza easily searchable for everyone!\n\nFor full credit, all code in this notebook must be both executed in this notebook and copied to the Canvas quiz where indicated.\n\n## Best Individuals Selection\n\nIn the lesson, we showed you tournament selection. Our code for the tournament selection is shown below. \n\n```python\ndef tournamentSelection(pop, tourn_size, debug=False):\n    #get the population size\n    pop_size, ind_size = pop.shape[0], pop.shape[1]\n\n    # initialize selected population\n    select_pop = np.zeros((pop_size,ind_size)) \n    for j in range(pop_size):\n        subset_pos = np.random.choice(pop_size,tourn_size,replace=False) # select without replacement\n        smallest_pos = np.min(subset_pos) # choose index corresponding to lowest fitness\n        if debug:\n            print('Individuals in tournament:', subset_pos)\n            print('Individual selected:', smallest_pos)\n        select_pop[j] = pop[smallest_pos]\n    return select_pop     \n```\n\nAnother method of selection is called \"**Best Individuals Selection**.\" In Best Individuals Selection, k number of the best individuals are randomly selected to fill out the population. For instance, if k were 3, your new population would be a random selection of individuals 1, 2, and 3 (0, 1, and 2 in Python).\n\nWrite a function below that performs Best Individuals Selection. Your function should take in parameters for the population and k, and should return a population that is the same size as the passed in population. \n\n**You should use numpy's random integer generator (not random choice) to make the selection for each slot.**\n\nWe've provided some starter code. Be sure to execute your function with our provided population, and print out the resulting selected individuals.\n\n### **Question 1** <font color=\"magenta\">(2 points)</font>\n    \nWhich integer makes up the first (index 0) individual after selection? Use $k=3.$","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"342386","input":"## Question 15 <font color=\"magenta\">(2 points)</font>\nGiven the sample_x, values and weights above what is the current fitness of the knapsack, using your **altered** objective function that includes the penalized objective?  Hint:  your answer should be positive.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"428755","input":"## **Question 10: TSP Option 2** (Manually Graded) <font color=\"magenta\">(4 points)</font>\n\nRerun the Traveling salesperson problem. This time:\n\n* Implement elitism.\n* Use the parameters below.\n\n## Provided Code","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"525720","input":"## Provided Code","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"6c1c6a","input":"```python\nnp.random.seed(53)\ndef boundaryMutation(pop, mut_prob, ind_prob, bounds, debug=False):\n    mut_pop = pop.copy()\n    pop_size, ind_size = pop.shape[0], pop.shape[1]\n    for j in range(pop_size):\n        if np.random.uniform()<mut_prob:\n            new_assign = mut_pop[j].copy()\n            for i in range(ind_size):\n                if np.random.uniform() < ind_prob:\n                    if debug:\n                        print('Gene', i, 'in Individual', j, 'mutated.')                \n                    while new_assign[i] == mut_pop[j][i]: # loops until new and old are different\n                        ###########################################\n                        #modify this line\n                        new_assign[i] =   \n                        ##########################################\n            mut_pop[j] = new_assign\n    return mut_pop.astype(int)\n\n#generate the initial population\ninitPop = np.array(\n    [[1,1,1,1,1,1,1],\n    [2,2,2,2,2,2,2],\n    [3,3,3,3,3,3,3],\n    [4,4,4,4,4,4,4],\n    [5,5,5,5,5,5,5],\n    [6,6,6,6,6,6,6]]\n                  ).astype(int) \n\nmut_prob=.4\nind_prob=.2\nbounds = [1,6]\nboundaryMutation(initPop, mut_prob, ind_prob, bounds, debug=True).astype(int)\n```\n\n### Solution:","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"6d56ae","input":"## **Question 8** <font color=\"magenta\">(2 points)</font>\n\nWhat was the shortest tour you found? Enter the number in kilometers.\n\n## **Question 9** <font color=\"magenta\">(2 points)</font>\nWhich city did the tour end in?\n\n* 31\n* 42\n* 3\n* 46\n* 29","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"76770f","input":"```python\nnp.random.seed(54)\ntourn_size = 3 #number of individuals to use in each tournament\npop_size = 1000 # should be even due to the way we'll implement crossover\nind_size = 48 # determines number of input variables for Rastrigin and each individual\ncx_prob = 0.8 # probability a pair of parents crossover to produce two children\nmut_prob = .2 #probability an individual mutates\nind_prob = .1 #probability each variable in an individual mutates\nnum_iter = 300 # number of genetic algorithm mutations\nupdate_iter = 100 # how often to display output\n\ndef obj_tour_distance(individual, dist_mat):\n    distance = dist_mat[individual[-1]][individual[0]]\n    for gene1, gene2 in zip(individual[0:-1], individual[1:]):\n        distance += dist_mat[gene1][gene2]\n    return distance/1000\n\n# load data (this may have to be adapted for different problems)\nwith open(\"data/Caps48.json\", \"r\") as tsp_data:\n    tsp = json.load(tsp_data)\ndistance_matrix = tsp[\"DistanceMatrix\"]\n\n###################\n# Your code starts here\n###################\n```\n\n### Solution:","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"78311c","input":"```python\nnp.random.seed(51)\ndef bestIndSelection(pop, k):\n    ##########################\n    #write your code here\n    ##########################\n\n#this population has been presorted by best fitness (minimum sum of genes), so you don't need to sort it.\ninitPop = np.array(\n    [[1,1,1,1,1],\n    [2,2,2,2,2],\n    [3,3,3,3,3],\n    [4,4,4,4,4],\n    [5,5,5,5,5],\n    [6,6,6,6,6]]).astype(int) \n\n#Call your function here - don't forget to cast the output to integers\n\n#Print your selected population\n```\n\n### Solution:","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"7a2187","input":"# The Knapsack Problem\n\nWe first encountered this problem in the Lesson 4 Homework.\n\nThe knapsack problem is a classical combinatorial optimization problem that will be good for practicing with the ideas of discrete local search and multistart.  Given a set of items, each with a weight and a value, determine which items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.  In the 0-1 version of the knapsack problem, the decision variables are binary (or boolean) and represent whether to include each item in the collection.  We'll start with 20 items. You need to determine the collection of items that maximizes the value and keeps the total weight no more than 50 (that is $\\leq 50$).\n\nWe'll use a **soft constraint** because its possible to find a solution that doesn't satisfy the constraint.  Soft constraints are implemented by including a penalty in the objective function when the proposed solution doesn't satisfy the constraint.  We'll give you the following starter code for the objective function with a soft constraint.\n\n```python\ndef obj_knapsack(x, values, weights, max_tot_weight):\n    # x is a vector of booleans of which items to include\n    tot_value = sum(values[x])\n    penalty = sum(values)*min( max_tot_weight - sum(weights[x]), 0) \n    return tot_value+penalty\n```\n\nThe penalty here is negative when the total weight is too large so that the optimizer knows it hasn't found a good maximizing solution.\n\nOur genetic algorithm always minimizes, so you'll need to alter this objective function. Run the code below.\n\n","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"7c1186","input":"## Provided Code","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"89c6a4","input":"\n   \n### **Question 2** <font color=\"magenta\">(2 points)</font> \n\nMultiple Choice (select all that apply):\nWhich pairs of individuals mated?\n\n\n* 0 and 1\n* 1 and 2\n* 2 and 3\n* 3 and 4\n* 4 and 5\n\n\n### **Question 3** <font color=\"magenta\">(2 points)</font> \nMultiple Choice (select all that apply):\nWhich genes are in individual 5 (the last individual)?\n\n* 1\n* 2\n* 3\n* 4\n* 5\n* 6\n\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"9e6c0d","input":"This function can be applied to an `x` that is any iterable of any length.  We'll be working with numpy arrays.  For the 10 dimensional problems your numpy array should be a vector with 10 floating point numbers.  We'll enforce bounds that $-5.12 \\leq x_i \\leq 5.12$ so all of the entries in $x$ should be between those bounds.  \n\nYou can try whichever crossover and mutation functions that you think would be appropriate, and adjust any hyperparameters you want to adjust. You may also use elitism if you want. \n\nYou **must** add local search using `scipy.optimize.minimize`.\n\nTo add local search to the genetic algorithm, just inside the beginning of your loop you will:\n* sort pop by increasing fitness\n* take the first three individuals with them lowest fitness and replace them by the minimizing location resulting from using scipy.optimize.minimize with bounds applied to each individual, also make sure to update the stored fitness values\n* replace both the fitness values and the individuals in the population with their optimized values\n* after the local searches sort the population again in case the order has changed\n\nYour goal is to find the global minimimum at (0,0,0,...) where the function value is also zero. You might not reach that goal, but you should play with hyperparameters until you get close. (We regularly got 8 or 9 variables at 0 and an $f(x) < 1$. \n\nWe do not provide any starter code for this problem.","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"a32764","input":" ## **Question 11** <font color=\"magenta\">(2 points)</font>\n\nWhat was the shortest tour you found? Enter the number in kilometers.\n\n## **Question 12** <font color=\"magenta\">(2 points)</font>\nWhich city did the tour start in?\n\n* 27\n* 19\n* 17\n* 20\n* 12\n\n## **Question 13** <font color=\"magenta\">(2 points)</font>\n\nIn which TSP approach/option are we allowing for more exploration?\n\n* Option 1\n* Option 2\n* They have the same amount of exploration.\n\n## **Question 14** <font color=\"magenta\">(2 points)</font>\nIn which TSP approach/option are we allowing for more exploitation?\n* Option 1\n* Option 2\n* They have the same amount of exploitation.","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"a9a14b","input":"# The 10-dimensional Rastrigin Function with Local Search \n\n## Question 17 (Manually Graded) <font color=\"magenta\">(6 points)</font>\n\nThe Rastrigin function was first explored in Lesson 4 and is very similar in implementation to the sphere function demonstrated in Lesson 7.  Here is the definition of the function:","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"c46169","input":"Now we'll use the Genetic Algorithm to search for a tour with total distance less than 19,000 km. (You may or may not find one.)\n\nWe'll implement this two ways - once by searching without elitism and once by searching with elitism. For each approach you will:\n\n* Initialize the population with permuations\n* Use the Tournament selection operator described in the lesson (just load GAUtilities.py as we did in the lesson)\n* Use the Ordered Crossover operator described in the lesson.\n* Use the Flip Segments Mutation described in the lesson.\n* Include a plot of your tour to aid in your understanding.\n\n## **Question 7: TSP Option 1** - Manually graded <font color=\"magenta\">(4 points)</font>\n\nEnter your code to solve the traveling salesperson problem for option 1. \n\n* Do not use elitism.\n* Use the parameters we have provided below.\n\n**Note: You may change the population size and number of iterations to a small number while developing your code. But be sure to change them back before answering the questions.**\n\n## Provided Code","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"c5f767","input":"```python\nnp.random.seed(52)\ndef twoPointCrossover(pop, cx_prob, debug=False):\n    #get the sizes from pop\n    pop_size, ind_size = pop.shape[0], pop.shape[1]\n    cx_pop = np.zeros((pop_size,ind_size)) # initialize crossover population\n    for j in range(int(pop_size/2)):  # pop_size must be even\n        parent1, parent2 = pop[2*j], pop[2*j+1]\n        child1, child2 = parent1.copy(), parent2.copy()\n        if np.random.uniform() < cx_prob: # crossover occurs  \n            cx_points = [0,0]\n            while cx_points[0] == cx_points[1]:\n                cx_points = np.random.randint(1,ind_size, 2) #generate pairs of points until they're different\n            ###################################\n            # Your code goes here\n            ###################################\n            #sort the crossover points\n            \n            #adapt the one point crossover line to use your two randomly generated points\n            \n            ########################################\n            # do not change anything after this\n            ########################################\n            \n        cx_pop[2*j] = child1\n        cx_pop[2*j+1] = child2\n    return cx_pop\n\n\n#generate the initial population\ninitPop = np.array(\n    [[1,1,1,1,1,1,1],\n    [2,2,2,2,2,2,2],\n    [3,3,3,3,3,3,3],\n    [4,4,4,4,4,4,4],\n    [5,5,5,5,5,5,5],\n    [6,6,6,6,6,6,6]]\n                  ).astype(int) \n\ncx_prob=.8\ntwoPointCrossover(initPop, cx_prob, debug=True).astype(int)\n```\n\n### Solution:","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"c6dee2","input":"```python\nnp.random.seed(54)\nnum_elite = 50 # should be not more than about 5% of pop_size\npop_size = 1000 # should be even due to the way we'll implement crossover\nind_size = 48 # determines number of input variables for Rastrigin and each individual\ntourn_size = 3 # tournament size for selection\ncx_prob = 0.8 # probability a pair of parents crossover to produce two children\nmut_prob = .1 #0.1 # probability an individual mutates\nind_prob = .05 #0.05 # probability each variable in an individual mutates\nnum_iter = 300 # number of genetic algorithm iterations\nupdate_iter = 100 # how often to display output\n\ndef obj_tour_distance(individual, dist_mat):\n    distance = dist_mat[individual[-1]][individual[0]]\n    for gene1, gene2 in zip(individual[0:-1], individual[1:]):\n        distance += dist_mat[gene1][gene2]\n    return distance/1000\n\n# load data (this may have to be adapted for different problems)\nwith open(\"data/Caps48.json\", \"r\") as tsp_data:\n    tsp = json.load(tsp_data)\ndistance_matrix = tsp[\"DistanceMatrix\"]\n\n##############\n# your code starts here\n##############\n```\n\n### Solution:","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"d92bcb","input":"## Two-Point Crossover \n\nIn the lesson we described One-Point Crossover. Our code for One-Point Crossover is shown below.\n\n```python\ndef onePointCrossover(pop, cx_prob, debug=False):\n    #get the sizes from pop\n    pop_size, ind_size = pop.shape[0], pop.shape[1]\n    cx_pop = np.zeros((pop_size,ind_size)) # initialize crossover population\n    for j in range(int(pop_size/2)):  # pop_size must be even\n        parent1, parent2 = pop[2*j], pop[2*j+1]\n        child1, child2 = parent1.copy(), parent2.copy()\n        if np.random.uniform() < cx_prob: # crossover occurs\n            cx_point = np.random.randint(1,ind_size) # crossover point between 1 and ind_size\n            if debug:\n                print('Crossover happened between Individuals', 2*j, 'and', 2*j+1, 'at point', cx_point)\n            child1[0:cx_point], child2[0:cx_point] = parent2[0:cx_point], parent1[0:cx_point]\n        cx_pop[2*j] = child1\n        cx_pop[2*j+1] = child2\n    return cx_pop\n```\n\nAnother common form of crossover that works for integer, binary, and real numbers is Two-Point Crossover. In Two Point Crossover, two points are chosen, and the values in between those two points are swapped between the parents. Visually, it looks like this:\n\n<img src=\"./images/TwoPointCrossover.png\" width=226>\n\nFrom a code perspective, we're just changing the set starting point from 0 in each child/parent cross to the first of our two generated random points.\n\nComplete the function below for Two Point Crossover. You only need to change the code in between the two lines of hash tags. Run the code.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"e3f9f7","input":"\n# The Traveling Salesperson Problem\n\nIn a previous lesson we saw how to use local search to seek solutions to the TSP problem with 48 cities.  In this homework problem you'll use the genetic algorithm to search for solutions.  The json file Caps48.json in the data folder has both the distance matrix and the optimal tour.  Your goal is to identify tours with total distance under 19,000 kilometers.\n\nThe following cell shows you how to visualize a tour of the 48 cities (and reminds you how to use the json file).  You should plot your solutions to see if they seem reasonable.  A good solution will avoid long detours and shouldn't intersect itself.  We plot the best possible solution here:","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"fe0a51","input":"<body style=\"background-color:aquamarine;\">\n   <h3>Hints for 1-3</h3>\n</body>\nThe code for this problem is very similar to the Wyndor Quadratic Program.  The harder part is formulating the objective function and constraints.","pos":0.5,"type":"cell"}
{"id":0,"time":1693263180839,"type":"user"}
{"last_load":1692992270229,"type":"file"}