{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-54a136f3-7bd3-44a0-b0b3-5a499a13d548.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"234.363px"},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"3d5021","input":"#Add your code here","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"415334","input":"## Not Included in Quiz/Solutions\n# EXECUTE FIRST\n\n# computational imports\nimport numpy as np\nimport pandas as pd\npd.set_option('display.html.use_mathjax', False)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom surprise import Reader, Dataset, KNNBasic, NormalPredictor,BaselineOnly,KNNWithMeans,KNNBaseline\nfrom surprise import SVD, SVDpp, NMF, SlopeOne, CoClustering\nfrom surprise.model_selection import cross_validate\nfrom surprise.model_selection import GridSearchCV\nfrom surprise import accuracy\n\nimport random\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# plotting imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nmatplotlib.style.use('ggplot')\n# for reading files from urls\nimport urllib.request\n# display imports\nfrom IPython.display import display, IFrame\nfrom IPython.core.display import HTML\n\n# import notebook styling for tables and width etc.\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"10e69d","input":"#Add your code here","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"796960","input":"#Add your code here\n","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"45d385","input":"#Add your code here","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"a854fe","input":"#Add your code here","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"54afbd","input":"#Add your code here","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"70948b","input":"#Your code here","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"6067a2","input":"#Add your code here","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"d1e7a5","input":"#Add your code here\n","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6d76e4","input":"#Your code here","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"d92577","input":"# Not Included in Quiz/Solutions\ndef fetchSimilarityMatrix(df, soupCol, vectorizer, vectorType='Tfidf'):\n    '''\n    Parameters\n    df: the dataframe containing a soup column to tranform\n    soupCol: The string title of the soup column\n    vectorizer: an initialized vectorizer, with all pre-processing you desire\n    vectorType: 'Tfidf' or 'Count' - representing the type of vectorizer you used.\n\n    Returns\n    Sparse Similarity Matrix\n    '''\n\n    # make sure the soup has no NaN\n    df[soupCol] = df[soupCol].fillna('')\n    nmatrix = vectorizer.fit_transform(df[soupCol])\n\n    #apply the appropriate vectorizer\n    if(vectorType=='Tfidf'):\n        print('Using Linear Kernel (Tfidf)')\n        sim =linear_kernel(nmatrix, nmatrix)\n    else:\n        print('Using Cosine_similarity')\n        sim = cosine_similarity(nmatrix, nmatrix)\n    return(sim)\n\ndef content_recommender(df, seed, seedCol, sim_matrix,  topN=5): \n    #get the indices based off the seedCol\n    indices = pd.Series(df.index, index=df[seedCol]).drop_duplicates()\n    \n    # Obtain the index of the item that matches our seed\n    idx = indices[seed]\n    \n    # Get the pairwsie similarity scores of all items and convert to tuples\n    sim_scores = list(enumerate(sim_matrix[idx]))\n    \n    #delete the item that was passed in\n    del sim_scores[idx]\n    \n    # Sort the items based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    \n    # Get the scores of the top-n most similar items.\n    sim_scores = sim_scores[:topN]\n    \n    # Get the item indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    snip = df.iloc[movie_indices].copy()\n    snip['sim_score'] = [i[1] for i in sim_scores]\n    \n    # Return the topN most similar items\n    return snip","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"8e47ca","input":"#Add your code here","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"06263d","input":"#Add your code here","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"8a6d6f","input":"#Your code here","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"08fef0","input":"#Add your code here","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"3e1dfe","input":"#Add your code here","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"97d5c8","input":"#Add your code here","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"5615ce","input":"#Add your code here","pos":21,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b66e31","input":"#This section not included in quiz/solutions.\n\n#Function to compute the RMSE score obtained on the testing set by a model\ndef score(cf_model, X_test, *args):\n    \n    #Construct a list of user-item tuples from the testing dataset\n    id_pairs = zip(X_test[X_test.columns[0]], X_test[X_test.columns[1]])\n    \n    #Predict the rating for every user-item tuple\n    y_pred = np.array([cf_model(user, item, *args) for (user, item) in id_pairs])\n    \n    #Extract the actual ratings given by the users in the test data\n    y_true = np.array(X_test[X_test.columns[2]])\n    \n    #Return the final RMSE score\n    return mean_squared_error(y_true, y_pred, squared=False)\n\n#Assign X as the original ratings dataframe and y as the user_id column of ratings.\nX = ratings.copy()\ny = ratings['userID']\n\n#Split into training and test datasets, stratified along user_id\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify = y, test_size = 0.20, random_state=14)\n\n","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"574781","input":"#Add your code here","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"273be3","input":"# Add your code here","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"de87fa","input":"# Add your code here","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"06caa7","input":"# **Question 5** <font color=\"magenta\">(2 points)</font>\n\nWhat is the mean restaurant rating for all restaurants (rounded to 2 significant digits)? \n\n","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"080006","input":"# **Question 15** <font color=\"magenta\">(2 points)</font>\n\nWhat is the regularization ('reg_all') chosen by the grid search? \n","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"1e670c","input":"# **Question 11** <font color=\"magenta\">(2 points)</font>\n\nWhat is the **biased** accuracy (rounded to 2 significant digits) of the algorithm? \n\n\n\n","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"21d201","input":"# **Question 3** <font color=\"magenta\">(2 points)</font>\n\nWhat is the minimum restaurant rating?\n\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"3c67f0","input":"# **Question 18** - Build the Hybrid Function (manually graded) <font color=\"magenta\">(4 points)</font>\n\nSome times recommendation designers are less focused on recommending things that have the highest rating, and more focused on recommending things that will have an acceptable rating, but are very similar to items the user has previously liked. For the homework, we're going to build a hybrid recommender that predicts the ratings a single user would give to all of the restaurants, limits that rating to a specified minimum, and then returns the restaurants that are most similar (content-wise). We'll follow the example used in the lesson in which we will pre-fetch the content recommendations, and pass those pre-fetched recommendations into the hybrid function. \n\nThe full list of parameters needed will be:\n* user: the userid for which we are making predictions\n* contentRecs: the dataframe that contains the content recommendations, with similarity scores (this is returned for you in the content_recommender function we provided)\n* algo: the trained algorithm to use for colaborative filtering\n* predCol: the column in your contentRecs that can be used for predictions\n* minRating: the minimum rating we'll accept (estimated ratings should be >= to this number)\n* N: the final number of recommendations to return\n\nYour function should return a dataframe that contains all of the information that was in your contentRecs plus the estimated rating for the \"N\" number of rows.","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"3f8d5a","input":"# **Question 1** <font color=\"magenta\">(2 points)</font>\n\nWhich of the following recommenders is based on the user/item ratings? (Check all that apply.)\n\n* SVD item-based collaborative filter\n* KNN user-based collaborative filter\n* Content recommender\n* Knowledge-based recommender\n* Chart\n\n# **Question 2** <font color=\"magenta\">(2 points)</font>\n\nWhich Surprise algorithm reduces the size of the problem space through matrix factorization?\n\n* NormalPredictor\n* KNNBasic\n* KNNWithMeans\n* BaselineOnly\n* SVD\n* KNNWithZScores","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"42c355","input":"# **Question 9** <font color=\"magenta\">2 points</font>\n\nWhat is the RMSE (rounded to 2 significant digits) of the Weighted Mean algorithm? \n\n\n\n\n","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"471503","input":"# **Question 13** <font color=\"magenta\">(2 points)</font>\n\nWhat is the number of iterations of the stochastic gradient descent ('n_epochs') value chosen by the grid search? \n\n","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"6184f6","input":"# **Question 10** User-Based SVD - Hyperparameter tuning (Manually Graded) <font color=\"magenta\">(4 points)</font>\nFrom data in the file **restaurant_ratings.csv**, use the *surprise* library in Python to build an <a href=\"https://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD\">SVD</a> user-based collaborative filtering model for the restaurant ratings. Use gridsearch to tune the hyperparameters, reserving 15% of the data to get an unbiased estimate of the accuracy. For the grid, use the following options:\n\n* 'n_epochs': [15, 20, 25] (The number of iterations of the Stochastic Gradient Descent minimization procedure.)\n* 'lr_all': [.005, .025, .001] (The learning rate.)\n* 'reg_all': [.01, .02, .05] (The penalty for complex models.)\n\nAdditionally, use the following:\n\n* 3 folds for cross validation\n* a seed of 14\n\n\nUse the example from the lesson and be sure to set the seed in the appropriate place. **Note:** this code will take several minutes to run.\n\n\n","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"73e335","input":"## **Question 21** Hybrid with KNN <font color=\"magenta\">(2 points)</font>\n\nUse your hybrid function again with  **user 1235** and restaurant '**Lido**'. \n\n* Remember, you will need to call your content_recommender function first to get the similarity scores. (Hint: there are 348 total restaurants.) \n* Use the KNN algorithm you just trained predict ratings. \n* The minimum allowed rating is 4.5. \n* Return the top 3 recommendations. \n\n\n**Hint: If you call your function with user 1001 and Feast, the top recommendation should be Tuome.**\n\nWhat are the top 3 restaurants, in order?\n\n* Bar Primi, Naples 45 Ristorante E Pizzeria, La Pecora Bianca - NoMad\n* Il Mulino New York - Uptown, Naples 45 Ristorante E Pizzeria, Bar Primi\n* .Tarallucci e Vino Upper West Side, Il Mulino New York - Uptown, La Pecora Bianca - NoMad\n* Naples 45 Ristorante E Pizzeria, La Pecora Bianca - NoMad, Il Mulino New York - Uptown\n* La Pecora Bianca - Midtown, La Pecora Bianca - NoMad, Naples 45 Ristorante E Pizzeria\n","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"7f026a","input":"# **Question 20** KNNWithMeans item-based collaborative filter (manually graded)<font color=\"magenta\">(4 points)</font>\n\nTrain a <a href=\"https://surprise.readthedocs.io/en/stable/knn_inspired.html?highlight=knnwith#surprise.prediction_algorithms.knns.KNNWithMeans\">KNNWithMeans Surprise collaborative filter</a>. We ran a gridsearch already and learned that the best k for this is 3, and we get the best results using an item-based similarity measure. You should:\n\n* Set seeds of 14\n* Read in the data and set up your reader\n* Set up a data object\n* Build a full trainset\n* set up a KNNWithMeans algorithm using the following parameters:\n    * k of 3 \n    * set the <a href=\"https://surprise.readthedocs.io/en/stable/prediction_algorithms.html?highlight=user_based#similarity-measure-configuration\">sim_options 'user_based' to False</a> (this switches it to an item-based similarity measure, instead of a user-based).\n* fit the algorithm using the full trainset\n* predict the rating for **user 1000** and **restaurant 300**\n\n**Hint: the predicted rating for user 1000 and restaurant 300 should be 4.32**\n\n\n\n","pos":44,"type":"cell"}
{"cell_type":"markdown","id":"841940","input":"# **Question 14** <font color=\"magenta\">(2 points)</font>\n\nWhat is the learning rate ('lr_all') chosen by the grid search? \n\n","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"8aa6b5","input":"# **Question 19** - Calling the Hybrid Function <font color=\"magenta\">(2 points)</font>\n\nUse your hybrid function to find recommendations for **user 1235** and restaurant '**Lido**'. \n* Remember, you will need to call your content_recommender function first to get the similarity scores. (Hint: there are 348 total restaurants.) \n* Use the SVD algorithm you trained in Question 10 to predict ratings. \n* The minimum allowed rating is 4.5. \n* Return the top 3 recommendations. \n\n**Which answer shows the top 3 recommendations, in order?**\n\n*Hint: If make recommendations for user 1061, and 'Schilling' and everything else the same, the top recommendation should be Edi and The Wolf.*\n\n* Naples 45 Ristorante E Pizzeria, Obica Mozzarella Bar Pizza e Cucina, La Pecora Bianca - NoMad\n* La Pecora Bianca - NoMad, La Pecora Bianca - Midtown, Becco\n* Becco, La Pecora Bianca - Midtown, Stella 34 Trattoria\n* La Pecora Bianca - NoMad, La Pecora Bianca - Midtown, Stella 34 Trattoria\n* Esca, Lincoln Ristorante, La Pecora Bianca - Midtown\n\n\n","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"97317e","input":"# Train/Test Split and Score Setup\n(Note: this section is not included in the quiz and is not graded.)\n\nWe've provided code to you below for a scoring function and to split the data into train and test sets. Use the train and test set generated from this code to answer the next questions. You must not change this code if you want to get the correct answers.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"975d2a","input":"# **Question 16** <font color=\"magenta\">(2 points)</font>\n\nNow that we know what our best parameters should be, we need to train our SVD model on all the available data. Do the following:\n* set the seeds for reproducibility\n* reset the data.raw_ratings to all of the ratings OR reload the data from the dataframe\n* use the build_full_trainset() method to build a full trainset\n* set up an SVD algorithm using the best parameters\n* fit the data to the trainset\n* predict the estimated rating for user 1061 and restaurant 347\n\nWhat is the predicted estimated rating (rounded to 2 digits) for **user 1061** and **restaurant 347**?\n\n\n\n","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"9d9fb7","input":"# **Question 6** <font color=\"magenta\">(2 points)</font>\n\nWhat is the median of the restaurant rating scale? \n\n","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"a8ad82","input":"# Data Exploration\n(Note: This section is not included in the quiz and is ungraded.)","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"ada47a","input":"<font size=18>Lesson 14 Homework: Recommender Systems 2</font>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"b9f780","input":"# **Question 7** <font color=\"magenta\">(2 points)</font>\n\nCompute a baseline model that always returns the median of the rating scale (rounded to 2 significant digits). What is the RMSE on this model?\n","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"c71320","input":"# Hybrid Filter Setup \n(Note: This section is not included in the quiz/solutions.)\n\nFrom data in the files **restaurant_ratings.csv** and **restaurants.csv** build a recommender system that is a hybrid of a metadata content-based recommender and the SVD user-based collaborative filter that you just trained.  \n\nTo set up your hybrid filter:\n\n* read in the restaurants.csv into a variable called rest\n* review the data in the dataframe (Note that we have pre-cleaned the data for you, including using TextBlob to extract just the relevant descriptors from the description. Not all restaurants have a description.)\n* make a soup from the following columns, which are all simple strings (**Hint: the soup for the first item in the geoplaces dataframe should be: 'Contemporary American Average_price rustic airy adorable classic most distinguished uncommon innovative American proud only world-class week.IMPORTANT special welcome'**):\n    - restaurant_type\n    - price_range\n    - ambiance\n    - descriptors\n* Instantiate a CountVectorizer with no stopwords. (We shouldn't have much in the way of stopwords, since it's all keywords.) \n* Use the provided fetchSimilarity function to get a countVectorizer similarity matrix using the soup column. (**Hint: the similarity at [0,2] should be 0.2849014411490949.**)\n","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"d28eb9","input":"# **Question 12** <font color=\"magenta\">(2 points)</font>\n\nWhat is the **unbiased** accuracy (rounded to 2 significant digits) of the algorithm? \n\n\n","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"d7297a","input":"# **Question 17** Use The Content Recommender <font color=\"magenta\">(2 points)</font>\n\nUsing the provided content recommender function and the code you've prepared, get the top 5 recommendations for 'Tao Uptown'. (Hint: the top restaurant for 'Becco' should be 'Scampi'.)\n\nWhich if these restaurants is the top recommendation?\n\n* Haru Sushi - Amsterdam Ave\n* Bistrot Leo\n* Rice & Gold\n* Zengo - NYC\n* Restaurant Nippon\n","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"e03acf","input":"The file **restaurant_ratings.csv** (found in the presentation download for this lesson) contains user ratings for various New York City restaurants. You can read a little more about the data at <a href=\"https://www.kaggle.com/popoandrew/restaurant-week-2018-in-nyc?select=restaurant_week_2018_final.csv\">Kaggle</a>. We have modified the data to generate user ratings that match the star columns in this file.\n\nDo the following:\n\n* read the data into a variable called \"ratings\"\n* display the first 5 lines of the data (get familiar with the data frame)\n* find the minimum restaurant rating\n* find the maximum restaurant rating\n* adjust the rating scale by shifting up 1 if 0 is included","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"e8a5ec","input":"# **Question 8** Build a Weighted Mean User-Based Filter (manually graded) <font color=\"magenta\">(4 points)</font>\n\nFrom data in the file **restaurant_rating.csv**, build a ratings matrix from the data frame of users, restaurants, and ratings and build a user-based collaborative filtering model that weights mean rank using cosine similarity among users.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"edc578","input":"# **Question 4** <font color=\"magenta\">(2 points)</font>\n\nWhat is the maximum restaurant rating?\n\n","pos":8,"type":"cell"}
{"id":0,"time":1625000012685,"type":"user"}
{"last_load":1625000013318,"type":"file"}