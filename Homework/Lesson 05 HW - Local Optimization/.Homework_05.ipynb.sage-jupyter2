{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-993202b5-057a-4fd5-b991-55a6b6412d30.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"056e6e","input":"","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0892f7","input":"","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7795c3","input":"","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a8ab01","input":"","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ba98e2","input":"","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d547fc","input":"","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"056a53","input":"# generate random weights and values for a knapsack problem (DO NOT CHANGE)\nimport numpy as np\nnum_items = 20\nnp.random.seed(seed=123)\nvalues = np.random.randint(low=5, high=50, size=num_items)\nweights = np.random.randint(low=1, high=10, size=num_items)\nmax_weight = 50\nnp.random.seed() # use system clock to reset the seed so future random numbers will appear random","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"ed9922","input":"tot_weight = sum( weights[x] )\ntot_weight","output":{"0":{"data":{"text/plain":"11"},"exec_count":10,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"1e53b4","input":"tot_value = sum( values[x] )\ntot_value","output":{"0":{"data":{"text/plain":"68"},"exec_count":11,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"9f5d6c","input":"# try executing this cell a few times and watch x change\nbit_to_flip = np.random.randint(num_items)\nx[bit_to_flip] = ~x[bit_to_flip]\nx","output":{"0":{"data":{"text/plain":"array([ True, False,  True, False,  True, False, False, False, False,\n       False, False, False, False, False, False, False, False,  True,\n       False, False])"},"exec_count":12,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"a0de76","input":"x = np.zeros(num_items, dtype = bool)  # all false\nx[[0,2,4]] = True\nx","output":{"0":{"data":{"text/plain":"array([ True, False,  True, False,  True, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False])"},"exec_count":2,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"3d5332","input":"import numpy as np\nnp.random.seed()\n\nnp.random.randint(10)\n\n","output":{"0":{"data":{"text/plain":"1"},"exec_count":4,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"1305f5","input":"The management of the Albert Hanson Company is trying to determine the best product mix for two new products. Because these products would share the same production facilities, the total number of units produced of the two products combined cannot exceed two per hour. Because of uncertainty about how well these products will sell, the profit from producing each product provides decreasing marginal returns as the production rate is increased. In particular, with a production rate of $R_1$ units per hour, it is estimated that Product 1 would provide a profit (in dollars per hour) of $200 R_1 - 100 R_1^2.$ If the production rate of product 2 is $R_2$ units per hour, its estimated profit (in dollars per hour) would be $300 R_2 - 100 R_2^2.$\n\n### Question 1 <font color=\"magenta\">(8 points, manual)</font>\n\nFormulate a quadratic programming model and solve it using Pyomo with the ipopt solver.  Put your complete code below and in your CoCalc notebook.  We are allowing fractional solutions here, so this is not an integer programming problem.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"1bcfa9","input":"## Questions 8-10","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"21cdc7","input":"The knapsack problem is a classical combinatorial optimization problem that will be good for practicing with the ideas of discrete local search and multistart.  Given a set of items, each with a weight and a value, determine which items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.  In the 0-1 version of the knapsack problem, the decision variables are binary (or boolean) and represent whether to include each item in the collection.  We'll start with 20 items. You need to determine the collection of items that maximizes the value and keeps the total weight up to 50 (that is $\\leq 50$).","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"2b9d65","input":"To find the line of least squares fit of the form $\\hat{y} = b_0 + b_1 x$ to fit data of the form $(x_1,y_1), (x_2,y_2),\\ldots,(x_n,y_n)$ we minimize a loss function.  The loss function is the sum of the squares residuals and only depends on $b_0$ and $b_1$ for fixed $xy$-data:\n\n$$ SS(b_0,b_1) = \\sum_{i=1}^{n} \\left( y_i - \\hat{y}_i \\right)^2 = \\sum_{i=1}^{n} \\left( y_i - (b_0 + b_1 x_i) \\right)^2 $$.\n\n(Be sure to compute the squares before you compute the sum!)\n\nThe file age_height.csv contains ages (years) and heights (inches) for 7 children. Write Python code to evaluate the loss function (follow along with the logistic regression example while making suitable changes to the loss function) and use `minimize` to identify the coefficients of the line of least-squares fit for predicting height ($y$) from ($age$).  Include a scatter plot of the data that includes a plot of the line.\n\n### Question 8 <font color=\"magenta\">(10 points, manual)</font>\n\nInclude complete Python code in the space below that includes the loss function, shows how to minimize it, prints out the output, and makes a plot of the line on a scatterplot of the data.  You should also include your plot (<a href=\"https://chartio.com/resources/tutorials/how-to-save-a-plot-to-a-file-using-matplotlib/\">check out savefig</a> or use a cropped screenshot).  The same elements should be in your CoCalc notebook.  Here is the loss function from the logistic regression problem in the lesson along with a couple of notes to get you started.\n\n```python\ndef neg_log_loss( coef, *args): # rename your function\n    b0 = coef[0]\n    b1 = coef[1]\n    x = args[0]\n    y = args[1]\n    \n    # you'll need to change the code below here\n    p = 1.0/(1.0 + np.exp(-(b0 + b1*x)))\n    ll = sum( y*np.log(p)+(1-y)*np.log(1-p) )\n    return(-ll) # log_loss needs to be MAXimized\n```\n\nInstead of `p` and `ll` compute `ss` the sum of the squares as shown in the formula above and then `return(ss)`.  Make sure you're computing the sum of the squared residuals and not the sum of the residuals squared ... parentheses matter!","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"42b51a","input":"# Homework 05: Local Optimization\n\n### When asking questions about homework in Piazza please use a tag in the subject line like HW1.3 to refer to Homework 1, Question 3.  So the subject line might be **HW1.3 question**.  Note there are no spaces in \"HW1.3\".  This really helps keep Piazza easily searchable for everyone!","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"4caf46","input":"Consider the nonconvex profit function $$p(x) = 100x^6 - 1359x^5 + 6836 x^4 - 15670 x^3 + 15870 x^2 - 5095 x$$\nwith $0 \\leq x \\leq 5.$\n\n\n### Question 4  <font color=\"magenta\">(2 points, manual)</font>\n\nGraph the function for $0 \\leq x \\leq 5$ in your notebook and determine how many local minima there are.  Do not count endpoints.  Put your complete code to produce the graph below and in your CoCalc notebook.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"509662","input":"The variables will be a vector of booleans of length `num_items`.  We could initialize a vector like this and then set the vector to include the 1st, 3rd, and 5th items:","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"50e264","input":"### Question 9 <font color=\"magenta\">(1 point, auto)</font>\nWhat is the value of the intercept, $b_0$? Enter your answer to three decimal places.\n\n### Question 10 <font color=\"magenta\">(1 point, auto)</font>\nWhat is the value of the slope, $b_1$? Enter your answer to three decimal places.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"57f2bd","input":"## Question 12 <font color=\"magenta\">(4 points, manual)</font>\n\nNow write a loop to do 200 local searches (each with random moves starting from a collection with no items in it). Each local search should call the function you defined in Question 11. Clearly identify the best overall solution.  Put complete code to do the searches and display the best results in the space below and in your CoCalc notebook.  Do not print out information from each search, just the final results.\n\nNext week we'll see some alternative search techniques that will generally enable us to find better solutions.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"5c2ddd","input":"The total value of the items included in the collection:","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"62db92","input":"## Questions 4-7","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"6e8d85","input":"The total weight of the items included in the collection:","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"86d862","input":"## Questions 1-3","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"99223f","input":"Implement a local search where the search starts with no items included in the collection and generates new states (moves) by randomly choosing one of the booleans in the state vector and toggling it.  Like this:","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"a97f09","input":"### Question 5 <font color=\"magenta\">(1 point, auto)</font>\n\nHow many local minima are there? Do not count endpoints.\n\n\n### Question 6 <font color=\"magenta\">(1 point, auto)</font>\n\nWhat is the value of $p$ at the second-largest local maximum?  Enter your answer to two decimal places.\n\n\n### Question 7 <font color=\"magenta\">(4 points, manual)</font>\n\nWrite a multistart procedure that starts from uniform randomly sampled points in [0,5] to locate the absolute maximum value of profit. The algorithm should stop after 20 iterations in which no improvement in the max value has been obtained.  Include your code and the output from your code in the space below.  Your code should print out the max value and the x-value where it occurs.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"b2c07c","input":"## Question 14 <font color=\"magenta\">(10 points, manual)</font>\n\nThe Value Balancing Problem was a Self_Assessment problem near the end of the Lesson_05 notebook.  You can see our solution in the Self_Assessement_Soln notebook.  Use the locsearch package in this directory to find a local solution to the Value Balancing problem.  You can follow the example at the end of Lesson_05. We've copied some code from the lesson to get you started.  Remember to set this up so that your decision variables (the group assignments) are stored in the state attribute of your subclass.\n\n```python\n# the objective function\ndef group_fitness(groups,num_groups,values):\n    # groups must be a numpy array for this to work\n    sums = np.array([ sum( values[ groups == i] ) for i in range(num_groups) ])\n    return max(sums)-min(sums)\n\n# the move function\ndef change_group(groups, num_groups, debug=False):\n    #get a copy of the groups\n    new_groups = groups.copy()    \n    #select item to change\n    switch = np.random.randint(0, groups.shape[0])\n    #select new group value\n    new_group = np.random.randint(0,num_groups)\n    while groups[switch] == new_group:\n        new_group = np.random.randint(0,num_groups)\n    new_groups[switch] = new_group\n    if debug:\n        print(f'The item at {switch} should change to {new_group}')\n        print(f'The initial groups are: {groups} and the changed groups are {new_groups}')\n       \n    return new_groups\n    \n# problem data\nnum_groups = 4\nnum_items = 1000\nnp.random.seed(5)\nvalues = np.random.randint(2,20,size=num_items)\nnp.random.seed()\n```\n\nIn the space below, include your complete code to solve the Value Balancing problem using the LocalSearcher class.  You should also include output from a run of the code.  The same elements should be in your ÇoCalc notebook.","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"b3185c","input":"Accept the state if the total weight is is $\\leq 50$ and maximize the value by moving uphill\n\n### Question 11 <font color=\"magenta\">(4 points, manual)</font>\n\nWrite a local search algorithm that moves uphill until no improvements have been made in the last 1000 iterations.  Write the algorithm as a function with the values and weights as inputs and that returns the best collection of items to include as well as the value and weight of that collection.  Include your code and the results of running the code once in the space below.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"b9fe32","input":"## Questions 11-12","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"d2cd75","input":"## Question 13 <font color=\"magenta\">(2 points, manual)</font>\n\nEnter the maximum total value for knapsack that you found in Question 12.  If it's not over 400 then something is likely wrong.","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"ee685f","input":"### Question 2 <font color=\"magenta\">(1 point, auto)</font>\n\nEnter the maximum value of the profit to two decimal places.\n\n### Question 3 <font color=\"magenta\">(1 point, auto)</font>\n\nTo achieve the maximum value of the profit function, how many units of product 2 should be introduced each hour?  Enter your answer to two decimal places.\n","pos":4,"type":"cell"}
{"id":0,"time":1661458973465,"type":"user"}
{"last_load":1661458973322,"type":"file"}